{"version":3,"names":["_expoModulesCore","require","_AV","_ExponentAV","_interopRequireDefault","_AudioAvailability","_RecordingConstants","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_Sound","_Recording","_class","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread","target","i","arguments","length","source","_defineProperty2","getOwnPropertyDescriptors","defineProperties","_recorderExists","eventEmitter","Platform","OS","EventEmitter","ExponentAV","getPermissionsAsync","_getPermissionsAsync","_asyncToGenerator2","_regenerator","mark","_callee14","wrap","_callee14$","_context14","prev","next","abrupt","stop","requestPermissionsAsync","_requestPermissionsAsync","_callee15","_callee15$","_context15","usePermissions","createPermissionHook","getMethod","requestMethod","Recording","_this","_classCallCheck2","_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS","_ref","_callee","finalStatus","_finalStatus$duration","_callee$","_context","_canRecord","_isDoneRecording","_finalDurationMillis","durationMillis","_subscription","remove","_disablePolling","getStatusAsync","sent","_x","_callee2","_callee2$","_context2","isAudioEnabled","_onRecordingStatusUpdate","_progressUpdateTimeoutVariable","setTimeout","_pollingLoop","_progressUpdateIntervalMillis","t0","_callee3","status","_callee3$","_context3","_performOperationAndHandleStatusAsync","getAudioRecordingStatus","canRecord","isRecording","isDoneRecording","_callOnRecordingStatusUpdateForNewStatus","_createClass2","value","clearTimeout","_enablePollingIfNecessaryAndPossible","_performOperationAndHandleStatusAsync2","_callee4","operation","_callee4$","_context4","throwIfAudioIsDisabled","Error","_x2","setOnRecordingStatusUpdate","onRecordingStatusUpdate","setProgressUpdateInterval","progressUpdateIntervalMillis","_prepareToRecordAsync","_callee5","options","extensionRegex","_yield$ExponentAV$pre","uri","currentStatus","_args5","_callee5$","_context5","undefined","RecordingOptionsPresets","LOW_QUALITY","android","ios","extension","test","concat","toString","addListener","_cleanupForUnloadedRecorder","prepareAudioRecorder","_uri","_options","prepareToRecordAsync","_getAvailableInputs","_callee6","_callee6$","_context6","getAvailableInputs","_getCurrentInput","_callee7","_callee7$","_context7","getCurrentInput","_setInput","_callee8","inputUid","_callee8$","_context8","setInput","_x3","_startAsync","_callee9","_callee9$","_context9","startAudioRecording","startAsync","_pauseAsync","_callee10","_callee10$","_context10","pauseAudioRecording","pauseAsync","_stopAndUnloadAsync","_callee11","_stopResult","stopResult","stopError","_callee11$","_context11","stopAudioRecording","unloadAudioRecorder","Promise","reject","stopAndUnloadAsync","getURI","_createNewLoadedSound","_callee12","initialStatus","onPlaybackStatusUpdate","_args12","_callee12$","_context12","console","warn","createNewLoadedSoundAsync","createNewLoadedSound","_createNewLoadedSoundAsync","_callee13","_args13","_callee13$","_context13","Sound","createAsync","_callee16","recording","_args16","_callee16$","_context16","keepAudioActiveHint"],"sources":["../../src/Audio/Recording.ts"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  EventEmitter,\n  Subscription,\n  Platform,\n} from 'expo-modules-core';\n\nimport {\n  _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n} from '../AV';\nimport ExponentAV from '../ExponentAV';\nimport { isAudioEnabled, throwIfAudioIsDisabled } from './AudioAvailability';\nimport {\n  RecordingInput,\n  RecordingObject,\n  RecordingOptions,\n  RecordingStatus,\n} from './Recording.types';\nimport { RecordingOptionsPresets } from './RecordingConstants';\nimport { Sound, SoundObject } from './Sound';\n\nlet _recorderExists: boolean = false;\nconst eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\n\n/**\n * Checks user's permissions for audio recording.\n * @return A promise that resolves to an object of type `PermissionResponse`.\n */\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.getPermissionsAsync();\n}\n\n/**\n * Asks the user to grant permissions for audio recording.\n * @return A promise that resolves to an object of type `PermissionResponse`.\n */\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.requestPermissionsAsync();\n}\n\n/**\n * Check or request permissions to record audio.\n * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [permissionResponse, requestPermission] = Audio.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * This class represents an audio recording. After creating an instance of this class, `prepareToRecordAsync`\n * must be called in order to record audio. Once recording is finished, call `stopAndUnloadAsync`. Note that\n * only one recorder is allowed to exist in the state between `prepareToRecordAsync` and `stopAndUnloadAsync`\n * at any given time.\n *\n * Note that your experience must request audio recording permissions in order for recording to function.\n * See the [`Permissions` module](/guides/permissions) for more details.\n *\n * Additionally, audio recording is [not supported in the iOS Simulator](/workflow/ios-simulator/#limitations).\n *\n * @example\n * ```ts\n * const recording = new Audio.Recording();\n * try {\n *   await recording.prepareToRecordAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);\n *   await recording.startAsync();\n *   // You are now recording!\n * } catch (error) {\n *   // An error occurred!\n * }\n * ```\n *\n * @return A newly constructed instance of `Audio.Recording`.\n */\nexport class Recording {\n  _subscription: Subscription | null = null;\n  _canRecord: boolean = false;\n  _isDoneRecording: boolean = false;\n  _finalDurationMillis: number = 0;\n  _uri: string | null = null;\n  _onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null;\n  _progressUpdateTimeoutVariable: number | null = null;\n  _progressUpdateIntervalMillis: number = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n  _options: RecordingOptions | null = null;\n\n  // Internal methods\n\n  _cleanupForUnloadedRecorder = async (finalStatus?: RecordingStatus) => {\n    this._canRecord = false;\n    this._isDoneRecording = true;\n    this._finalDurationMillis = finalStatus?.durationMillis ?? 0;\n    _recorderExists = false;\n    if (this._subscription) {\n      this._subscription.remove();\n      this._subscription = null;\n    }\n    this._disablePolling();\n    return await this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n  };\n\n  _pollingLoop = async () => {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._progressUpdateTimeoutVariable = setTimeout(\n        this._pollingLoop,\n        this._progressUpdateIntervalMillis\n      ) as any;\n      try {\n        await this.getStatusAsync();\n      } catch {\n        this._disablePolling();\n      }\n    }\n  };\n\n  _disablePolling() {\n    if (this._progressUpdateTimeoutVariable != null) {\n      clearTimeout(this._progressUpdateTimeoutVariable);\n      this._progressUpdateTimeoutVariable = null;\n    }\n  }\n\n  _enablePollingIfNecessaryAndPossible() {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._disablePolling();\n      this._pollingLoop();\n    }\n  }\n\n  _callOnRecordingStatusUpdateForNewStatus(status: RecordingStatus) {\n    if (this._onRecordingStatusUpdate != null) {\n      this._onRecordingStatusUpdate(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<RecordingStatus>\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n    if (this._canRecord) {\n      const status = await operation();\n      this._callOnRecordingStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because this recorder is not ready to record.');\n    }\n  }\n\n  /**\n   * Creates and starts a recording using the given options, with optional `onRecordingStatusUpdate` and `progressUpdateIntervalMillis`.\n   *\n   * ```ts\n   * const { recording, status } = await Audio.Recording.createAsync(\n   *   options,\n   *   onRecordingStatusUpdate,\n   *   progressUpdateIntervalMillis\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const recording = new Audio.Recording();\n   * await recording.prepareToRecordAsync(options);\n   * recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n   * await recording.startAsync();\n   * ```\n   *\n   * @param options Options for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to,\n   * the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`. See below for details on `RecordingOptions`.\n   * @param onRecordingStatusUpdate A function taking a single parameter `status` (a dictionary, described in `getStatusAsync`).\n   * @param progressUpdateIntervalMillis The interval between calls of `onRecordingStatusUpdate`. This value defaults to 500 milliseconds.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { recording: recordingObject, status } = await Audio.Recording.createAsync(\n   *     Audio.RecordingOptionsPresets.HIGH_QUALITY\n   *   );\n   *   // You are now recording!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded.\n   */\n  static createAsync = async (\n    options: RecordingOptions = RecordingOptionsPresets.LOW_QUALITY,\n    onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null,\n    progressUpdateIntervalMillis: number | null = null\n  ): Promise<RecordingObject> => {\n    const recording: Recording = new Recording();\n    if (progressUpdateIntervalMillis) {\n      recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    }\n    recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n    await recording.prepareToRecordAsync({\n      ...options,\n      keepAudioActiveHint: true,\n    });\n    try {\n      const status = await recording.startAsync();\n      return { recording, status };\n    } catch (err) {\n      recording.stopAndUnloadAsync();\n      throw err;\n    }\n  };\n\n  // Get status API\n\n  /**\n   * Gets the `status` of the `Recording`.\n   * @return A `Promise` that is resolved with the `RecordingStatus` object.\n   */\n  getStatusAsync = async (): Promise<RecordingStatus> => {\n    // Automatically calls onRecordingStatusUpdate.\n    if (this._canRecord) {\n      return this._performOperationAndHandleStatusAsync(() => ExponentAV.getAudioRecordingStatus());\n    }\n    const status = {\n      canRecord: false,\n      isRecording: false,\n      isDoneRecording: this._isDoneRecording,\n      durationMillis: this._finalDurationMillis,\n    };\n    this._callOnRecordingStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  /**\n   * Sets a function to be called regularly with the `RecordingStatus` of the `Recording`.\n   *\n   * `onRecordingStatusUpdate` will be called when another call to the API for this recording completes (such as `prepareToRecordAsync()`,\n   * `startAsync()`, `getStatusAsync()`, or `stopAndUnloadAsync()`), and will also be called at regular intervals while the recording can record.\n   * Call `setProgressUpdateInterval()` to modify the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n   *\n   * @param onRecordingStatusUpdate A function taking a single parameter `RecordingStatus`.\n   */\n  setOnRecordingStatusUpdate(onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null) {\n    this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n    if (onRecordingStatusUpdate == null) {\n      this._disablePolling();\n    } else {\n      this._enablePollingIfNecessaryAndPossible();\n    }\n    this.getStatusAsync();\n  }\n\n  /**\n   * Sets the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n   * See `setOnRecordingStatusUpdate` for details. This value defaults to 500 milliseconds.\n   * @param progressUpdateIntervalMillis The new interval between calls of `onRecordingStatusUpdate`.\n   */\n  setProgressUpdateInterval(progressUpdateIntervalMillis: number) {\n    this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    this.getStatusAsync();\n  }\n\n  // Record API\n\n  /**\n   * Loads the recorder into memory and prepares it for recording. This must be called before calling `startAsync()`.\n   * This method can only be called if the `Recording` instance has never yet been prepared.\n   *\n   * @param options `RecordingOptions` for the recording, including sample rate, bitrate, channels, format, encoder, and extension.\n   * If no options are passed to `prepareToRecordAsync()`, the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`.\n   *\n   * @return A `Promise` that is fulfilled when the recorder is loaded and prepared, or rejects if this failed. If another `Recording` exists\n   * in your experience that is currently prepared to record, the `Promise` will reject. If the `RecordingOptions` provided are invalid,\n   * the `Promise` will also reject. The promise is resolved with the `RecordingStatus` of the recording.\n   */\n  async prepareToRecordAsync(\n    options: RecordingOptions = RecordingOptionsPresets.LOW_QUALITY\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n\n    if (_recorderExists) {\n      throw new Error('Only one Recording object can be prepared at a given time.');\n    }\n\n    if (this._isDoneRecording) {\n      throw new Error('This Recording object is done recording; you must make a new one.');\n    }\n\n    if (!options || !options.android || !options.ios) {\n      throw new Error(\n        'You must provide recording options for android and ios in order to prepare to record.'\n      );\n    }\n\n    const extensionRegex = /^\\.\\w+$/;\n    if (\n      !options.android.extension ||\n      !options.ios.extension ||\n      !extensionRegex.test(options.android.extension) ||\n      !extensionRegex.test(options.ios.extension)\n    ) {\n      throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n    }\n\n    if (!this._canRecord) {\n      if (eventEmitter) {\n        this._subscription = eventEmitter.addListener(\n          'Expo.Recording.recorderUnloaded',\n          this._cleanupForUnloadedRecorder\n        );\n      }\n\n      const {\n        uri,\n        status,\n      }: {\n        uri: string | null;\n        // status is of type RecordingStatus, but without the canRecord field populated\n        status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n      } = await ExponentAV.prepareAudioRecorder(options);\n      _recorderExists = true;\n      this._uri = uri;\n      this._options = options;\n      this._canRecord = true;\n\n      const currentStatus = { ...status, canRecord: true };\n      this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n      this._enablePollingIfNecessaryAndPossible();\n      return currentStatus;\n    } else {\n      throw new Error('This Recording object is already prepared to record.');\n    }\n  }\n\n  /**\n   * Returns a list of available recording inputs. This method can only be called if the `Recording` has been prepared.\n   * @return A `Promise` that is fulfilled with an array of `RecordingInput` objects.\n   */\n  async getAvailableInputs(): Promise<RecordingInput[]> {\n    return ExponentAV.getAvailableInputs();\n  }\n\n  /**\n   * Returns the currently-selected recording input. This method can only be called if the `Recording` has been prepared.\n   * @return A `Promise` that is fulfilled with a `RecordingInput` object.\n   */\n  async getCurrentInput(): Promise<RecordingInput> {\n    return ExponentAV.getCurrentInput();\n  }\n\n  /**\n   * Sets the current recording input.\n   * @param inputUid The uid of a `RecordingInput`.\n   * @return A `Promise` that is resolved if successful or rejected if not.\n   */\n  async setInput(inputUid: string): Promise<void> {\n    return ExponentAV.setInput(inputUid);\n  }\n\n  /**\n   * Begins recording. This method can only be called if the `Recording` has been prepared.\n   * @return A `Promise` that is fulfilled when recording has begun, or rejects if recording could not be started.\n   * The promise is resolved with the `RecordingStatus` of the recording.\n   */\n  async startAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.startAudioRecording());\n  }\n\n  /**\n   * Pauses recording. This method can only be called if the `Recording` has been prepared.\n   *\n   * > This is only available on Android API version 24 and later.\n   *\n   * @return A `Promise` that is fulfilled when recording has paused, or rejects if recording could not be paused.\n   * If the Android API version is less than 24, the `Promise` will reject. The promise is resolved with the\n   * `RecordingStatus` of the recording.\n   */\n  async pauseAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.pauseAudioRecording());\n  }\n\n  /**\n   * Stops the recording and deallocates the recorder from memory. This reverts the `Recording` instance\n   * to an unprepared state, and another `Recording` instance must be created in order to record again.\n   * This method can only be called if the `Recording` has been prepared.\n   *\n   * > On Android this method may fail with `E_AUDIO_NODATA` when called too soon after `startAsync` and\n   * > no audio data has been recorded yet. In that case the recorded file will be invalid and should be discarded.\n   *\n   * @return A `Promise` that is fulfilled when recording has stopped, or rejects if recording could not be stopped.\n   * The promise is resolved with the `RecordingStatus` of the recording.\n   */\n  async stopAndUnloadAsync(): Promise<RecordingStatus> {\n    if (!this._canRecord) {\n      if (this._isDoneRecording) {\n        throw new Error('Cannot unload a Recording that has already been unloaded.');\n      } else {\n        throw new Error('Cannot unload a Recording that has not been prepared.');\n      }\n    }\n    // We perform a separate native API call so that the state of the Recording can be updated with\n    // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n    let stopResult: RecordingStatus | undefined;\n    let stopError: Error | undefined;\n    try {\n      stopResult = await ExponentAV.stopAudioRecording();\n    } catch (err) {\n      stopError = err;\n    }\n\n    // Web has to return the URI at the end of recording, so needs a little destructuring\n    if (Platform.OS === 'web' && stopResult?.uri !== undefined) {\n      this._uri = stopResult.uri;\n    }\n\n    // Clean-up and return status\n    await ExponentAV.unloadAudioRecorder();\n    const status = await this._cleanupForUnloadedRecorder(stopResult);\n    return stopError ? Promise.reject(stopError) : status;\n  }\n\n  // Read API\n\n  /**\n   * Gets the local URI of the `Recording`. Note that this will only succeed once the `Recording` is prepared\n   * to record. On web, this will not return the URI until the recording is finished.\n   * @return A `string` with the local URI of the `Recording`, or `null` if the `Recording` is not prepared\n   * to record (or, on Web, if the recording has not finished).\n   */\n  getURI(): string | null {\n    return this._uri;\n  }\n\n  /**\n   * @deprecated Use `createNewLoadedSoundAsync()` instead.\n   */\n  async createNewLoadedSound(\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n  ): Promise<SoundObject> {\n    console.warn(\n      `createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`\n    );\n    return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n  }\n\n  /**\n   * Creates and loads a new `Sound` object to play back the `Recording`. Note that this will only succeed once the `Recording`\n   * is done recording and `stopAndUnloadAsync()` has been called.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet`\n   * and the default initial playback status.\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject`.\n   */\n  async createNewLoadedSoundAsync(\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n  ): Promise<SoundObject> {\n    if (this._uri == null || !this._isDoneRecording) {\n      throw new Error('Cannot create sound when the Recording has not finished!');\n    }\n    return Sound.createAsync(\n      // $FlowFixMe: Flow can't distinguish between this literal and Asset\n      { uri: this._uri },\n      initialStatus,\n      onPlaybackStatusUpdate,\n      false\n    );\n  }\n}\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\n\nexport * from './RecordingConstants';\n\nexport * from './Recording.types';\n"],"mappings":"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"}