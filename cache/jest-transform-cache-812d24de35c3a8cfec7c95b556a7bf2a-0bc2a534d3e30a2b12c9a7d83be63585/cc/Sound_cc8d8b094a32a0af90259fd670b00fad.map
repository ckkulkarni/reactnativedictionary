{"version":3,"names":["_expoModulesCore","require","_AV","_ExponentAV","_interopRequireDefault","_AudioAvailability","_class","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","Sound","_this","_classCallCheck2","EventEmitter","ExponentAV","_ref","status","_key","_callOnPlaybackStatusUpdateForNewStatus","_ref2","metadata","_this$_onMetadataUpda","_onMetadataUpdate","call","_ref3","error","_errorCallback","_clearSubscriptions","_loaded","getUnloadedStatus","_asyncToGenerator2","_regenerator","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","_performOperationAndHandleStatusAsync","getStatusForSound","stop","_createClass2","value","shouldDismissBasedOnCoalescing","_lastStatusUpdateTime","JSON","stringify","_lastStatusUpdate","Date","now","getTime","_coalesceStatusUpdatesInMillis","_onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync2","_callee2","operation","_callee2$","_context2","throwIfAudioIsDisabled","sent","Error","_x","_updateAudioSampleReceivedCallback","globalThis","__EXAV_setOnAudioSampleReceivedCallback","Platform","OS","console","warn","UnavailabilityError","concat","_typeof2","_onAudioSampleReceived","_subscribeToNativeEvents","_subscriptions","_eventEmitter","addListener","_internalStatusUpdateCallback","_internalMetadataUpdateCallback","_internalErrorCallback","e","remove","setOnPlaybackStatusUpdate","onPlaybackStatusUpdate","getStatusAsync","setOnMetadataUpdate","onMetadataUpdate","setOnAudioSampleReceived","callback","_loadAsync","_callee3","_this2","initialStatus","downloadFirst","_yield$getNativeSourc","nativeSource","fullInitialStatus","_args3","_callee3$","_context3","undefined","_loading","getNativeSourceAndFullInitialStatusForLoadAsync","Promise","resolve","reject","loadSuccess","result","_result","_slicedToArray2","loadError","loadForSound","then","loadAsync","_x2","_unloadAsync","_callee4","_callee4$","_context4","unloadForSound","unloadAsync","_setStatusAsync","_callee5","_this3","_callee5$","_context5","assertStatusValuesInBounds","setStatusForSound","setStatusAsync","_x3","_replayAsync","_callee6","_this4","_args6","_callee6$","_context6","positionMillis","replaySound","shouldPlay","replayAsync","exports","_ref5","_callee7","_args7","_callee7$","_context7","createAsync","_x4","_ref6","_callee8","sound","_args8","_callee8$","_context8","_x5","assign","prototype","PlaybackMixin"],"sources":["../../src/Audio/Sound.ts"],"sourcesContent":["import { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVMetadata,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n  AVPlaybackTolerance,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\n\n// @needsAudit\nexport type AudioChannel = {\n  /**\n   * All samples for this specific Audio Channel in PCM Buffer format (-1 to 1).\n   */\n  frames: number[];\n};\n\n// @needsAudit\n/**\n * Object passed to the `onAudioSampleReceived` function. Represents a single sample from an audio source.\n * The sample contains all frames (PCM Buffer values) for each channel of the audio, so if the audio is _stereo_ (interleaved),\n * there will be two channels, one for left and one for right audio.\n */\nexport type AudioSample = {\n  /**\n   * An array representing the data from each channel in PCM Buffer format. Array elements are objects in the following format: `{ frames: number[] }`,\n   * where each frame is a number in PCM Buffer format (`-1` to `1` range).\n   */\n  channels: AudioChannel[];\n  /**\n   * A number representing the timestamp of the current sample in seconds, relative to the audio track's timeline.\n   * > **Known issue:** When using the `ExoPlayer` Android implementation, the timestamp is always `-1`.\n   */\n  timestamp: number;\n};\n\n// @needsAudit\nexport type SoundObject = {\n  /**\n   * The newly created and loaded `Sound` object.\n   */\n  sound: Sound;\n  /**\n   * The `PlaybackStatus` of the `Sound` object. See the [AV documentation](/versions/latest/sdk/av) for further information.\n   */\n  status: AVPlaybackStatus;\n};\n\ntype AudioInstance = number | HTMLMediaElement | null;\ntype AudioSampleCallback = ((sample: AudioSample) => void) | null;\n\ndeclare global {\n  interface Global {\n    __EXAV_setOnAudioSampleReceivedCallback:\n      | ((key: number, callback: AudioSampleCallback) => void)\n      | undefined;\n  }\n}\n\n// @needsAudit\n/**\n * This class represents a sound corresponding to an Asset or URL.\n * @return A newly constructed instance of `Audio.Sound`.\n *\n * @example\n * ```ts\n * const sound = new Audio.Sound();\n * try {\n *   await sound.loadAsync(require('./assets/sounds/hello.mp3'));\n *   await sound.playAsync();\n *   // Your sound is playing!\n *\n *   // Don't forget to unload the sound from memory\n *   // when you are done using the Sound object\n *   await sound.unloadAsync();\n * } catch (error) {\n *   // An error occurred!\n * }\n * ```\n *\n * > Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`.\n * > See the [AV documentation](/versions/latest/sdk/av) for further information.\n */\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: { remove: () => void }[] = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n  _onMetadataUpdate: ((metadata: AVMetadata) => void) | null = null;\n  _onAudioSampleReceived: AudioSampleCallback = null;\n\n  /** @deprecated Use `Sound.createAsync()` instead */\n  static create = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  /**\n   * Creates and loads a sound from source.\n   *\n   * ```ts\n   * const { sound } = await Audio.Sound.createAsync(\n   *   source,\n   *   initialStatus,\n   *   onPlaybackStatusUpdate,\n   *   downloadFirst\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const sound = new Audio.Sound();\n   * sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n   * await sound.loadAsync(source, initialStatus, downloadFirst);\n   * ```\n   *\n   * @param source The source of the sound. See the [AV documentation](/versions/latest/sdk/av/#playback-api) for details on the possible `source` values.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet` and the default\n   * initial playback status.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @param downloadFirst If set to true, the system will attempt to download the resource to the device before loading. This value defaults to `true`.\n   * Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { sound: soundObject, status } = await Audio.Sound.createAsync(\n   *     require('./assets/sounds/hello.mp3'),\n   *     { shouldPlay: true }\n   *   );\n   *   // Your sound is playing!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.\n   */\n  static createAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: AVPlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: AVPlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  private _updateAudioSampleReceivedCallback() {\n    if (globalThis.__EXAV_setOnAudioSampleReceivedCallback == null) {\n      if (Platform.OS === 'ios' || Platform.OS === 'android') {\n        console.warn(\n          'expo-av: Failed to set up Audio Sample Buffer callback. ' +\n            \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" +\n            'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.'\n        );\n        return;\n      } else {\n        throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n      }\n    }\n    if (this._key == null) {\n      throw new Error(\n        'Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!'\n      );\n    }\n    if (typeof this._key !== 'number') {\n      throw new Error(\n        `Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this\n          ._key}! (expected: number)`\n      );\n    }\n\n    globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: AVPlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalMetadataUpdateCallback = ({\n    key,\n    metadata,\n  }: {\n    key: AudioInstance;\n    metadata: AVMetadata;\n  }) => {\n    if (this._key === key) {\n      this._onMetadataUpdate?.(metadata);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        ),\n        this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback)\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach((e) => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: AVPlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  /**\n   * Sets a function to be called whenever the metadata of the sound object changes, if one is set.\n   * @param onMetadataUpdate A function taking a single object of type `AVMetadata` as a parameter.\n   * @platform ios\n   */\n  setOnMetadataUpdate(onMetadataUpdate: (metadata: AVMetadata) => void) {\n    this._onMetadataUpdate = onMetadataUpdate;\n  }\n\n  /**\n   * Sets a function to be called during playback, receiving the audio sample as parameter.\n   * @param callback A function taking the `AudioSampleCallback` as parameter.\n   */\n  setOnAudioSampleReceived(callback: AudioSampleCallback) {\n    this._onAudioSampleReceived = callback;\n    if (this._key != null) {\n      this._updateAudioSampleReceivedCallback();\n    }\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const { nativeSource, fullInitialStatus } =\n        await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<AVPlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, AVPlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<AVPlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"mappings":"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"}