{"version":3,"names":["_compareVersions","_interopRequireDefault","require","_CodedError","postedWarnings","deprecate","library","deprecatedAPI","options","arguments","length","undefined","currentVersion","versionToRemove","replacement","code","codeFromLibrary","key","concat","compareVersions","message","CodedError","prependLibrary","console","warn","replace","toUpperCase"],"sources":["../src/deprecate.ts"],"sourcesContent":["import compareVersions from 'compare-versions';\n\nimport { CodedError } from './errors/CodedError';\n\nconst postedWarnings: { [key: string]: boolean } = {};\n\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\nexport default function deprecate(\n  library: string,\n  deprecatedAPI: string,\n  options: {\n    replacement?: string;\n    currentVersion?: string;\n    versionToRemove?: string;\n  } = {}\n): void {\n  const { currentVersion, versionToRemove, replacement } = options;\n  const code = codeFromLibrary(library);\n  const key = `${code}:${deprecatedAPI}:${replacement}`;\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (\n    !currentVersion ||\n    !versionToRemove ||\n    compareVersions(currentVersion, versionToRemove) >= 0\n  ) {\n    let message = `\\`${deprecatedAPI}\\` has been removed`;\n    if (versionToRemove) {\n      message = `${message} as of version \"${versionToRemove}\"`;\n    }\n    if (replacement && replacement.length) {\n      message = `${message} please migrate to: \\`${replacement}\\``;\n    }\n\n    throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, message));\n  }\n\n  let message = `\\`${deprecatedAPI}\\` has been deprecated`;\n  if (replacement && replacement.length) {\n    message = `${message} in favor of \\`${replacement}\\``;\n  }\n  if (versionToRemove && versionToRemove.length) {\n    message = `${message} and will be removed in version \"${versionToRemove}\"`;\n  }\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library: string, message: string): string {\n  return `${library}: ${message}`;\n}\n\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\nfunction codeFromLibrary(library: string): string {\n  const code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,gBAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,WAAA,GAAAD,OAAA;AAEA,IAAME,cAAc,GAA+B,EAAE;AAKvC,SAAUC,SAASA,CAC/BC,OAAe,EACfC,aAAqB,EAKf;EAAA,IAJNC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAII,EAAE;EAEN,IAAQG,cAAc,GAAmCJ,OAAO,CAAxDI,cAAc;IAAEC,eAAe,GAAkBL,OAAO,CAAxCK,eAAe;IAAEC,WAAW,GAAKN,OAAO,CAAvBM,WAAW;EACpD,IAAMC,IAAI,GAAGC,eAAe,CAACV,OAAO,CAAC;EACrC,IAAMW,GAAG,MAAAC,MAAA,CAAMH,IAAI,OAAAG,MAAA,CAAIX,aAAa,OAAAW,MAAA,CAAIJ,WAAW,CAAE;EACrD,IAAI,CAACV,cAAc,CAACa,GAAG,CAAC,EAAE;IACxBb,cAAc,CAACa,GAAG,CAAC,GAAG,IAAI;;EAG5B,IACE,CAACL,cAAc,IACf,CAACC,eAAe,IAChB,IAAAM,2BAAe,EAACP,cAAc,EAAEC,eAAe,CAAC,IAAI,CAAC,EACrD;IACA,IAAIO,QAAO,OAAAF,MAAA,CAAQX,aAAa,uBAAqB;IACrD,IAAIM,eAAe,EAAE;MACnBO,QAAO,MAAAF,MAAA,CAAME,QAAO,uBAAAF,MAAA,CAAmBL,eAAe,OAAG;;IAE3D,IAAIC,WAAW,IAAIA,WAAW,CAACJ,MAAM,EAAE;MACrCU,QAAO,MAAAF,MAAA,CAAME,QAAO,2BAAAF,MAAA,CAAyBJ,WAAW,MAAI;;IAG9D,MAAM,IAAIO,sBAAU,uBAAuBC,cAAc,CAAChB,OAAO,EAAEc,QAAO,CAAC,CAAC;;EAG9E,IAAIA,OAAO,OAAAF,MAAA,CAAQX,aAAa,0BAAwB;EACxD,IAAIO,WAAW,IAAIA,WAAW,CAACJ,MAAM,EAAE;IACrCU,OAAO,MAAAF,MAAA,CAAME,OAAO,oBAAAF,MAAA,CAAkBJ,WAAW,MAAI;;EAEvD,IAAID,eAAe,IAAIA,eAAe,CAACH,MAAM,EAAE;IAC7CU,OAAO,MAAAF,MAAA,CAAME,OAAO,wCAAAF,MAAA,CAAoCL,eAAe,OAAG;;EAE5EU,OAAO,CAACC,IAAI,CAACF,cAAc,CAAChB,OAAO,EAAEc,OAAO,CAAC,CAAC;AAChD;AAEA,SAASE,cAAcA,CAAChB,OAAe,EAAEc,OAAe;EACtD,UAAAF,MAAA,CAAUZ,OAAO,QAAAY,MAAA,CAAKE,OAAO;AAC/B;AAOA,SAASJ,eAAeA,CAACV,OAAe;EACtC,IAAMS,IAAI,GAAGT,OAAO,CAACmB,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAACC,WAAW,EAAE;EACxD,OAAOX,IAAI;AACb"}