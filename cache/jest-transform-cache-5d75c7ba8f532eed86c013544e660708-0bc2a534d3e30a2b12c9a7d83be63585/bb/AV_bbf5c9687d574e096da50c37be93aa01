1000b0e26c1992684045cd16be8ce0df
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS: true,
  _DEFAULT_INITIAL_PLAYBACK_STATUS: true,
  getNativeSourceFromSource: true,
  assertStatusValuesInBounds: true,
  getNativeSourceAndFullInitialStatusForLoadAsync: true,
  getUnloadedStatus: true,
  PlaybackMixin: true
};
exports._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = exports._DEFAULT_INITIAL_PLAYBACK_STATUS = exports.PlaybackMixin = void 0;
exports.assertStatusValuesInBounds = assertStatusValuesInBounds;
exports.getNativeSourceAndFullInitialStatusForLoadAsync = getNativeSourceAndFullInitialStatusForLoadAsync;
exports.getNativeSourceFromSource = getNativeSourceFromSource;
exports.getUnloadedStatus = getUnloadedStatus;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _expoAsset = require("expo-asset");
var _expoModulesCore = require("expo-modules-core");
var _AV = require("./AV.types");
Object.keys(_AV).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _AV[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _AV[key];
    }
  });
});
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = 500;
exports._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;
var _DEFAULT_INITIAL_PLAYBACK_STATUS = {
  positionMillis: 0,
  progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,
  shouldPlay: false,
  rate: 1.0,
  shouldCorrectPitch: false,
  volume: 1.0,
  audioPan: 0,
  isMuted: false,
  isLooping: false
};
exports._DEFAULT_INITIAL_PLAYBACK_STATUS = _DEFAULT_INITIAL_PLAYBACK_STATUS;
function getNativeSourceFromSource(source) {
  var uri = null;
  var overridingExtension = null;
  var headers;
  if (typeof source === 'string' && _expoModulesCore.Platform.OS === 'web') {
    return {
      uri: source,
      overridingExtension: overridingExtension,
      headers: headers
    };
  }
  var asset = _getAssetFromPlaybackSource(source);
  if (asset != null) {
    uri = asset.localUri || asset.uri;
  } else if (source != null && typeof source !== 'number' && 'uri' in source && typeof source.uri === 'string') {
    uri = source.uri;
  }
  if (uri == null) {
    return null;
  }
  if (source != null && typeof source !== 'number' && 'overrideFileExtensionAndroid' in source && typeof source.overrideFileExtensionAndroid === 'string') {
    overridingExtension = source.overrideFileExtensionAndroid;
  }
  if (source != null && typeof source !== 'number' && 'headers' in source && typeof source.headers === 'object') {
    headers = source.headers;
  }
  return {
    uri: uri,
    overridingExtension: overridingExtension,
    headers: headers
  };
}
function _getAssetFromPlaybackSource(source) {
  if (source == null) {
    return null;
  }
  var asset = null;
  if (typeof source === 'number') {
    asset = _expoAsset.Asset.fromModule(source);
  } else if (source instanceof _expoAsset.Asset) {
    asset = source;
  }
  return asset;
}
function assertStatusValuesInBounds(status) {
  if (typeof status.rate === 'number' && (status.rate < 0 || status.rate > 32)) {
    throw new RangeError('Rate value must be between 0.0 and 32.0');
  }
  if (typeof status.volume === 'number' && (status.volume < 0 || status.volume > 1)) {
    throw new RangeError('Volume value must be between 0.0 and 1.0');
  }
  if (typeof status.audioPan === 'number' && (status.audioPan < -1 || status.audioPan > 1)) {
    throw new RangeError('Pan value must be between -1.0 and 1.0');
  }
}
function getNativeSourceAndFullInitialStatusForLoadAsync(_x, _x2, _x3) {
  return _getNativeSourceAndFullInitialStatusForLoadAsync.apply(this, arguments);
}
function _getNativeSourceAndFullInitialStatusForLoadAsync() {
  _getNativeSourceAndFullInitialStatusForLoadAsync = (0, _asyncToGenerator2.default)(function* (source, initialStatus, downloadFirst) {
    var fullInitialStatus = initialStatus == null ? _DEFAULT_INITIAL_PLAYBACK_STATUS : _objectSpread(_objectSpread({}, _DEFAULT_INITIAL_PLAYBACK_STATUS), initialStatus);
    assertStatusValuesInBounds(fullInitialStatus);
    if (typeof source === 'string' && _expoModulesCore.Platform.OS === 'web') {
      return {
        nativeSource: {
          uri: source,
          overridingExtension: null
        },
        fullInitialStatus: fullInitialStatus
      };
    }
    var asset = _getAssetFromPlaybackSource(source);
    if (downloadFirst && asset) {
      yield asset.downloadAsync();
    }
    var nativeSource = getNativeSourceFromSource(source);
    if (nativeSource === null) {
      throw new Error(`Cannot load an AV asset from a null playback source`);
    }
    if (asset && asset.localUri) {
      nativeSource.uri = asset.localUri;
    }
    return {
      nativeSource: nativeSource,
      fullInitialStatus: fullInitialStatus
    };
  });
  return _getNativeSourceAndFullInitialStatusForLoadAsync.apply(this, arguments);
}
function getUnloadedStatus() {
  var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  return _objectSpread({
    isLoaded: false
  }, error ? {
    error: error
  } : null);
}
var PlaybackMixin = {
  playAsync: function () {
    var _playAsync = (0, _asyncToGenerator2.default)(function* () {
      return this.setStatusAsync({
        shouldPlay: true
      });
    });
    function playAsync() {
      return _playAsync.apply(this, arguments);
    }
    return playAsync;
  }(),
  playFromPositionAsync: function () {
    var _playFromPositionAsync = (0, _asyncToGenerator2.default)(function* (positionMillis) {
      var tolerances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.setStatusAsync({
        positionMillis: positionMillis,
        shouldPlay: true,
        seekMillisToleranceAfter: tolerances.toleranceMillisAfter,
        seekMillisToleranceBefore: tolerances.toleranceMillisBefore
      });
    });
    function playFromPositionAsync(_x4) {
      return _playFromPositionAsync.apply(this, arguments);
    }
    return playFromPositionAsync;
  }(),
  pauseAsync: function () {
    var _pauseAsync = (0, _asyncToGenerator2.default)(function* () {
      return this.setStatusAsync({
        shouldPlay: false
      });
    });
    function pauseAsync() {
      return _pauseAsync.apply(this, arguments);
    }
    return pauseAsync;
  }(),
  stopAsync: function () {
    var _stopAsync = (0, _asyncToGenerator2.default)(function* () {
      return this.setStatusAsync({
        positionMillis: 0,
        shouldPlay: false
      });
    });
    function stopAsync() {
      return _stopAsync.apply(this, arguments);
    }
    return stopAsync;
  }(),
  setPositionAsync: function () {
    var _setPositionAsync = (0, _asyncToGenerator2.default)(function* (positionMillis) {
      var tolerances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.setStatusAsync({
        positionMillis: positionMillis,
        seekMillisToleranceAfter: tolerances.toleranceMillisAfter,
        seekMillisToleranceBefore: tolerances.toleranceMillisBefore
      });
    });
    function setPositionAsync(_x5) {
      return _setPositionAsync.apply(this, arguments);
    }
    return setPositionAsync;
  }(),
  setRateAsync: function () {
    var _setRateAsync = (0, _asyncToGenerator2.default)(function* (rate) {
      var shouldCorrectPitch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var pitchCorrectionQuality = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _AV.PitchCorrectionQuality.Low;
      return this.setStatusAsync({
        rate: rate,
        shouldCorrectPitch: shouldCorrectPitch,
        pitchCorrectionQuality: pitchCorrectionQuality
      });
    });
    function setRateAsync(_x6) {
      return _setRateAsync.apply(this, arguments);
    }
    return setRateAsync;
  }(),
  setVolumeAsync: function () {
    var _setVolumeAsync = (0, _asyncToGenerator2.default)(function* (volume, audioPan) {
      return this.setStatusAsync({
        volume: volume,
        audioPan: audioPan
      });
    });
    function setVolumeAsync(_x7, _x8) {
      return _setVolumeAsync.apply(this, arguments);
    }
    return setVolumeAsync;
  }(),
  setIsMutedAsync: function () {
    var _setIsMutedAsync = (0, _asyncToGenerator2.default)(function* (isMuted) {
      return this.setStatusAsync({
        isMuted: isMuted
      });
    });
    function setIsMutedAsync(_x9) {
      return _setIsMutedAsync.apply(this, arguments);
    }
    return setIsMutedAsync;
  }(),
  setIsLoopingAsync: function () {
    var _setIsLoopingAsync = (0, _asyncToGenerator2.default)(function* (isLooping) {
      return this.setStatusAsync({
        isLooping: isLooping
      });
    });
    function setIsLoopingAsync(_x10) {
      return _setIsLoopingAsync.apply(this, arguments);
    }
    return setIsLoopingAsync;
  }(),
  setProgressUpdateIntervalAsync: function () {
    var _setProgressUpdateIntervalAsync = (0, _asyncToGenerator2.default)(function* (progressUpdateIntervalMillis) {
      return this.setStatusAsync({
        progressUpdateIntervalMillis: progressUpdateIntervalMillis
      });
    });
    function setProgressUpdateIntervalAsync(_x11) {
      return _setProgressUpdateIntervalAsync.apply(this, arguments);
    }
    return setProgressUpdateIntervalAsync;
  }()
};
exports.PlaybackMixin = PlaybackMixin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,