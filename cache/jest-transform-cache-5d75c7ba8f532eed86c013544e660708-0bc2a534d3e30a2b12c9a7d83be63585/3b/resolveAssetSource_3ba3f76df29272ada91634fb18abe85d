eddf2a47098059f8ade7f37586a6492a
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
exports.default = void 0;
var _resolveAssetSource = _interopRequireWildcard(require("react-native/Libraries/Image/resolveAssetSource"));
Object.keys(_resolveAssetSource).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _resolveAssetSource[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _resolveAssetSource[key];
    }
  });
});
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var _default = _resolveAssetSource.default;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVzb2x2ZUFzc2V0U291cmNlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfZXhwb3J0TmFtZXMiLCJleHBvcnRzIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlc2MiLCJzZXQiLCJfZGVmYXVsdCIsInJlc29sdmVBc3NldFNvdXJjZSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXNvbHZlQXNzZXRTb3VyY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlc29sdmVBc3NldFNvdXJjZSBmcm9tICdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0ltYWdlL3Jlc29sdmVBc3NldFNvdXJjZSc7XG5leHBvcnQgZGVmYXVsdCByZXNvbHZlQXNzZXRTb3VyY2U7XG5leHBvcnQgKiBmcm9tICdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0ltYWdlL3Jlc29sdmVBc3NldFNvdXJjZSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgaW1wb3J0L2V4cG9ydFxuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUFBLG1CQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFFQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLG1CQUFBLEVBQUFLLE9BQUEsV0FBQUMsR0FBQTtFQUFBLElBQUFBLEdBQUEsa0JBQUFBLEdBQUE7RUFBQSxJQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFDLFlBQUEsRUFBQUosR0FBQTtFQUFBLElBQUFBLEdBQUEsSUFBQUssT0FBQSxJQUFBQSxPQUFBLENBQUFMLEdBQUEsTUFBQU4sbUJBQUEsQ0FBQU0sR0FBQTtFQUFBSCxNQUFBLENBQUFTLGNBQUEsQ0FBQUQsT0FBQSxFQUFBTCxHQUFBO0lBQUFPLFVBQUE7SUFBQUMsR0FBQSxXQUFBQSxJQUFBO01BQUEsT0FBQWQsbUJBQUEsQ0FBQU0sR0FBQTtJQUFBO0VBQUE7QUFBQTtBQUFnRSxTQUFBUyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQWYsd0JBQUFtQixHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFULEdBQUEsQ0FBQU0sR0FBQSxTQUFBSyxNQUFBLFdBQUFDLHFCQUFBLEdBQUF2QixNQUFBLENBQUFTLGNBQUEsSUFBQVQsTUFBQSxDQUFBd0Isd0JBQUEsV0FBQXJCLEdBQUEsSUFBQWMsR0FBQSxRQUFBZCxHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFXLEdBQUEsRUFBQWQsR0FBQSxTQUFBc0IsSUFBQSxHQUFBRixxQkFBQSxHQUFBdkIsTUFBQSxDQUFBd0Isd0JBQUEsQ0FBQVAsR0FBQSxFQUFBZCxHQUFBLGNBQUFzQixJQUFBLEtBQUFBLElBQUEsQ0FBQWQsR0FBQSxJQUFBYyxJQUFBLENBQUFDLEdBQUEsS0FBQTFCLE1BQUEsQ0FBQVMsY0FBQSxDQUFBYSxNQUFBLEVBQUFuQixHQUFBLEVBQUFzQixJQUFBLFlBQUFILE1BQUEsQ0FBQW5CLEdBQUEsSUFBQWMsR0FBQSxDQUFBZCxHQUFBLFNBQUFtQixNQUFBLENBQUFILE9BQUEsR0FBQUYsR0FBQSxNQUFBRyxLQUFBLElBQUFBLEtBQUEsQ0FBQU0sR0FBQSxDQUFBVCxHQUFBLEVBQUFLLE1BQUEsWUFBQUEsTUFBQTtBQUFBLElBQUFLLFFBQUEsR0FEakRDLDJCQUFrQjtBQUFBcEIsT0FBQSxDQUFBVyxPQUFBLEdBQUFRLFFBQUEifQ==