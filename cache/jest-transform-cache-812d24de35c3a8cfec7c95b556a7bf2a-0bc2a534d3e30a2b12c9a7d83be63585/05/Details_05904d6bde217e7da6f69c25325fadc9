4a11099eb91000a4d61a26fd63398be9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _expoAv = require("expo-av");
var _axios = _interopRequireDefault(require("axios"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var Details = function Details(_ref) {
  var route = _ref.route;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    wordDetails = _useState2[0],
    setWordDetails = _useState2[1];
  var word = route.params.word;
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    sound = _useState4[0],
    setSound = _useState4[1];
  (0, _react.useEffect)(function () {
    var getWordDetails = function () {
      var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
        var result;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return _axios["default"].get("https://api.dictionaryapi.dev/api/v2/entries/en/".concat(word));
            case 3:
              result = _context.sent;
              setWordDetails(result.data[0]);
              _context.next = 10;
              break;
            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              _reactNative.Alert.alert("No details found.");
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 7]]);
      }));
      return function getWordDetails() {
        return _ref2.apply(this, arguments);
      };
    }();
    getWordDetails();
  }, [word]);
  var playAudio = function () {
    var _ref3 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(audioUrl) {
      var _yield$Audio$Sound$cr, newSound;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!sound) {
              _context2.next = 3;
              break;
            }
            _context2.next = 3;
            return sound.unloadAsync();
          case 3:
            _context2.next = 5;
            return _expoAv.Audio.Sound.createAsync({
              uri: audioUrl
            });
          case 5:
            _yield$Audio$Sound$cr = _context2.sent;
            newSound = _yield$Audio$Sound$cr.sound;
            setSound(newSound);
            _context2.next = 10;
            return newSound.playAsync();
          case 10:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function playAudio(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  return _react["default"].createElement(_reactNative.View, {
    style: styles.container
  }, wordDetails && _react["default"].createElement(_reactNative.ScrollView, null, _react["default"].createElement(_reactNative.Text, {
    style: styles.wordHeading
  }, wordDetails.word), wordDetails.phonetics.map(function (phonetic, index) {
    return _react["default"].createElement(_reactNative.View, {
      key: index,
      style: styles.phonetics
    }, _react["default"].createElement(_reactNative.Text, {
      style: styles.phoneticText
    }, phonetic.text), phonetic.audio && _react["default"].createElement(_reactNative.TouchableOpacity, {
      onPress: function onPress() {
        return playAudio(phonetic.audio);
      },
      style: styles.playButton
    }, _react["default"].createElement(_reactNative.Text, {
      style: styles.playButtonText
    }, "Play Audio")));
  }), wordDetails.meanings.map(function (meaning, index) {
    return _react["default"].createElement(_reactNative.View, {
      key: index,
      style: styles.meanings
    }, _react["default"].createElement(_reactNative.Text, {
      style: styles.partOfSpeech
    }, meaning.partOfSpeech), meaning.definitions.map(function (definition, index) {
      return _react["default"].createElement(_reactNative.View, {
        key: index,
        style: styles.defineWExample
      }, _react["default"].createElement(_reactNative.Text, {
        style: styles.definitionParagraph
      }, definition.definition), definition.example && _react["default"].createElement(_reactNative.Text, {
        style: styles.example
      }, _react["default"].createElement(_reactNative.Text, {
        style: styles.emText
      }, "Example:"), " ", definition.example), definition.synonyms.length > 0 && _react["default"].createElement(_reactNative.Text, {
        style: styles.synonyms
      }, _react["default"].createElement(_reactNative.Text, {
        style: styles.emText
      }, "Synonyms:"), " ", definition.synonyms.join(", ")));
    }));
  })));
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: "white"
  },
  wordHeading: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 10
  },
  phonetics: {
    marginBottom: 10
  },
  phoneticText: {
    fontSize: 18
  },
  meanings: {
    marginTop: 10
  },
  partOfSpeech: {
    fontSize: 20,
    fontWeight: "bold"
  },
  defineWExample: {
    marginTop: 5
  },
  definitionParagraph: {
    fontSize: 16
  },
  example: {
    fontStyle: "italic"
  },
  synonyms: {
    fontStyle: "italic",
    color: "#555"
  },
  emText: {
    fontStyle: "italic",
    fontWeight: "bold"
  },
  playButton: {
    backgroundColor: "#3498db",
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 4,
    alignSelf: "flex-start",
    marginTop: 5
  },
  playButtonText: {
    color: "white",
    fontWeight: "bold"
  }
});
var _default = Details;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,