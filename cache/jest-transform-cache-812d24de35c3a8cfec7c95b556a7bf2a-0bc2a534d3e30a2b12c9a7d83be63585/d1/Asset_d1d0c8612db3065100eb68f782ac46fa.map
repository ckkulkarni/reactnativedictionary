{"version":3,"names":["_expoModulesCore","require","_AssetRegistry","_AssetSources","AssetUris","_interopRequireWildcard","ImageAssets","_LocalAssets","_PlatformUtils","_resolveAssetSource2","_interopRequireDefault","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Asset","_ref","name","type","_ref$hash","hash","uri","width","height","_classCallCheck2","_defineProperty2","localUri","getLocalAssetUri","downloaded","Platform","OS","getFilename","getFileExtension","_createClass2","value","_downloadAsync2","_asyncToGenerator2","_regenerator","mark","_callee","_this","_yield$ImageAssets$ge","wrap","_callee$","_context","prev","next","abrupt","downloading","Promise","resolve","reject","_downloadCallbacks","push","isImageType","getImageInfoAsync","sent","downloadAsync","forEach","_ref2","t0","_ref3","finish","stop","apply","arguments","loadAsync","moduleId","moduleIds","Array","isArray","all","map","fromModule","virtualAssetModule","fromURI","meta","getAssetByID","Error","concat","IS_ENV_WITH_UPDATES_ENABLED","_resolveAssetSource","resolveAssetSource","asset","includes","byHash","fromMetadata","metaHash","_selectAssetSource","selectAssetSource","byUri","indexOf","split","extension","startsWith","substring","exports"],"sources":["../src/Asset.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { getAssetByID } from 'react-native/Libraries/Image/AssetRegistry';\n\nimport { AssetMetadata, selectAssetSource } from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport * as ImageAssets from './ImageAssets';\nimport { getLocalAssetUri } from './LocalAssets';\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\n// @docsMissing\nexport type AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport { AssetMetadata };\n\n// @needsAudit\n/**\n * The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its\n * name and type) and provides facilities to load the asset data.\n */\nexport class Asset {\n  /**\n   * @private\n   */\n  static byHash = {};\n  /**\n   * @private\n   */\n  static byUri = {};\n\n  /**\n   * The name of the asset file without the extension. Also without the part from `@` onward in the\n   * filename (used to specify scale factor for images).\n   */\n  name: string;\n  /**\n   * The extension of the asset filename.\n   */\n  type: string;\n  /**\n   * The MD5 hash of the asset's data.\n   */\n  hash: string | null = null;\n  /**\n   * A URI that points to the asset's data on the remote server. When running the published version\n   * of your app, this refers to the location on Expo's asset server where Expo has stored your\n   * asset. When running the app from Expo CLI during development, this URI points to Expo CLI's\n   * server running on your computer and the asset is served directly from your computer. If you\n   * are not using Classic Updates (legacy), this field should be ignored as we ensure your assets\n   * are on device before before running your application logic.\n   */\n  uri: string;\n  /**\n   * If the asset has been downloaded (by calling [`downloadAsync()`](#downloadasync)), the\n   * `file://` URI pointing to the local file on the device that contains the asset data.\n   */\n  localUri: string | null = null;\n  /**\n   * If the asset is an image, the width of the image data divided by the scale factor. The scale\n   * factor is the number after `@` in the filename, or `1` if not present.\n   */\n  width: number | null = null;\n  /**\n   * If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.\n   */\n  height: number | null = null;\n  // @docsMissing\n  downloading: boolean = false;\n  // @docsMissing\n  downloaded: boolean = false;\n\n  /**\n   * @private\n   */\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getLocalAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  // @needsAudit\n  /**\n   * A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.\n   * @param moduleId An array of `require('path/to/file')` or external network URLs. Can also be\n   * just one module or URL without an Array.\n   * @return Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been\n   * saved to disk.\n   * @example\n   * ```ts\n   * const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));\n   * ```\n   */\n  static loadAsync(moduleId: number | number[] | string | string[]): Promise<Asset[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map((moduleId) => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  // @needsAudit\n  /**\n   * Returns the [`Asset`](#asset) instance representing an asset given its module or URL.\n   * @param virtualAssetModule The value of `require('path/to/file')` for the asset or external\n   * network URL\n   * @return The [`Asset`](#asset) instance for the asset.\n   */\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_UPDATES_ENABLED) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  // @docsMissing\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n\n    const { uri, hash } = selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  // @docsMissing\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  // @needsAudit\n  /**\n   * Downloads the asset data to a local file in the device's cache directory. Once the returned\n   * promise is fulfilled without error, the [`localUri`](#assetlocaluri) field of this asset points\n   * to a local file containing the asset data. The asset is only downloaded if an up-to-date local\n   * file for the asset isn't already present due to an earlier download. The downloaded `Asset`\n   * will be returned when the promise is resolved.\n   * @return Returns a Promise which fulfills with an `Asset` instance.\n   */\n  async downloadAsync(): Promise<this> {\n    if (this.downloaded) {\n      return this;\n    }\n    if (this.downloading) {\n      await new Promise<void>((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return this;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n    return this;\n  }\n}\n"],"mappings":"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"}