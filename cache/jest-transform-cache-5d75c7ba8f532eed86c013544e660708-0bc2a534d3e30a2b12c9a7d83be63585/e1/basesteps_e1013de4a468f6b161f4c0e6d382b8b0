2e41b364cf87ec645922708dbc5e5dbf
_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Base = _interopRequireDefault(require("../../Base"));
var _native = require("@react-navigation/native");
var _reactNative = require("@testing-library/react-native");
var _jestCucumber = require("jest-cucumber");
require("react-native-get-random-values");
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
var feature = (0, _jestCucumber.loadFeature)("Apps/features/base.feature");
(0, _jestCucumber.defineFeature)(feature, function (test) {
  test("The component renders and a random word is fetched", function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    given("The user is on the Home page", function () {
      expect(screen).toBeDefined();
    });
    when("The user inputs a word and submits it", (0, _asyncToGenerator2.default)(function* () {
      var input = screen.getByTestId("word-input");
      var submitButton = screen.getByTestId("submit-button");
      _reactNative.fireEvent.changeText(input, "example");
      _reactNative.fireEvent.press(submitButton);
      var mockAxios = jest.spyOn(_axios.default, "get");
      mockAxios.mockResolvedValueOnce({
        data: [{
          meanings: [{
            definitions: [{
              definition: "a thing characteristic of its kind"
            }]
          }]
        }]
      });
    }));
    then("the definition of the word is fetched and displayed", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        expect(screen.getByText("a thing characteristic of its kind")).toBeDefined();
      });
    }));
    and("clicking on the definition takes the user to the Details page for that word", (0, _asyncToGenerator2.default)(function* () {
      var definitionBlock = screen.getByTestId("definition-block");
      _reactNative.fireEvent.press(definitionBlock);
      expect(navigation.navigate).toBeCalled();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9CYXNlIiwiX25hdGl2ZSIsIl9yZWFjdE5hdGl2ZSIsIl9qZXN0Q3VjdW1iZXIiLCJfYXhpb3MiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwibmF2aWdhdGlvbiIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiX3JlZiIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJhbmQiLCJzY3JlZW4iLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJpbnB1dCIsImdldEJ5VGVzdElkIiwic3VibWl0QnV0dG9uIiwiZmlyZUV2ZW50IiwiY2hhbmdlVGV4dCIsInByZXNzIiwibW9ja0F4aW9zIiwic3B5T24iLCJheGlvcyIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsImRhdGEiLCJtZWFuaW5ncyIsImRlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsIndhaXRGb3IiLCJnZXRCeVRleHQiLCJkZWZpbml0aW9uQmxvY2siLCJ0b0JlQ2FsbGVkIl0sInNvdXJjZXMiOlsiYmFzZS5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2UgZnJvbSBcIi4uLy4uL0Jhc2VcIjtcclxuaW1wb3J0IHsgdXNlTmF2aWdhdGlvbiB9IGZyb20gXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmVcIjtcclxuaW1wb3J0IHsgTmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcCB9IGZyb20gXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2tcIjtcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcclxuaW1wb3J0IHsgbG9hZEZlYXR1cmUsIGRlZmluZUZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgXCJyZWFjdC1uYXRpdmUtZ2V0LXJhbmRvbS12YWx1ZXNcIjtcclxuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5jb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcbmplc3QubW9jayhcIkByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZVwiLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcblxyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJBcHBzL2ZlYXR1cmVzL2Jhc2UuZmVhdHVyZVwiKTtcclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIHRlc3QoXCJUaGUgY29tcG9uZW50IHJlbmRlcnMgYW5kIGEgcmFuZG9tIHdvcmQgaXMgZmV0Y2hlZFwiLCAoe1xyXG4gICAgZ2l2ZW4sXHJcbiAgICB3aGVuLFxyXG4gICAgdGhlbixcclxuICAgIGFuZCxcclxuICB9KSA9PiB7XHJcbiAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoPEJhc2UgLz4pO1xyXG4gICAgZ2l2ZW4oXCJUaGUgdXNlciBpcyBvbiB0aGUgSG9tZSBwYWdlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG4gICAgd2hlbihcIlRoZSB1c2VyIGlucHV0cyBhIHdvcmQgYW5kIHN1Ym1pdHMgaXRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBpbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZChcIndvcmQtaW5wdXRcIik7XHJcbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZChcInN1Ym1pdC1idXR0b25cIik7XHJcblxyXG4gICAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChpbnB1dCwgXCJleGFtcGxlXCIpO1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3Moc3VibWl0QnV0dG9uKTtcclxuXHJcbiAgICAgIGNvbnN0IG1vY2tBeGlvcyA9IGplc3Quc3B5T24oYXhpb3MsIFwiZ2V0XCIpO1xyXG4gICAgICBtb2NrQXhpb3MubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgICAgICBkYXRhOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIG1lYW5pbmdzOiBbXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgeyBkZWZpbml0aW9uOiBcImEgdGhpbmcgY2hhcmFjdGVyaXN0aWMgb2YgaXRzIGtpbmRcIiB9LFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAvLyAgIGV4cGVjdChcclxuICAgICAgLy8gICAgIHNjcmVlbi5nZXRCeVRleHQoXCJhIHRoaW5nIGNoYXJhY3RlcmlzdGljIG9mIGl0cyBraW5kXCIpXHJcbiAgICAgIC8vICAgKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICAvLyB9KTtcclxuICAgIH0pO1xyXG4gICAgdGhlbihcInRoZSBkZWZpbml0aW9uIG9mIHRoZSB3b3JkIGlzIGZldGNoZWQgYW5kIGRpc3BsYXllZFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChcclxuICAgICAgICAgIHNjcmVlbi5nZXRCeVRleHQoXCJhIHRoaW5nIGNoYXJhY3RlcmlzdGljIG9mIGl0cyBraW5kXCIpXHJcbiAgICAgICAgKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgYW5kKFxyXG4gICAgICBcImNsaWNraW5nIG9uIHRoZSBkZWZpbml0aW9uIHRha2VzIHRoZSB1c2VyIHRvIHRoZSBEZXRhaWxzIHBhZ2UgZm9yIHRoYXQgd29yZFwiLFxyXG4gICAgICBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbkJsb2NrID0gc2NyZWVuLmdldEJ5VGVzdElkKFwiZGVmaW5pdGlvbi1ibG9ja1wiKTtcclxuICAgICAgICBmaXJlRXZlbnQucHJlc3MoZGVmaW5pdGlvbkJsb2NrKTtcclxuICAgICAgICBleHBlY3QobmF2aWdhdGlvbi5uYXZpZ2F0ZSkudG9CZUNhbGxlZCgpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFTQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDcEIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQyxJQUFBRyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWZILElBQUFFLEtBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLE9BQUEsR0FBQUgsT0FBQTtBQUVBLElBQUFJLFlBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLGFBQUEsR0FBQUwsT0FBQTtBQUNB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