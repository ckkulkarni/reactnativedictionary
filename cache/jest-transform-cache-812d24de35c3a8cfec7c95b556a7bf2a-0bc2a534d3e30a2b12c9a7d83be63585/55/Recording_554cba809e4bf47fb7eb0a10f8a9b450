e312799656c9fd1b510dcaa6fec5f21f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  getPermissionsAsync: true,
  requestPermissionsAsync: true,
  usePermissions: true,
  Recording: true,
  PermissionStatus: true
};
Object.defineProperty(exports, "PermissionStatus", {
  enumerable: true,
  get: function get() {
    return _expoModulesCore.PermissionStatus;
  }
});
exports.Recording = void 0;
exports.getPermissionsAsync = getPermissionsAsync;
exports.requestPermissionsAsync = requestPermissionsAsync;
exports.usePermissions = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _expoModulesCore = require("expo-modules-core");
var _AV = require("../AV");
var _ExponentAV = _interopRequireDefault(require("../ExponentAV"));
var _AudioAvailability = require("./AudioAvailability");
var _RecordingConstants = require("./RecordingConstants");
Object.keys(_RecordingConstants).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _RecordingConstants[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _RecordingConstants[key];
    }
  });
});
var _Sound = require("./Sound");
var _Recording = require("./Recording.types");
Object.keys(_Recording).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Recording[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Recording[key];
    }
  });
});
var _class;
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _recorderExists = false;
var eventEmitter = _expoModulesCore.Platform.OS === 'android' ? new _expoModulesCore.EventEmitter(_ExponentAV["default"]) : null;
function getPermissionsAsync() {
  return _getPermissionsAsync.apply(this, arguments);
}
function _getPermissionsAsync() {
  _getPermissionsAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee14() {
    return _regenerator["default"].wrap(function _callee14$(_context14) {
      while (1) switch (_context14.prev = _context14.next) {
        case 0:
          return _context14.abrupt("return", _ExponentAV["default"].getPermissionsAsync());
        case 1:
        case "end":
          return _context14.stop();
      }
    }, _callee14);
  }));
  return _getPermissionsAsync.apply(this, arguments);
}
function requestPermissionsAsync() {
  return _requestPermissionsAsync.apply(this, arguments);
}
function _requestPermissionsAsync() {
  _requestPermissionsAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee15() {
    return _regenerator["default"].wrap(function _callee15$(_context15) {
      while (1) switch (_context15.prev = _context15.next) {
        case 0:
          return _context15.abrupt("return", _ExponentAV["default"].requestPermissionsAsync());
        case 1:
        case "end":
          return _context15.stop();
      }
    }, _callee15);
  }));
  return _requestPermissionsAsync.apply(this, arguments);
}
var usePermissions = (0, _expoModulesCore.createPermissionHook)({
  getMethod: getPermissionsAsync,
  requestMethod: requestPermissionsAsync
});
exports.usePermissions = usePermissions;
var Recording = function () {
  function Recording() {
    var _this = this;
    (0, _classCallCheck2["default"])(this, Recording);
    (0, _defineProperty2["default"])(this, "_subscription", null);
    (0, _defineProperty2["default"])(this, "_canRecord", false);
    (0, _defineProperty2["default"])(this, "_isDoneRecording", false);
    (0, _defineProperty2["default"])(this, "_finalDurationMillis", 0);
    (0, _defineProperty2["default"])(this, "_uri", null);
    (0, _defineProperty2["default"])(this, "_onRecordingStatusUpdate", null);
    (0, _defineProperty2["default"])(this, "_progressUpdateTimeoutVariable", null);
    (0, _defineProperty2["default"])(this, "_progressUpdateIntervalMillis", _AV._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS);
    (0, _defineProperty2["default"])(this, "_options", null);
    (0, _defineProperty2["default"])(this, "_cleanupForUnloadedRecorder", function () {
      var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(finalStatus) {
        var _finalStatus$duration;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _this._canRecord = false;
              _this._isDoneRecording = true;
              _this._finalDurationMillis = (_finalStatus$duration = finalStatus === null || finalStatus === void 0 ? void 0 : finalStatus.durationMillis) !== null && _finalStatus$duration !== void 0 ? _finalStatus$duration : 0;
              _recorderExists = false;
              if (_this._subscription) {
                _this._subscription.remove();
                _this._subscription = null;
              }
              _this._disablePolling();
              _context.next = 8;
              return _this.getStatusAsync();
            case 8:
              return _context.abrupt("return", _context.sent);
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _defineProperty2["default"])(this, "_pollingLoop", (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!((0, _AudioAvailability.isAudioEnabled)() && _this._canRecord && _this._onRecordingStatusUpdate != null)) {
              _context2.next = 10;
              break;
            }
            _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);
            _context2.prev = 2;
            _context2.next = 5;
            return _this.getStatusAsync();
          case 5:
            _context2.next = 10;
            break;
          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](2);
            _this._disablePolling();
          case 10:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[2, 7]]);
    })));
    (0, _defineProperty2["default"])(this, "getStatusAsync", (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {
      var status;
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (!_this._canRecord) {
              _context3.next = 2;
              break;
            }
            return _context3.abrupt("return", _this._performOperationAndHandleStatusAsync(function () {
              return _ExponentAV["default"].getAudioRecordingStatus();
            }));
          case 2:
            status = {
              canRecord: false,
              isRecording: false,
              isDoneRecording: _this._isDoneRecording,
              durationMillis: _this._finalDurationMillis
            };
            _this._callOnRecordingStatusUpdateForNewStatus(status);
            return _context3.abrupt("return", status);
          case 5:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    })));
  }
  (0, _createClass2["default"])(Recording, [{
    key: "_disablePolling",
    value: function _disablePolling() {
      if (this._progressUpdateTimeoutVariable != null) {
        clearTimeout(this._progressUpdateTimeoutVariable);
        this._progressUpdateTimeoutVariable = null;
      }
    }
  }, {
    key: "_enablePollingIfNecessaryAndPossible",
    value: function _enablePollingIfNecessaryAndPossible() {
      if ((0, _AudioAvailability.isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {
        this._disablePolling();
        this._pollingLoop();
      }
    }
  }, {
    key: "_callOnRecordingStatusUpdateForNewStatus",
    value: function _callOnRecordingStatusUpdateForNewStatus(status) {
      if (this._onRecordingStatusUpdate != null) {
        this._onRecordingStatusUpdate(status);
      }
    }
  }, {
    key: "_performOperationAndHandleStatusAsync",
    value: function () {
      var _performOperationAndHandleStatusAsync2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(operation) {
        var status;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              (0, _AudioAvailability.throwIfAudioIsDisabled)();
              if (!this._canRecord) {
                _context4.next = 9;
                break;
              }
              _context4.next = 4;
              return operation();
            case 4:
              status = _context4.sent;
              this._callOnRecordingStatusUpdateForNewStatus(status);
              return _context4.abrupt("return", status);
            case 9:
              throw new Error('Cannot complete operation because this recorder is not ready to record.');
            case 10:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function _performOperationAndHandleStatusAsync(_x2) {
        return _performOperationAndHandleStatusAsync2.apply(this, arguments);
      }
      return _performOperationAndHandleStatusAsync;
    }()
  }, {
    key: "setOnRecordingStatusUpdate",
    value: function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {
      this._onRecordingStatusUpdate = onRecordingStatusUpdate;
      if (onRecordingStatusUpdate == null) {
        this._disablePolling();
      } else {
        this._enablePollingIfNecessaryAndPossible();
      }
      this.getStatusAsync();
    }
  }, {
    key: "setProgressUpdateInterval",
    value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {
      this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;
      this.getStatusAsync();
    }
  }, {
    key: "prepareToRecordAsync",
    value: function () {
      var _prepareToRecordAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5() {
        var options,
          extensionRegex,
          _yield$ExponentAV$pre,
          uri,
          status,
          currentStatus,
          _args5 = arguments;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY;
              (0, _AudioAvailability.throwIfAudioIsDisabled)();
              if (!_recorderExists) {
                _context5.next = 4;
                break;
              }
              throw new Error('Only one Recording object can be prepared at a given time.');
            case 4:
              if (!this._isDoneRecording) {
                _context5.next = 6;
                break;
              }
              throw new Error('This Recording object is done recording; you must make a new one.');
            case 6:
              if (!(!options || !options.android || !options.ios)) {
                _context5.next = 8;
                break;
              }
              throw new Error('You must provide recording options for android and ios in order to prepare to record.');
            case 8:
              extensionRegex = /^\.\w+$/;
              if (!(!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension))) {
                _context5.next = 11;
                break;
              }
              throw new Error("Your file extensions must match ".concat(extensionRegex.toString(), "."));
            case 11:
              if (this._canRecord) {
                _context5.next = 28;
                break;
              }
              if (eventEmitter) {
                this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);
              }
              _context5.next = 15;
              return _ExponentAV["default"].prepareAudioRecorder(options);
            case 15:
              _yield$ExponentAV$pre = _context5.sent;
              uri = _yield$ExponentAV$pre.uri;
              status = _yield$ExponentAV$pre.status;
              _recorderExists = true;
              this._uri = uri;
              this._options = options;
              this._canRecord = true;
              currentStatus = _objectSpread(_objectSpread({}, status), {}, {
                canRecord: true
              });
              this._callOnRecordingStatusUpdateForNewStatus(currentStatus);
              this._enablePollingIfNecessaryAndPossible();
              return _context5.abrupt("return", currentStatus);
            case 28:
              throw new Error('This Recording object is already prepared to record.');
            case 29:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function prepareToRecordAsync() {
        return _prepareToRecordAsync.apply(this, arguments);
      }
      return prepareToRecordAsync;
    }()
  }, {
    key: "getAvailableInputs",
    value: function () {
      var _getAvailableInputs = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6() {
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", _ExponentAV["default"].getAvailableInputs());
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function getAvailableInputs() {
        return _getAvailableInputs.apply(this, arguments);
      }
      return getAvailableInputs;
    }()
  }, {
    key: "getCurrentInput",
    value: function () {
      var _getCurrentInput = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7() {
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", _ExponentAV["default"].getCurrentInput());
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function getCurrentInput() {
        return _getCurrentInput.apply(this, arguments);
      }
      return getCurrentInput;
    }()
  }, {
    key: "setInput",
    value: function () {
      var _setInput = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8(inputUid) {
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", _ExponentAV["default"].setInput(inputUid));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      function setInput(_x3) {
        return _setInput.apply(this, arguments);
      }
      return setInput;
    }()
  }, {
    key: "startAsync",
    value: function () {
      var _startAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9() {
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                return _ExponentAV["default"].startAudioRecording();
              }));
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function startAsync() {
        return _startAsync.apply(this, arguments);
      }
      return startAsync;
    }()
  }, {
    key: "pauseAsync",
    value: function () {
      var _pauseAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee10() {
        return _regenerator["default"].wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                return _ExponentAV["default"].pauseAudioRecording();
              }));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function pauseAsync() {
        return _pauseAsync.apply(this, arguments);
      }
      return pauseAsync;
    }()
  }, {
    key: "stopAndUnloadAsync",
    value: function () {
      var _stopAndUnloadAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee11() {
        var _stopResult;
        var stopResult, stopError, status;
        return _regenerator["default"].wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              if (this._canRecord) {
                _context11.next = 6;
                break;
              }
              if (!this._isDoneRecording) {
                _context11.next = 5;
                break;
              }
              throw new Error('Cannot unload a Recording that has already been unloaded.');
            case 5:
              throw new Error('Cannot unload a Recording that has not been prepared.');
            case 6:
              _context11.prev = 6;
              _context11.next = 9;
              return _ExponentAV["default"].stopAudioRecording();
            case 9:
              stopResult = _context11.sent;
              _context11.next = 15;
              break;
            case 12:
              _context11.prev = 12;
              _context11.t0 = _context11["catch"](6);
              stopError = _context11.t0;
            case 15:
              if (_expoModulesCore.Platform.OS === 'web' && ((_stopResult = stopResult) === null || _stopResult === void 0 ? void 0 : _stopResult.uri) !== undefined) {
                this._uri = stopResult.uri;
              }
              _context11.next = 18;
              return _ExponentAV["default"].unloadAudioRecorder();
            case 18:
              _context11.next = 20;
              return this._cleanupForUnloadedRecorder(stopResult);
            case 20:
              status = _context11.sent;
              return _context11.abrupt("return", stopError ? Promise.reject(stopError) : status);
            case 22:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this, [[6, 12]]);
      }));
      function stopAndUnloadAsync() {
        return _stopAndUnloadAsync.apply(this, arguments);
      }
      return stopAndUnloadAsync;
    }()
  }, {
    key: "getURI",
    value: function getURI() {
      return this._uri;
    }
  }, {
    key: "createNewLoadedSound",
    value: function () {
      var _createNewLoadedSound = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee12() {
        var initialStatus,
          onPlaybackStatusUpdate,
          _args12 = arguments;
        return _regenerator["default"].wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              initialStatus = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};
              onPlaybackStatusUpdate = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : null;
              console.warn("createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name");
              return _context12.abrupt("return", this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate));
            case 4:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function createNewLoadedSound() {
        return _createNewLoadedSound.apply(this, arguments);
      }
      return createNewLoadedSound;
    }()
  }, {
    key: "createNewLoadedSoundAsync",
    value: function () {
      var _createNewLoadedSoundAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee13() {
        var initialStatus,
          onPlaybackStatusUpdate,
          _args13 = arguments;
        return _regenerator["default"].wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              initialStatus = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};
              onPlaybackStatusUpdate = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : null;
              if (!(this._uri == null || !this._isDoneRecording)) {
                _context13.next = 4;
                break;
              }
              throw new Error('Cannot create sound when the Recording has not finished!');
            case 4:
              return _context13.abrupt("return", _Sound.Sound.createAsync({
                uri: this._uri
              }, initialStatus, onPlaybackStatusUpdate, false));
            case 5:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function createNewLoadedSoundAsync() {
        return _createNewLoadedSoundAsync.apply(this, arguments);
      }
      return createNewLoadedSoundAsync;
    }()
  }]);
  return Recording;
}();
exports.Recording = Recording;
_class = Recording;
(0, _defineProperty2["default"])(Recording, "createAsync", (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee16() {
  var options,
    onRecordingStatusUpdate,
    progressUpdateIntervalMillis,
    recording,
    status,
    _args16 = arguments;
  return _regenerator["default"].wrap(function _callee16$(_context16) {
    while (1) switch (_context16.prev = _context16.next) {
      case 0:
        options = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY;
        onRecordingStatusUpdate = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : null;
        progressUpdateIntervalMillis = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : null;
        recording = new _class();
        if (progressUpdateIntervalMillis) {
          recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;
        }
        recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);
        _context16.next = 8;
        return recording.prepareToRecordAsync(_objectSpread(_objectSpread({}, options), {}, {
          keepAudioActiveHint: true
        }));
      case 8:
        _context16.prev = 8;
        _context16.next = 11;
        return recording.startAsync();
      case 11:
        status = _context16.sent;
        return _context16.abrupt("return", {
          recording: recording,
          status: status
        });
      case 15:
        _context16.prev = 15;
        _context16.t0 = _context16["catch"](8);
        recording.stopAndUnloadAsync();
        throw _context16.t0;
      case 19:
      case "end":
        return _context16.stop();
    }
  }, _callee16, null, [[8, 15]]);
})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,