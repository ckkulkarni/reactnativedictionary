{"version":3,"names":["_expoModulesCore","require","_AV","_ExponentAV","_interopRequireDefault","_AudioAvailability","_class","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","Sound","_this","_classCallCheck2","_loaded","_loading","_key","_lastStatusUpdate","_lastStatusUpdateTime","_subscriptions","_eventEmitter","EventEmitter","ExponentAV","_coalesceStatusUpdatesInMillis","_onPlaybackStatusUpdate","_onMetadataUpdate","_onAudioSampleReceived","_internalStatusUpdateCallback","_ref","status","_callOnPlaybackStatusUpdateForNewStatus","_internalMetadataUpdateCallback","_ref2","metadata","_internalErrorCallback","_ref3","error","_errorCallback","_clearSubscriptions","getUnloadedStatus","getStatusAsync","_asyncToGenerator2","_performOperationAndHandleStatusAsync","getStatusForSound","_createClass2","value","shouldDismissBasedOnCoalescing","JSON","stringify","Date","now","getTime","_performOperationAndHandleStatusAsync2","operation","throwIfAudioIsDisabled","Error","_x","_updateAudioSampleReceivedCallback","globalThis","__EXAV_setOnAudioSampleReceivedCallback","Platform","OS","console","warn","UnavailabilityError","_subscribeToNativeEvents","addListener","e","remove","setOnPlaybackStatusUpdate","onPlaybackStatusUpdate","setOnMetadataUpdate","onMetadataUpdate","setOnAudioSampleReceived","callback","_loadAsync","_this2","initialStatus","undefined","downloadFirst","_yield$getNativeSourc","getNativeSourceAndFullInitialStatusForLoadAsync","nativeSource","fullInitialStatus","Promise","resolve","reject","loadSuccess","result","_result","_slicedToArray2","loadError","loadForSound","then","catch","loadAsync","_x2","_unloadAsync","unloadForSound","unloadAsync","_setStatusAsync","_this3","assertStatusValuesInBounds","setStatusForSound","setStatusAsync","_x3","_replayAsync","_this4","positionMillis","replaySound","shouldPlay","replayAsync","exports","create","_ref5","createAsync","_x4","_ref6","sound","_x5","assign","prototype","PlaybackMixin"],"sources":["../../src/Audio/Sound.ts"],"sourcesContent":["import { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVMetadata,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n  AVPlaybackTolerance,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\n\n// @needsAudit\nexport type AudioChannel = {\n  /**\n   * All samples for this specific Audio Channel in PCM Buffer format (-1 to 1).\n   */\n  frames: number[];\n};\n\n// @needsAudit\n/**\n * Object passed to the `onAudioSampleReceived` function. Represents a single sample from an audio source.\n * The sample contains all frames (PCM Buffer values) for each channel of the audio, so if the audio is _stereo_ (interleaved),\n * there will be two channels, one for left and one for right audio.\n */\nexport type AudioSample = {\n  /**\n   * An array representing the data from each channel in PCM Buffer format. Array elements are objects in the following format: `{ frames: number[] }`,\n   * where each frame is a number in PCM Buffer format (`-1` to `1` range).\n   */\n  channels: AudioChannel[];\n  /**\n   * A number representing the timestamp of the current sample in seconds, relative to the audio track's timeline.\n   * > **Known issue:** When using the `ExoPlayer` Android implementation, the timestamp is always `-1`.\n   */\n  timestamp: number;\n};\n\n// @needsAudit\nexport type SoundObject = {\n  /**\n   * The newly created and loaded `Sound` object.\n   */\n  sound: Sound;\n  /**\n   * The `PlaybackStatus` of the `Sound` object. See the [AV documentation](/versions/latest/sdk/av) for further information.\n   */\n  status: AVPlaybackStatus;\n};\n\ntype AudioInstance = number | HTMLMediaElement | null;\ntype AudioSampleCallback = ((sample: AudioSample) => void) | null;\n\ndeclare global {\n  interface Global {\n    __EXAV_setOnAudioSampleReceivedCallback:\n      | ((key: number, callback: AudioSampleCallback) => void)\n      | undefined;\n  }\n}\n\n// @needsAudit\n/**\n * This class represents a sound corresponding to an Asset or URL.\n * @return A newly constructed instance of `Audio.Sound`.\n *\n * @example\n * ```ts\n * const sound = new Audio.Sound();\n * try {\n *   await sound.loadAsync(require('./assets/sounds/hello.mp3'));\n *   await sound.playAsync();\n *   // Your sound is playing!\n *\n *   // Don't forget to unload the sound from memory\n *   // when you are done using the Sound object\n *   await sound.unloadAsync();\n * } catch (error) {\n *   // An error occurred!\n * }\n * ```\n *\n * > Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`.\n * > See the [AV documentation](/versions/latest/sdk/av) for further information.\n */\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: { remove: () => void }[] = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n  _onMetadataUpdate: ((metadata: AVMetadata) => void) | null = null;\n  _onAudioSampleReceived: AudioSampleCallback = null;\n\n  /** @deprecated Use `Sound.createAsync()` instead */\n  static create = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  /**\n   * Creates and loads a sound from source.\n   *\n   * ```ts\n   * const { sound } = await Audio.Sound.createAsync(\n   *   source,\n   *   initialStatus,\n   *   onPlaybackStatusUpdate,\n   *   downloadFirst\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const sound = new Audio.Sound();\n   * sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n   * await sound.loadAsync(source, initialStatus, downloadFirst);\n   * ```\n   *\n   * @param source The source of the sound. See the [AV documentation](/versions/latest/sdk/av/#playback-api) for details on the possible `source` values.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet` and the default\n   * initial playback status.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @param downloadFirst If set to true, the system will attempt to download the resource to the device before loading. This value defaults to `true`.\n   * Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { sound: soundObject, status } = await Audio.Sound.createAsync(\n   *     require('./assets/sounds/hello.mp3'),\n   *     { shouldPlay: true }\n   *   );\n   *   // Your sound is playing!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.\n   */\n  static createAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: AVPlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: AVPlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  private _updateAudioSampleReceivedCallback() {\n    if (globalThis.__EXAV_setOnAudioSampleReceivedCallback == null) {\n      if (Platform.OS === 'ios' || Platform.OS === 'android') {\n        console.warn(\n          'expo-av: Failed to set up Audio Sample Buffer callback. ' +\n            \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" +\n            'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.'\n        );\n        return;\n      } else {\n        throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n      }\n    }\n    if (this._key == null) {\n      throw new Error(\n        'Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!'\n      );\n    }\n    if (typeof this._key !== 'number') {\n      throw new Error(\n        `Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this\n          ._key}! (expected: number)`\n      );\n    }\n\n    globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: AVPlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalMetadataUpdateCallback = ({\n    key,\n    metadata,\n  }: {\n    key: AudioInstance;\n    metadata: AVMetadata;\n  }) => {\n    if (this._key === key) {\n      this._onMetadataUpdate?.(metadata);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        ),\n        this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback)\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach((e) => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: AVPlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  /**\n   * Sets a function to be called whenever the metadata of the sound object changes, if one is set.\n   * @param onMetadataUpdate A function taking a single object of type `AVMetadata` as a parameter.\n   * @platform ios\n   */\n  setOnMetadataUpdate(onMetadataUpdate: (metadata: AVMetadata) => void) {\n    this._onMetadataUpdate = onMetadataUpdate;\n  }\n\n  /**\n   * Sets a function to be called during playback, receiving the audio sample as parameter.\n   * @param callback A function taking the `AudioSampleCallback` as parameter.\n   */\n  setOnAudioSampleReceived(callback: AudioSampleCallback) {\n    this._onAudioSampleReceived = callback;\n    if (this._key != null) {\n      this._updateAudioSampleReceivedCallback();\n    }\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const { nativeSource, fullInitialStatus } =\n        await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<AVPlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, AVPlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<AVPlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"mappings":"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"}