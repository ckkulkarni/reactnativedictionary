b5193fe5f4e5120d60885a2df8f2ae07
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IS_MANAGED_ENV = exports.IS_ENV_WITH_UPDATES_ENABLED = exports.IS_BARE_ENV_WITH_UPDATES = exports.IS_BARE_ENV_WITHOUT_UPDATES = void 0;
exports.downloadAsync = downloadAsync;
exports.getLocalAssets = getLocalAssets;
exports.getManifest = getManifest;
exports.getManifest2 = getManifest2;
exports.manifestBaseUrl = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _blueimpMd = _interopRequireDefault(require("blueimp-md5"));
var _expoConstants = _interopRequireDefault(require("expo-constants"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _expoModulesCore = require("expo-modules-core");
var _AssetUris = require("./AssetUris");
var _NativeModulesProxy$E, _NativeModulesProxy$E2;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var IS_MANAGED_ENV = !!_expoConstants.default.appOwnership;
exports.IS_MANAGED_ENV = IS_MANAGED_ENV;
var IS_BARE_ENV_WITH_UPDATES = !IS_MANAGED_ENV && !!((_NativeModulesProxy$E = _expoModulesCore.NativeModulesProxy.ExpoUpdates) != null && _NativeModulesProxy$E.isEnabled) && !((_NativeModulesProxy$E2 = _expoModulesCore.NativeModulesProxy.ExpoUpdates) != null && _NativeModulesProxy$E2.isUsingEmbeddedAssets);
exports.IS_BARE_ENV_WITH_UPDATES = IS_BARE_ENV_WITH_UPDATES;
var IS_ENV_WITH_UPDATES_ENABLED = IS_MANAGED_ENV || IS_BARE_ENV_WITH_UPDATES;
exports.IS_ENV_WITH_UPDATES_ENABLED = IS_ENV_WITH_UPDATES_ENABLED;
var IS_BARE_ENV_WITHOUT_UPDATES = !IS_MANAGED_ENV && !IS_BARE_ENV_WITH_UPDATES;
exports.IS_BARE_ENV_WITHOUT_UPDATES = IS_BARE_ENV_WITHOUT_UPDATES;
function getLocalAssets() {
  var _NativeModulesProxy$E3, _NativeModulesProxy$E4;
  return (_NativeModulesProxy$E3 = (_NativeModulesProxy$E4 = _expoModulesCore.NativeModulesProxy.ExpoUpdates) == null ? void 0 : _NativeModulesProxy$E4.localAssets) != null ? _NativeModulesProxy$E3 : {};
}
function getManifest() {
  var _Constants$__unsafeNo;
  return (_Constants$__unsafeNo = _expoConstants.default.__unsafeNoWarnManifest) != null ? _Constants$__unsafeNo : {};
}
function getManifest2() {
  return _expoConstants.default.__unsafeNoWarnManifest2;
}
var manifestBaseUrl = _expoConstants.default.experienceUrl ? (0, _AssetUris.getManifestBaseUrl)(_expoConstants.default.experienceUrl) : null;
exports.manifestBaseUrl = manifestBaseUrl;
function downloadAsync(_x, _x2, _x3, _x4) {
  return _downloadAsync.apply(this, arguments);
}
function _downloadAsync() {
  _downloadAsync = (0, _asyncToGenerator2.default)(function* (uri, hash, type, name) {
    if (IS_MANAGED_ENV) {
      return _downloadAsyncManagedEnv(uri, hash, type, name);
    }
    return _downloadAsyncUnmanagedEnv(uri, hash, type);
  });
  return _downloadAsync.apply(this, arguments);
}
function _downloadAsyncManagedEnv(_x5, _x6, _x7, _x8) {
  return _downloadAsyncManagedEnv2.apply(this, arguments);
}
function _downloadAsyncManagedEnv2() {
  _downloadAsyncManagedEnv2 = (0, _asyncToGenerator2.default)(function* (uri, hash, type, name) {
    var cacheFileId = hash || (0, _blueimpMd.default)(uri);
    var localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${type}`;
    var fileInfo = yield FileSystem.getInfoAsync(localUri, {
      md5: true
    });
    if (!fileInfo.exists || hash !== null && fileInfo.md5 !== hash) {
      var _yield$FileSystem$dow = yield FileSystem.downloadAsync(uri, localUri, {
          md5: true
        }),
        md5 = _yield$FileSystem$dow.md5;
      if (hash !== null && md5 !== hash) {
        throw new Error(`Downloaded file for asset '${name}.${type}' ` + `Located at ${uri} ` + `failed MD5 integrity check`);
      }
    }
    return localUri;
  });
  return _downloadAsyncManagedEnv2.apply(this, arguments);
}
function _downloadAsyncUnmanagedEnv(_x9, _x10, _x11) {
  return _downloadAsyncUnmanagedEnv2.apply(this, arguments);
}
function _downloadAsyncUnmanagedEnv2() {
  _downloadAsyncUnmanagedEnv2 = (0, _asyncToGenerator2.default)(function* (uri, hash, type) {
    if (uri.startsWith('file://')) {
      return uri;
    }
    var cacheFileId = hash || (0, _blueimpMd.default)(uri);
    var localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${type}`;
    yield FileSystem.downloadAsync(uri, localUri);
    return localUri;
  });
  return _downloadAsyncUnmanagedEnv2.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,