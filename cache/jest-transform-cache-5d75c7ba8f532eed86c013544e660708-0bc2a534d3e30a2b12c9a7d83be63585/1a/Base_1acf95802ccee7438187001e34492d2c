ed7ae6a2dc9fcaa8286a4fe758d8f08e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Base;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _axios = _interopRequireDefault(require("axios"));
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Base() {
  var navigation = (0, _native.useNavigation)();
  var _useState = (0, _react.useState)(""),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    word = _useState2[0],
    setWord = _useState2[1];
  var _useState3 = (0, _react.useState)(""),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    temp = _useState4[0],
    setTemp = _useState4[1];
  var _useState5 = (0, _react.useState)([]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    definitions = _useState6[0],
    setDefinitions = _useState6[1];
  var mounted = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    var getWord = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        var result = yield _axios.default.get("https://random-word-api.herokuapp.com/word");
        setWord(result.data[0]);
      });
      return function getWord() {
        return _ref.apply(this, arguments);
      };
    }();
    if (!mounted.current) {
      getWord();
      mounted.current = true;
    }
  }, []);
  var getDefinition = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (wordToFetch) {
      try {
        var result = yield _axios.default.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${wordToFetch}`);
        var meanings = result.data[0].meanings;
        var definitionsArray = meanings.map(function (meaning) {
          var _meaning$definitions$;
          return ((_meaning$definitions$ = meaning.definitions[0]) == null ? void 0 : _meaning$definitions$.definition) || null;
        });
        setDefinitions(definitionsArray.filter(function (definition) {
          return definition !== null;
        }));
      } catch (error) {
        _reactNative.Alert.alert("No definition found.");
        setDefinitions(["Enter a valid word."]);
      }
    });
    return function getDefinition(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    if (word !== "") {
      getDefinition(word);
    }
  }, [word]);
  var handleSubmit = function handleSubmit() {
    setWord(temp);
  };
  var handleNavigation = function handleNavigation() {
    navigation.navigate("Details", {
      word: word
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      style: styles.definitionContainer,
      onPress: handleNavigation,
      testID: "definition-block",
      children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.definitionTitle,
        children: ["Word: ", word]
      }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
        style: styles.definitionScrollView,
        children: definitions.map(function (definition, index) {
          return (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.definitionText,
            children: definition
          }, index);
        })
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.inputContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        style: styles.input,
        onChangeText: function onChangeText(text) {
          return setTemp(text);
        },
        placeholder: "Example: example",
        testID: "word-input"
      }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
        title: "Submit",
        onPress: handleSubmit,
        testID: "submit-button"
      })]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingHorizontal: 20
  },
  definitionContainer: {
    backgroundColor: "#E48586",
    borderRadius: 10,
    padding: 20,
    marginBottom: 20,
    width: "100%",
    alignItems: "center"
  },
  definitionTitle: {
    fontWeight: "bold",
    fontSize: 18,
    marginBottom: 10
  },
  definitionScrollView: {
    maxHeight: 200
  },
  definitionText: {
    fontSize: 16,
    marginBottom: 8
  },
  inputContainer: {
    width: "100%",
    alignItems: "center"
  },
  input: {
    borderWidth: 1,
    borderColor: "gray",
    borderRadius: 5,
    padding: 10,
    width: "80%",
    marginVertical: 10,
    color: "black"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,