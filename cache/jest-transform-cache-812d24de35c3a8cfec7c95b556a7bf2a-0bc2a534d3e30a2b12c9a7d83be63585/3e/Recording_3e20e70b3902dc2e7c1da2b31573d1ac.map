{"version":3,"names":["_expoModulesCore","require","_AV","_ExponentAV","_interopRequireDefault","_AudioAvailability","_RecordingConstants","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_Sound","_Recording","_class","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread","target","i","arguments","length","source","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","_recorderExists","eventEmitter","Platform","OS","EventEmitter","ExponentAV","getPermissionsAsync","_getPermissionsAsync","_asyncToGenerator2","requestPermissionsAsync","_requestPermissionsAsync","usePermissions","createPermissionHook","getMethod","requestMethod","Recording","_this","_classCallCheck2","_subscription","_canRecord","_isDoneRecording","_finalDurationMillis","_uri","_onRecordingStatusUpdate","_progressUpdateTimeoutVariable","_progressUpdateIntervalMillis","_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS","_options","_cleanupForUnloadedRecorder","_ref","finalStatus","_finalStatus$duration","durationMillis","remove","_disablePolling","getStatusAsync","_x","_pollingLoop","isAudioEnabled","setTimeout","_unused","_performOperationAndHandleStatusAsync","getAudioRecordingStatus","status","canRecord","isRecording","isDoneRecording","_callOnRecordingStatusUpdateForNewStatus","_createClass2","value","clearTimeout","_enablePollingIfNecessaryAndPossible","_performOperationAndHandleStatusAsync2","operation","throwIfAudioIsDisabled","Error","_x2","setOnRecordingStatusUpdate","onRecordingStatusUpdate","setProgressUpdateInterval","progressUpdateIntervalMillis","_prepareToRecordAsync","options","undefined","RecordingOptionsPresets","LOW_QUALITY","android","ios","extensionRegex","extension","test","toString","addListener","_yield$ExponentAV$pre","prepareAudioRecorder","uri","currentStatus","prepareToRecordAsync","_getAvailableInputs","getAvailableInputs","_getCurrentInput","getCurrentInput","_setInput","inputUid","setInput","_x3","_startAsync","startAudioRecording","startAsync","_pauseAsync","pauseAudioRecording","pauseAsync","_stopAndUnloadAsync","_stopResult","stopResult","stopError","stopAudioRecording","err","unloadAudioRecorder","Promise","reject","stopAndUnloadAsync","getURI","_createNewLoadedSound","initialStatus","onPlaybackStatusUpdate","console","warn","createNewLoadedSoundAsync","createNewLoadedSound","_createNewLoadedSoundAsync","Sound","createAsync","recording","keepAudioActiveHint"],"sources":["../../src/Audio/Recording.ts"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  EventEmitter,\n  Subscription,\n  Platform,\n} from 'expo-modules-core';\n\nimport {\n  _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n} from '../AV';\nimport ExponentAV from '../ExponentAV';\nimport { isAudioEnabled, throwIfAudioIsDisabled } from './AudioAvailability';\nimport {\n  RecordingInput,\n  RecordingObject,\n  RecordingOptions,\n  RecordingStatus,\n} from './Recording.types';\nimport { RecordingOptionsPresets } from './RecordingConstants';\nimport { Sound, SoundObject } from './Sound';\n\nlet _recorderExists: boolean = false;\nconst eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\n\n/**\n * Checks user's permissions for audio recording.\n * @return A promise that resolves to an object of type `PermissionResponse`.\n */\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.getPermissionsAsync();\n}\n\n/**\n * Asks the user to grant permissions for audio recording.\n * @return A promise that resolves to an object of type `PermissionResponse`.\n */\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.requestPermissionsAsync();\n}\n\n/**\n * Check or request permissions to record audio.\n * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [permissionResponse, requestPermission] = Audio.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * This class represents an audio recording. After creating an instance of this class, `prepareToRecordAsync`\n * must be called in order to record audio. Once recording is finished, call `stopAndUnloadAsync`. Note that\n * only one recorder is allowed to exist in the state between `prepareToRecordAsync` and `stopAndUnloadAsync`\n * at any given time.\n *\n * Note that your experience must request audio recording permissions in order for recording to function.\n * See the [`Permissions` module](/guides/permissions) for more details.\n *\n * Additionally, audio recording is [not supported in the iOS Simulator](/workflow/ios-simulator/#limitations).\n *\n * @example\n * ```ts\n * const recording = new Audio.Recording();\n * try {\n *   await recording.prepareToRecordAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);\n *   await recording.startAsync();\n *   // You are now recording!\n * } catch (error) {\n *   // An error occurred!\n * }\n * ```\n *\n * @return A newly constructed instance of `Audio.Recording`.\n */\nexport class Recording {\n  _subscription: Subscription | null = null;\n  _canRecord: boolean = false;\n  _isDoneRecording: boolean = false;\n  _finalDurationMillis: number = 0;\n  _uri: string | null = null;\n  _onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null;\n  _progressUpdateTimeoutVariable: number | null = null;\n  _progressUpdateIntervalMillis: number = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n  _options: RecordingOptions | null = null;\n\n  // Internal methods\n\n  _cleanupForUnloadedRecorder = async (finalStatus?: RecordingStatus) => {\n    this._canRecord = false;\n    this._isDoneRecording = true;\n    this._finalDurationMillis = finalStatus?.durationMillis ?? 0;\n    _recorderExists = false;\n    if (this._subscription) {\n      this._subscription.remove();\n      this._subscription = null;\n    }\n    this._disablePolling();\n    return await this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n  };\n\n  _pollingLoop = async () => {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._progressUpdateTimeoutVariable = setTimeout(\n        this._pollingLoop,\n        this._progressUpdateIntervalMillis\n      ) as any;\n      try {\n        await this.getStatusAsync();\n      } catch {\n        this._disablePolling();\n      }\n    }\n  };\n\n  _disablePolling() {\n    if (this._progressUpdateTimeoutVariable != null) {\n      clearTimeout(this._progressUpdateTimeoutVariable);\n      this._progressUpdateTimeoutVariable = null;\n    }\n  }\n\n  _enablePollingIfNecessaryAndPossible() {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._disablePolling();\n      this._pollingLoop();\n    }\n  }\n\n  _callOnRecordingStatusUpdateForNewStatus(status: RecordingStatus) {\n    if (this._onRecordingStatusUpdate != null) {\n      this._onRecordingStatusUpdate(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<RecordingStatus>\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n    if (this._canRecord) {\n      const status = await operation();\n      this._callOnRecordingStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because this recorder is not ready to record.');\n    }\n  }\n\n  /**\n   * Creates and starts a recording using the given options, with optional `onRecordingStatusUpdate` and `progressUpdateIntervalMillis`.\n   *\n   * ```ts\n   * const { recording, status } = await Audio.Recording.createAsync(\n   *   options,\n   *   onRecordingStatusUpdate,\n   *   progressUpdateIntervalMillis\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const recording = new Audio.Recording();\n   * await recording.prepareToRecordAsync(options);\n   * recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n   * await recording.startAsync();\n   * ```\n   *\n   * @param options Options for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to,\n   * the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`. See below for details on `RecordingOptions`.\n   * @param onRecordingStatusUpdate A function taking a single parameter `status` (a dictionary, described in `getStatusAsync`).\n   * @param progressUpdateIntervalMillis The interval between calls of `onRecordingStatusUpdate`. This value defaults to 500 milliseconds.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { recording: recordingObject, status } = await Audio.Recording.createAsync(\n   *     Audio.RecordingOptionsPresets.HIGH_QUALITY\n   *   );\n   *   // You are now recording!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded.\n   */\n  static createAsync = async (\n    options: RecordingOptions = RecordingOptionsPresets.LOW_QUALITY,\n    onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null,\n    progressUpdateIntervalMillis: number | null = null\n  ): Promise<RecordingObject> => {\n    const recording: Recording = new Recording();\n    if (progressUpdateIntervalMillis) {\n      recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    }\n    recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n    await recording.prepareToRecordAsync({\n      ...options,\n      keepAudioActiveHint: true,\n    });\n    try {\n      const status = await recording.startAsync();\n      return { recording, status };\n    } catch (err) {\n      recording.stopAndUnloadAsync();\n      throw err;\n    }\n  };\n\n  // Get status API\n\n  /**\n   * Gets the `status` of the `Recording`.\n   * @return A `Promise` that is resolved with the `RecordingStatus` object.\n   */\n  getStatusAsync = async (): Promise<RecordingStatus> => {\n    // Automatically calls onRecordingStatusUpdate.\n    if (this._canRecord) {\n      return this._performOperationAndHandleStatusAsync(() => ExponentAV.getAudioRecordingStatus());\n    }\n    const status = {\n      canRecord: false,\n      isRecording: false,\n      isDoneRecording: this._isDoneRecording,\n      durationMillis: this._finalDurationMillis,\n    };\n    this._callOnRecordingStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  /**\n   * Sets a function to be called regularly with the `RecordingStatus` of the `Recording`.\n   *\n   * `onRecordingStatusUpdate` will be called when another call to the API for this recording completes (such as `prepareToRecordAsync()`,\n   * `startAsync()`, `getStatusAsync()`, or `stopAndUnloadAsync()`), and will also be called at regular intervals while the recording can record.\n   * Call `setProgressUpdateInterval()` to modify the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n   *\n   * @param onRecordingStatusUpdate A function taking a single parameter `RecordingStatus`.\n   */\n  setOnRecordingStatusUpdate(onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null) {\n    this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n    if (onRecordingStatusUpdate == null) {\n      this._disablePolling();\n    } else {\n      this._enablePollingIfNecessaryAndPossible();\n    }\n    this.getStatusAsync();\n  }\n\n  /**\n   * Sets the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n   * See `setOnRecordingStatusUpdate` for details. This value defaults to 500 milliseconds.\n   * @param progressUpdateIntervalMillis The new interval between calls of `onRecordingStatusUpdate`.\n   */\n  setProgressUpdateInterval(progressUpdateIntervalMillis: number) {\n    this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    this.getStatusAsync();\n  }\n\n  // Record API\n\n  /**\n   * Loads the recorder into memory and prepares it for recording. This must be called before calling `startAsync()`.\n   * This method can only be called if the `Recording` instance has never yet been prepared.\n   *\n   * @param options `RecordingOptions` for the recording, including sample rate, bitrate, channels, format, encoder, and extension.\n   * If no options are passed to `prepareToRecordAsync()`, the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`.\n   *\n   * @return A `Promise` that is fulfilled when the recorder is loaded and prepared, or rejects if this failed. If another `Recording` exists\n   * in your experience that is currently prepared to record, the `Promise` will reject. If the `RecordingOptions` provided are invalid,\n   * the `Promise` will also reject. The promise is resolved with the `RecordingStatus` of the recording.\n   */\n  async prepareToRecordAsync(\n    options: RecordingOptions = RecordingOptionsPresets.LOW_QUALITY\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n\n    if (_recorderExists) {\n      throw new Error('Only one Recording object can be prepared at a given time.');\n    }\n\n    if (this._isDoneRecording) {\n      throw new Error('This Recording object is done recording; you must make a new one.');\n    }\n\n    if (!options || !options.android || !options.ios) {\n      throw new Error(\n        'You must provide recording options for android and ios in order to prepare to record.'\n      );\n    }\n\n    const extensionRegex = /^\\.\\w+$/;\n    if (\n      !options.android.extension ||\n      !options.ios.extension ||\n      !extensionRegex.test(options.android.extension) ||\n      !extensionRegex.test(options.ios.extension)\n    ) {\n      throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n    }\n\n    if (!this._canRecord) {\n      if (eventEmitter) {\n        this._subscription = eventEmitter.addListener(\n          'Expo.Recording.recorderUnloaded',\n          this._cleanupForUnloadedRecorder\n        );\n      }\n\n      const {\n        uri,\n        status,\n      }: {\n        uri: string | null;\n        // status is of type RecordingStatus, but without the canRecord field populated\n        status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n      } = await ExponentAV.prepareAudioRecorder(options);\n      _recorderExists = true;\n      this._uri = uri;\n      this._options = options;\n      this._canRecord = true;\n\n      const currentStatus = { ...status, canRecord: true };\n      this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n      this._enablePollingIfNecessaryAndPossible();\n      return currentStatus;\n    } else {\n      throw new Error('This Recording object is already prepared to record.');\n    }\n  }\n\n  /**\n   * Returns a list of available recording inputs. This method can only be called if the `Recording` has been prepared.\n   * @return A `Promise` that is fulfilled with an array of `RecordingInput` objects.\n   */\n  async getAvailableInputs(): Promise<RecordingInput[]> {\n    return ExponentAV.getAvailableInputs();\n  }\n\n  /**\n   * Returns the currently-selected recording input. This method can only be called if the `Recording` has been prepared.\n   * @return A `Promise` that is fulfilled with a `RecordingInput` object.\n   */\n  async getCurrentInput(): Promise<RecordingInput> {\n    return ExponentAV.getCurrentInput();\n  }\n\n  /**\n   * Sets the current recording input.\n   * @param inputUid The uid of a `RecordingInput`.\n   * @return A `Promise` that is resolved if successful or rejected if not.\n   */\n  async setInput(inputUid: string): Promise<void> {\n    return ExponentAV.setInput(inputUid);\n  }\n\n  /**\n   * Begins recording. This method can only be called if the `Recording` has been prepared.\n   * @return A `Promise` that is fulfilled when recording has begun, or rejects if recording could not be started.\n   * The promise is resolved with the `RecordingStatus` of the recording.\n   */\n  async startAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.startAudioRecording());\n  }\n\n  /**\n   * Pauses recording. This method can only be called if the `Recording` has been prepared.\n   *\n   * > This is only available on Android API version 24 and later.\n   *\n   * @return A `Promise` that is fulfilled when recording has paused, or rejects if recording could not be paused.\n   * If the Android API version is less than 24, the `Promise` will reject. The promise is resolved with the\n   * `RecordingStatus` of the recording.\n   */\n  async pauseAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.pauseAudioRecording());\n  }\n\n  /**\n   * Stops the recording and deallocates the recorder from memory. This reverts the `Recording` instance\n   * to an unprepared state, and another `Recording` instance must be created in order to record again.\n   * This method can only be called if the `Recording` has been prepared.\n   *\n   * > On Android this method may fail with `E_AUDIO_NODATA` when called too soon after `startAsync` and\n   * > no audio data has been recorded yet. In that case the recorded file will be invalid and should be discarded.\n   *\n   * @return A `Promise` that is fulfilled when recording has stopped, or rejects if recording could not be stopped.\n   * The promise is resolved with the `RecordingStatus` of the recording.\n   */\n  async stopAndUnloadAsync(): Promise<RecordingStatus> {\n    if (!this._canRecord) {\n      if (this._isDoneRecording) {\n        throw new Error('Cannot unload a Recording that has already been unloaded.');\n      } else {\n        throw new Error('Cannot unload a Recording that has not been prepared.');\n      }\n    }\n    // We perform a separate native API call so that the state of the Recording can be updated with\n    // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n    let stopResult: RecordingStatus | undefined;\n    let stopError: Error | undefined;\n    try {\n      stopResult = await ExponentAV.stopAudioRecording();\n    } catch (err) {\n      stopError = err;\n    }\n\n    // Web has to return the URI at the end of recording, so needs a little destructuring\n    if (Platform.OS === 'web' && stopResult?.uri !== undefined) {\n      this._uri = stopResult.uri;\n    }\n\n    // Clean-up and return status\n    await ExponentAV.unloadAudioRecorder();\n    const status = await this._cleanupForUnloadedRecorder(stopResult);\n    return stopError ? Promise.reject(stopError) : status;\n  }\n\n  // Read API\n\n  /**\n   * Gets the local URI of the `Recording`. Note that this will only succeed once the `Recording` is prepared\n   * to record. On web, this will not return the URI until the recording is finished.\n   * @return A `string` with the local URI of the `Recording`, or `null` if the `Recording` is not prepared\n   * to record (or, on Web, if the recording has not finished).\n   */\n  getURI(): string | null {\n    return this._uri;\n  }\n\n  /**\n   * @deprecated Use `createNewLoadedSoundAsync()` instead.\n   */\n  async createNewLoadedSound(\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n  ): Promise<SoundObject> {\n    console.warn(\n      `createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`\n    );\n    return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n  }\n\n  /**\n   * Creates and loads a new `Sound` object to play back the `Recording`. Note that this will only succeed once the `Recording`\n   * is done recording and `stopAndUnloadAsync()` has been called.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet`\n   * and the default initial playback status.\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject`.\n   */\n  async createNewLoadedSoundAsync(\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n  ): Promise<SoundObject> {\n    if (this._uri == null || !this._isDoneRecording) {\n      throw new Error('Cannot create sound when the Recording has not finished!');\n    }\n    return Sound.createAsync(\n      // $FlowFixMe: Flow can't distinguish between this literal and Asset\n      { uri: this._uri },\n      initialStatus,\n      onPlaybackStatusUpdate,\n      false\n    );\n  }\n}\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\n\nexport * from './RecordingConstants';\n\nexport * from './Recording.types';\n"],"mappings":"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"}