838737d9d9a5649a78ede6cefd238068
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _AV = require("./AV");
var _ExpoVideoManager = _interopRequireDefault(require("./ExpoVideoManager"));
var _ExponentAV = _interopRequireDefault(require("./ExponentAV"));
var _ExponentVideo = _interopRequireDefault(require("./ExponentVideo"));
var _Video = require("./Video.types");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var _STYLES = _reactNative.StyleSheet.create({
  base: {
    overflow: 'hidden'
  },
  poster: {
    position: 'absolute',
    left: 0,
    top: 0,
    right: 0,
    bottom: 0,
    resizeMode: 'contain'
  },
  video: {
    position: 'absolute',
    left: 0,
    top: 0,
    right: 0,
    bottom: 0
  }
});
var ExpoVideoManagerConstants = _ExpoVideoManager["default"];
var ExpoVideoViewManager = _ExpoVideoManager["default"];
var Video = function (_React$Component) {
  (0, _inherits2["default"])(Video, _React$Component);
  var _super = _createSuper(Video);
  function Video(props) {
    var _this;
    (0, _classCallCheck2["default"])(this, Video);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_nativeRef", React.createRef());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onPlaybackStatusUpdate", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleNewStatus", function (status) {
      if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {
        _this.setState({
          showPoster: false
        });
      }
      if (_this.props.onPlaybackStatusUpdate) {
        _this.props.onPlaybackStatusUpdate(status);
      }
      if (_this._onPlaybackStatusUpdate) {
        _this._onPlaybackStatusUpdate(status);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_performOperationAndHandleStatusAsync", function () {
      var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(operation) {
        var video, handle, status;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              video = _this._nativeRef.current;
              if (video) {
                _context.next = 3;
                break;
              }
              throw new Error("Cannot complete operation because the Video component has not yet loaded");
            case 3:
              handle = (0, _reactNative.findNodeHandle)(_this._nativeRef.current);
              _context.next = 6;
              return operation(handle);
            case 6:
              status = _context.sent;
              _this._handleNewStatus(status);
              return _context.abrupt("return", status);
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_setFullscreen", function () {
      var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(value) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                return ExpoVideoViewManager.setFullscreen(tag, value);
              }));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "presentFullscreenPlayer", (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", _this._setFullscreen(true));
          case 1:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    })));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "dismissFullscreenPlayer", (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {
      return _regenerator["default"].wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", _this._setFullscreen(false));
          case 1:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    })));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getStatusAsync", (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5() {
      return _regenerator["default"].wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
              return _ExponentAV["default"].getStatusForVideo(tag);
            }));
          case 1:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    })));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "loadAsync", function () {
      var _ref6 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6(source) {
        var initialStatus,
          downloadFirst,
          _yield$getNativeSourc,
          nativeSource,
          fullInitialStatus,
          _args6 = arguments;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              initialStatus = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
              downloadFirst = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : true;
              _context6.next = 4;
              return (0, _AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst);
            case 4:
              _yield$getNativeSourc = _context6.sent;
              nativeSource = _yield$getNativeSourc.nativeSource;
              fullInitialStatus = _yield$getNativeSourc.fullInitialStatus;
              return _context6.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                return _ExponentAV["default"].loadForVideo(tag, nativeSource, fullInitialStatus);
              }));
            case 8:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      return function (_x3) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "unloadAsync", (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7() {
      return _regenerator["default"].wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            return _context7.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
              return _ExponentAV["default"].unloadForVideo(tag);
            }));
          case 1:
          case "end":
            return _context7.stop();
        }
      }, _callee7);
    })));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setStatusAsync", function () {
      var _ref8 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8(status) {
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              (0, _AV.assertStatusValuesInBounds)(status);
              return _context8.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                return _ExponentAV["default"].setStatusForVideo(tag, status);
              }));
            case 2:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }));
      return function (_x4) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "replayAsync", (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9() {
      var status,
        _args9 = arguments;
      return _regenerator["default"].wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            status = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};
            if (!(status.positionMillis && status.positionMillis !== 0)) {
              _context9.next = 3;
              break;
            }
            throw new Error('Requested position after replay has to be 0.');
          case 3:
            return _context9.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
              return _ExponentAV["default"].replayVideo(tag, _objectSpread(_objectSpread({}, status), {}, {
                positionMillis: 0,
                shouldPlay: true
              }));
            }));
          case 4:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    })));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "playAsync", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "playFromPositionAsync", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "pauseAsync", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "stopAsync", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setPositionAsync", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setRateAsync", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setVolumeAsync", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setIsMutedAsync", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setIsLoopingAsync", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setProgressUpdateIntervalAsync", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_nativeOnPlaybackStatusUpdate", function (event) {
      _this._handleNewStatus(event.nativeEvent);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_nativeOnLoadStart", function () {
      if (_this.props.onLoadStart) {
        _this.props.onLoadStart();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_nativeOnLoad", function (event) {
      if (_this.props.onLoad) {
        _this.props.onLoad(event.nativeEvent);
      }
      _this._handleNewStatus(event.nativeEvent);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_nativeOnError", function (event) {
      var error = event.nativeEvent.error;
      if (_this.props.onError) {
        _this.props.onError(error);
      }
      _this._handleNewStatus((0, _AV.getUnloadedStatus)(error));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_nativeOnReadyForDisplay", function (event) {
      if (_this.props.onReadyForDisplay) {
        _this.props.onReadyForDisplay(event.nativeEvent);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_nativeOnFullscreenUpdate", function (event) {
      if (_this.props.onFullscreenUpdate) {
        _this.props.onFullscreenUpdate(event.nativeEvent);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_renderPoster", function () {
      var _this$props$PosterCom;
      var PosterComponent = (_this$props$PosterCom = _this.props.PosterComponent) !== null && _this$props$PosterCom !== void 0 ? _this$props$PosterCom : _reactNative.Image;
      return _this.props.usePoster && _this.state.showPoster ? React.createElement(PosterComponent, {
        style: [_STYLES.poster, _this.props.posterStyle],
        source: _this.props.posterSource
      }) : null;
    });
    _this.state = {
      showPoster: !!props.usePoster
    };
    return _this;
  }
  (0, _createClass2["default"])(Video, [{
    key: "setNativeProps",
    value: function setNativeProps(nativeProps) {
      var nativeVideo = this._nativeRef.current;
      if (!nativeVideo) throw new Error("native video reference is not defined.");
      nativeVideo.setNativeProps(nativeProps);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unloadAsync()["catch"](function () {});
    }
  }, {
    key: "setOnPlaybackStatusUpdate",
    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {
      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;
      this.getStatusAsync();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var source = (0, _AV.getNativeSourceFromSource)(this.props.source) || undefined;
      var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;
      if (this.props.resizeMode) {
        var resizeMode = this.props.resizeMode;
        if (resizeMode === _Video.ResizeMode.STRETCH) {
          nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;
        } else if (resizeMode === _Video.ResizeMode.CONTAIN) {
          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;
        } else if (resizeMode === _Video.ResizeMode.COVER) {
          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;
        }
      }
      var status = _objectSpread({}, this.props.status);
      ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {
        if (prop in _this2.props) {
          status[prop] = _this2.props[prop];
        }
      });
      var nativeProps = _objectSpread(_objectSpread({}, omit(this.props, ['source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', 'posterStyle'].concat((0, _toConsumableArray2["default"])(Object.keys(status))))), {}, {
        style: [_STYLES.base, this.props.style],
        videoStyle: [_STYLES.video, this.props.videoStyle],
        source: source,
        resizeMode: nativeResizeMode,
        status: status,
        onStatusUpdate: this._nativeOnPlaybackStatusUpdate,
        onLoadStart: this._nativeOnLoadStart,
        onLoad: this._nativeOnLoad,
        onError: this._nativeOnError,
        onReadyForDisplay: this._nativeOnReadyForDisplay,
        onFullscreenUpdate: this._nativeOnFullscreenUpdate
      });
      return React.createElement(_reactNative.View, {
        style: nativeProps.style,
        pointerEvents: "box-none"
      }, React.createElement(_ExponentVideo["default"], _objectSpread(_objectSpread({
        ref: this._nativeRef
      }, nativeProps), {}, {
        style: nativeProps.videoStyle
      })), this._renderPoster());
    }
  }]);
  return Video;
}(React.Component);
function omit(props, propNames) {
  var copied = _objectSpread({}, props);
  var _iterator = _createForOfIteratorHelper(propNames),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var propName = _step.value;
      delete copied[propName];
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return copied;
}
Object.assign(Video.prototype, _AV.PlaybackMixin);
var _default = Video;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,