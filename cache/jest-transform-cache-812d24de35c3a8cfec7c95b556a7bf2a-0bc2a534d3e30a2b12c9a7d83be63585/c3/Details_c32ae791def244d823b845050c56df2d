8470c400120fa93cdb0f149992036742
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _expoAv = require("expo-av");
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var Details = function Details(_ref) {
  var route = _ref.route;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    wordDetails = _useState2[0],
    setWordDetails = _useState2[1];
  console.log(route);
  var word = route.params.word;
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    sound = _useState4[0],
    setSound = _useState4[1];
  (0, _react.useEffect)(function () {
    var getWordDetails = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var result = yield _axios.default.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);
          setWordDetails(result.data[0]);
        } catch (error) {
          _reactNative.Alert.alert("No details found.");
        }
      });
      return function getWordDetails() {
        return _ref2.apply(this, arguments);
      };
    }();
    getWordDetails();
  }, [word]);
  var playAudio = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (audioUrl) {
      if (sound) {
        yield sound.unloadAsync();
      }
      var _yield$Audio$Sound$cr = yield _expoAv.Audio.Sound.createAsync({
          uri: audioUrl
        }),
        newSound = _yield$Audio$Sound$cr.sound;
      setSound(newSound);
      yield newSound.playAsync();
    });
    return function playAudio(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: wordDetails && (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.wordHeading,
        children: wordDetails.word
      }), wordDetails.phonetics.map(function (phonetic, index) {
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.phonetics,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.phoneticText,
            children: phonetic.text
          }), phonetic.audio && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            onPress: function onPress() {
              return playAudio(phonetic.audio);
            },
            style: styles.playButton,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.playButtonText,
              children: "Play Audio"
            })
          })]
        }, index);
      }), wordDetails.meanings.map(function (meaning, index) {
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.meanings,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.partOfSpeech,
            children: meaning.partOfSpeech
          }), meaning.definitions.map(function (definition, index) {
            return (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.defineWExample,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.definitionParagraph,
                children: definition.definition
              }), definition.example && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                style: styles.example,
                children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.emText,
                  children: "Example:"
                }), " ", definition.example]
              }), definition.synonyms.length > 0 && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                style: styles.synonyms,
                children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.emText,
                  children: "Synonyms:"
                }), " ", definition.synonyms.join(", ")]
              })]
            }, index);
          })]
        }, index);
      })]
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: "white"
  },
  wordHeading: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 10
  },
  phonetics: {
    marginBottom: 10
  },
  phoneticText: {
    fontSize: 18
  },
  meanings: {
    marginTop: 10
  },
  partOfSpeech: {
    fontSize: 20,
    fontWeight: "bold"
  },
  defineWExample: {
    marginTop: 5
  },
  definitionParagraph: {
    fontSize: 16
  },
  example: {
    fontStyle: "italic"
  },
  synonyms: {
    fontStyle: "italic",
    color: "#555"
  },
  emText: {
    fontStyle: "italic",
    fontWeight: "bold"
  },
  playButton: {
    backgroundColor: "#3498db",
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 4,
    alignSelf: "flex-start",
    marginTop: 5
  },
  playButtonText: {
    color: "white",
    fontWeight: "bold"
  }
});
var _default = Details;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,