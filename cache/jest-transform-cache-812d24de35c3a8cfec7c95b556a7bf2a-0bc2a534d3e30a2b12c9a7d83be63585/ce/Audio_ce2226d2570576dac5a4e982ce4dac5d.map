{"version":3,"names":["_Audio","require","_ExponentAV","_interopRequireDefault","_Recording","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_Sound","_AudioAvailability","_AV","_populateMissingKeys","userAudioMode","defaultAudioMode","defaultMode","allowsRecordingIOS","interruptionModeIOS","InterruptionModeIOS","MixWithOthers","playsInSilentModeIOS","staysActiveInBackground","interruptionModeAndroid","InterruptionModeAndroid","DuckOthers","shouldDuckAndroid","playThroughEarpieceAndroid","currentAudioMode","getCurrentAudioMode","setAudioModeAsync","_x","_setAudioModeAsync","apply","arguments","_asyncToGenerator2","_regenerator","mark","_callee","partialMode","mode","wrap","_callee$","_context","prev","next","Error","ExponentAV","setAudioMode","abrupt","sent","stop"],"sources":["../src/Audio.ts"],"sourcesContent":["import { AudioMode, InterruptionModeAndroid, InterruptionModeIOS } from './Audio.types';\nimport ExponentAV from './ExponentAV';\n\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport { setIsEnabledAsync } from './Audio/AudioAvailability';\nexport { PitchCorrectionQuality } from './AV';\n\nconst _populateMissingKeys = (\n  userAudioMode: Partial<AudioMode>,\n  defaultAudioMode: AudioMode\n): AudioMode => {\n  for (const key in defaultAudioMode) {\n    if (!userAudioMode.hasOwnProperty(key)) {\n      userAudioMode[key] = defaultAudioMode[key];\n    }\n  }\n  return userAudioMode as AudioMode;\n};\n\nconst defaultMode: AudioMode = {\n  allowsRecordingIOS: false,\n  interruptionModeIOS: InterruptionModeIOS.MixWithOthers,\n  playsInSilentModeIOS: false,\n  staysActiveInBackground: false,\n  interruptionModeAndroid: InterruptionModeAndroid.DuckOthers,\n  shouldDuckAndroid: true,\n  playThroughEarpieceAndroid: false,\n};\n\nlet currentAudioMode: AudioMode | null = null;\n\nfunction getCurrentAudioMode(): AudioMode {\n  if (!currentAudioMode) {\n    return defaultMode;\n  }\n  return currentAudioMode;\n}\n\n/**\n * We provide this API to customize the audio experience on iOS and Android.\n * @param partialMode\n * @return A `Promise` that will reject if the audio mode could not be enabled for the device.\n */\nexport async function setAudioModeAsync(partialMode: Partial<AudioMode>): Promise<void> {\n  const mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n\n  if (!InterruptionModeIOS[mode.interruptionModeIOS]) {\n    throw new Error(`\"interruptionModeIOS\" was set to an invalid value.`);\n  }\n  if (!InterruptionModeAndroid[mode.interruptionModeAndroid]) {\n    throw new Error(`\"interruptionModeAndroid\" was set to an invalid value.`);\n  }\n  if (\n    typeof mode.allowsRecordingIOS !== 'boolean' ||\n    typeof mode.playsInSilentModeIOS !== 'boolean' ||\n    typeof mode.staysActiveInBackground !== 'boolean' ||\n    typeof mode.shouldDuckAndroid !== 'boolean' ||\n    typeof mode.playThroughEarpieceAndroid !== 'boolean'\n  ) {\n    throw new Error(\n      '\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.'\n    );\n  }\n  currentAudioMode = mode;\n  return await ExponentAV.setAudioMode(mode);\n}\n"],"mappings":"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"}