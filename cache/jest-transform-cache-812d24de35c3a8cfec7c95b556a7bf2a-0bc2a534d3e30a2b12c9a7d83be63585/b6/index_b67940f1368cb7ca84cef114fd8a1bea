c5942550030501a04267604f9ff31d2f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var base64Decode = require('fast-base64-decode');
var _require = require('react-native'),
  NativeModules = _require.NativeModules;
var TypeMismatchError = function (_Error) {
  (0, _inherits2["default"])(TypeMismatchError, _Error);
  var _super = _createSuper(TypeMismatchError);
  function TypeMismatchError() {
    (0, _classCallCheck2["default"])(this, TypeMismatchError);
    return _super.apply(this, arguments);
  }
  return (0, _createClass2["default"])(TypeMismatchError);
}((0, _wrapNativeSuper2["default"])(Error));
var QuotaExceededError = function (_Error2) {
  (0, _inherits2["default"])(QuotaExceededError, _Error2);
  var _super2 = _createSuper(QuotaExceededError);
  function QuotaExceededError() {
    (0, _classCallCheck2["default"])(this, QuotaExceededError);
    return _super2.apply(this, arguments);
  }
  return (0, _createClass2["default"])(QuotaExceededError);
}((0, _wrapNativeSuper2["default"])(Error));
var warned = false;
function insecureRandomValues(array) {
  if (!warned) {
    console.warn('Using an insecure random number generator, this should only happen when running in a debugger without support for crypto.getRandomValues');
    warned = true;
  }
  for (var i = 0, r; i < array.length; i++) {
    if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
    array[i] = r >>> ((i & 0x03) << 3) & 0xff;
  }
  return array;
}
function getRandomBase64(byteLength) {
  if (NativeModules.RNGetRandomValues) {
    return NativeModules.RNGetRandomValues.getRandomBase64(byteLength);
  } else if (NativeModules.ExpoRandom) {
    return NativeModules.ExpoRandom.getRandomBase64String(byteLength);
  } else if (global.ExpoModules) {
    return global.ExpoModules.ExpoRandom.getRandomBase64String(byteLength);
  } else {
    throw new Error('Native module not found');
  }
}
function getRandomValues(array) {
  if (!(array instanceof Int8Array || array instanceof Uint8Array || array instanceof Int16Array || array instanceof Uint16Array || array instanceof Int32Array || array instanceof Uint32Array || array instanceof Uint8ClampedArray)) {
    throw new TypeMismatchError('Expected an integer array');
  }
  if (array.byteLength > 65536) {
    throw new QuotaExceededError('Can only request a maximum of 65536 bytes');
  }
  if (global.expo && global.expo.modules && global.expo.modules.ExpoCrypto && global.expo.modules.ExpoCrypto.getRandomValues) {
    global.expo.modules.ExpoCrypto.getRandomValues(array);
    return array;
  }
  if (__DEV__) {
    if (typeof global.nativeCallSyncHook === 'undefined') {
      return insecureRandomValues(array);
    }
  }
  base64Decode(getRandomBase64(array.byteLength), new Uint8Array(array.buffer, array.byteOffset, array.byteLength));
  return array;
}
if ((0, _typeof2["default"])(global.crypto) !== 'object') {
  global.crypto = {};
}
if (typeof global.crypto.getRandomValues !== 'function') {
  global.crypto.getRandomValues = getRandomValues;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,