{"version":3,"names":["_expoAsset","require","_expoModulesCore","_AV","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread","target","i","arguments","length","source","_defineProperty2","getOwnPropertyDescriptors","defineProperties","_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS","_DEFAULT_INITIAL_PLAYBACK_STATUS","positionMillis","progressUpdateIntervalMillis","shouldPlay","rate","shouldCorrectPitch","volume","audioPan","isMuted","isLooping","getNativeSourceFromSource","uri","overridingExtension","headers","Platform","OS","asset","_getAssetFromPlaybackSource","localUri","overrideFileExtensionAndroid","_typeof2","Asset","fromModule","assertStatusValuesInBounds","status","RangeError","getNativeSourceAndFullInitialStatusForLoadAsync","_x","_x2","_x3","_getNativeSourceAndFullInitialStatusForLoadAsync","_asyncToGenerator2","_regenerator","mark","_callee11","initialStatus","downloadFirst","fullInitialStatus","nativeSource","wrap","_callee11$","_context11","prev","next","abrupt","downloadAsync","Error","stop","getUnloadedStatus","error","undefined","isLoaded","PlaybackMixin","playAsync","_this","_callee","_callee$","_context","setStatusAsync","playFromPositionAsync","_arguments","_this2","_callee2","tolerances","_callee2$","_context2","seekMillisToleranceAfter","toleranceMillisAfter","seekMillisToleranceBefore","toleranceMillisBefore","pauseAsync","_this3","_callee3","_callee3$","_context3","stopAsync","_this4","_callee4","_callee4$","_context4","setPositionAsync","_arguments2","_this5","_callee5","_callee5$","_context5","setRateAsync","_arguments3","_this6","_callee6","pitchCorrectionQuality","_callee6$","_context6","PitchCorrectionQuality","Low","setVolumeAsync","_this7","_callee7","_callee7$","_context7","setIsMutedAsync","_this8","_callee8","_callee8$","_context8","setIsLoopingAsync","_this9","_callee9","_callee9$","_context9","setProgressUpdateIntervalAsync","_this10","_callee10","_callee10$","_context10"],"sources":["../src/AV.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport { Platform } from 'expo-modules-core';\n\nimport {\n  AVPlaybackSource,\n  AVPlaybackNativeSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  PitchCorrectionQuality,\n  AVPlaybackTolerance,\n} from './AV.types';\n\n// TODO add:\n//  disableFocusOnAndroid\n//  audio routes (at least did become noisy on android)\n//  pan\n//  pitch\n//  API to explicitly request audio focus / session\n//  API to select stream type on Android\n//  subtitles API\n\n/**\n * @hidden\n */\nexport const _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS: number = 500;\n\n// @needsAudit\n/**\n * The default initial `AVPlaybackStatusToSet` of all `Audio.Sound` objects and `Video` components is as follows:\n *\n * ```javascript\n * {\n *   progressUpdateIntervalMillis: 500,\n *   positionMillis: 0,\n *   shouldPlay: false,\n *   rate: 1.0,\n *   shouldCorrectPitch: false,\n *   volume: 1.0,\n *   isMuted: false,\n *   isLooping: false,\n * }\n * ```\n *\n * This default initial status can be overwritten by setting the optional `initialStatus` in `loadAsync()` or `Audio.Sound.createAsync()`.\n */\nexport const _DEFAULT_INITIAL_PLAYBACK_STATUS: AVPlaybackStatusToSet = {\n  positionMillis: 0,\n  progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  shouldPlay: false,\n  rate: 1.0,\n  shouldCorrectPitch: false,\n  volume: 1.0,\n  audioPan: 0,\n  isMuted: false,\n  isLooping: false,\n};\n\n// @needsAudit\n/**\n * @hidden\n */\nexport function getNativeSourceFromSource(\n  source?: AVPlaybackSource | null\n): AVPlaybackNativeSource | null {\n  let uri: string | null = null;\n  let overridingExtension: string | null = null;\n  let headers: AVPlaybackNativeSource['headers'];\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      uri: source,\n      overridingExtension,\n      headers,\n    };\n  }\n\n  const asset: Asset | null = _getAssetFromPlaybackSource(source);\n  if (asset != null) {\n    uri = asset.localUri || asset.uri;\n  } else if (\n    source != null &&\n    typeof source !== 'number' &&\n    'uri' in source &&\n    typeof source.uri === 'string'\n  ) {\n    uri = source.uri;\n  }\n\n  if (uri == null) {\n    return null;\n  }\n\n  if (\n    source != null &&\n    typeof source !== 'number' &&\n    'overrideFileExtensionAndroid' in source &&\n    typeof source.overrideFileExtensionAndroid === 'string'\n  ) {\n    overridingExtension = source.overrideFileExtensionAndroid;\n  }\n\n  if (\n    source != null &&\n    typeof source !== 'number' &&\n    'headers' in source &&\n    typeof source.headers === 'object'\n  ) {\n    headers = source.headers;\n  }\n  return { uri, overridingExtension, headers };\n}\n\nfunction _getAssetFromPlaybackSource(source?: AVPlaybackSource | null): Asset | null {\n  if (source == null) {\n    return null;\n  }\n\n  let asset: Asset | null = null;\n  if (typeof source === 'number') {\n    asset = Asset.fromModule(source);\n  } else if (source instanceof Asset) {\n    asset = source;\n  }\n  return asset;\n}\n\n// @needsAudit\n/**\n * @hidden\n */\nexport function assertStatusValuesInBounds(status: AVPlaybackStatusToSet): void {\n  if (typeof status.rate === 'number' && (status.rate < 0 || status.rate > 32)) {\n    throw new RangeError('Rate value must be between 0.0 and 32.0');\n  }\n  if (typeof status.volume === 'number' && (status.volume < 0 || status.volume > 1)) {\n    throw new RangeError('Volume value must be between 0.0 and 1.0');\n  }\n  if (typeof status.audioPan === 'number' && (status.audioPan < -1 || status.audioPan > 1)) {\n    throw new RangeError('Pan value must be between -1.0 and 1.0');\n  }\n}\n\n// @needsAudit\n/**\n * @hidden\n */\nexport async function getNativeSourceAndFullInitialStatusForLoadAsync(\n  source: AVPlaybackSource | null,\n  initialStatus: AVPlaybackStatusToSet | null,\n  downloadFirst: boolean\n): Promise<{\n  nativeSource: AVPlaybackNativeSource;\n  fullInitialStatus: AVPlaybackStatusToSet;\n}> {\n  // Get the full initial status\n  const fullInitialStatus: AVPlaybackStatusToSet =\n    initialStatus == null\n      ? _DEFAULT_INITIAL_PLAYBACK_STATUS\n      : {\n          ..._DEFAULT_INITIAL_PLAYBACK_STATUS,\n          ...initialStatus,\n        };\n  assertStatusValuesInBounds(fullInitialStatus);\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      nativeSource: {\n        uri: source,\n        overridingExtension: null,\n      },\n      fullInitialStatus,\n    };\n  }\n\n  // Download first if necessary.\n  const asset = _getAssetFromPlaybackSource(source);\n  if (downloadFirst && asset) {\n    // TODO we can download remote uri too once @nikki93 has integrated this into Asset\n    await asset.downloadAsync();\n  }\n\n  // Get the native source\n  const nativeSource: AVPlaybackNativeSource | null = getNativeSourceFromSource(source);\n\n  if (nativeSource === null) {\n    throw new Error(`Cannot load an AV asset from a null playback source`);\n  }\n\n  // If asset has been downloaded use the localUri\n  if (asset && asset.localUri) {\n    nativeSource.uri = asset.localUri;\n  }\n\n  return { nativeSource, fullInitialStatus };\n}\n\n// @needsAudit\n/**\n * @hidden\n */\nexport function getUnloadedStatus(error: string | null = null): AVPlaybackStatus {\n  return {\n    isLoaded: false,\n    ...(error ? { error } : null),\n  };\n}\n\n// @needsAudit\nexport interface AV {\n  /**\n   * Sets a new `AVPlaybackStatusToSet` on the `playbackObject`. This method can only be called if the media has been loaded.\n   * @param status The new `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the current playback status.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once the new status has been set successfully,\n   * or rejects if setting the new status failed. See below for details on `AVPlaybackStatus`.\n   */\n  setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus>;\n\n  /**\n   * Gets the `AVPlaybackStatus` of the `playbackObject`.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject`.\n   */\n  getStatusAsync(): Promise<AVPlaybackStatus>;\n}\n\n// @needsAudit\n/**\n * On the `playbackObject` reference, the following API is provided.\n */\nexport interface Playback extends AV {\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: true })`.\n   *\n   * Playback may not start immediately after calling this function for reasons such as buffering. Make sure to update your UI based\n   * on the `isPlaying` and `isBuffering` properties of the `AVPlaybackStatus`.\n   */\n  playAsync(): Promise<AVPlaybackStatus>;\n\n  /**\n   * Loads the media from `source` into memory and prepares it for playing. This must be called before calling `setStatusAsync()`\n   * or any of the convenience set status methods. This method can only be called if the `playbackObject` is in an unloaded state.\n   * @param source The source of the media.\n   * @param initialStatus The initial intended `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. For more information see the details on `AVPlaybackStatusToSet` type\n   * and the default initial playback status.\n   * @param downloadAsync If set to `true`, the system will attempt to download the resource to the device before loading.\n   * This value defaults to `true`. Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once it is loaded, or rejects if loading failed.\n   * The `Promise` will also reject if the `playbackObject` was already loaded. See below for details on `AVPlaybackStatus`.\n   */\n  loadAsync(\n    source: AVPlaybackSource,\n    initialStatus?: AVPlaybackStatusToSet,\n    downloadAsync?: boolean\n  ): Promise<AVPlaybackStatus>;\n\n  /**\n   * Unloads the media from memory. `loadAsync()` must be called again in order to be able to play the media.\n   * > This cleanup function will be automatically called in the `Video` component's `componentWillUnmount`.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once it is unloaded, or rejects if unloading failed.\n   */\n  unloadAsync(): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: true, positionMillis, seekMillisToleranceAfter: tolerances.seekMillisToleranceAfter, seekMillisToleranceBefore: tolerances.seekMillisToleranceBefore })`.\n   *\n   * Playback may not start immediately after calling this function for reasons such as buffering. Make sure to update your UI based\n   * on the `isPlaying` and `isBuffering` properties of the `AVPlaybackStatus`.\n   * @param positionMillis The desired position of playback in milliseconds.\n   * @param tolerances The tolerances are used only on iOS ([more details](#what-is-seek-tolerance-and-why-would)).\n   */\n  playFromPositionAsync(\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: false })`.\n   */\n  pauseAsync(): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: false, positionMillis: 0 })`.\n   */\n  stopAsync(): Promise<AVPlaybackStatus>;\n\n  /**\n   * Replays the playback item. When using `playFromPositionAsync(0)` the item is seeked to the position at `0 ms`.\n   * On iOS this method uses internal implementation of the player and is able to play the item from the beginning immediately.\n   * @param status The new `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the current playback status.\n   * `positionMillis` and `shouldPlay` properties will be overridden with respectively `0` and `true`.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once the new status has been set successfully,\n   * or rejects if setting the new status failed.\n   */\n  replayAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ positionMillis })`.\n   * @param positionMillis The desired position of playback in milliseconds.\n   * @param tolerances The tolerances are used only on iOS ([more details](#what-is-seek-tolerance-and-why-would)).\n   */\n  setPositionAsync(\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ rate, shouldCorrectPitch, pitchCorrectionQuality })`.\n   * @param rate The desired playback rate of the media. This value must be between `0.0` and `32.0`. Only available on Android API version 23 and later and iOS.\n   * @param shouldCorrectPitch A boolean describing if we should correct the pitch for a changed rate. If set to `true`, the pitch of the audio will be corrected\n   * (so a rate different than `1.0` will timestretch the audio).\n   * @param pitchCorrectionQuality iOS time pitch algorithm setting, defaults to `Audio.PitchCorrectionQuality.Low`.\n   */\n  setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ volume, audioPan })`.\n   * Note: `audioPan` is currently only supported on Android using `androidImplementation: 'MediaPlayer'`\n   * @param volume A number between `0.0` (silence) and `1.0` (maximum volume).\n   * @param audioPan A number between `-1.0` (full left) and `1.0` (full right).\n   */\n  setVolumeAsync(volume: number, audioPan?: number): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ isMuted })`.\n   * @param isMuted A boolean describing if the audio of this media should be muted.\n   */\n  setIsMutedAsync(isMuted: boolean): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ isLooping })`.\n   * @param isLooping A boolean describing if the media should play once (`false`) or loop indefinitely (`true`).\n   */\n  setIsLoopingAsync(isLooping: boolean): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ progressUpdateIntervalMillis })`.\n   * @param progressUpdateIntervalMillis The new minimum interval in milliseconds between calls of `onPlaybackStatusUpdate`.\n   * See `setOnPlaybackStatusUpdate()` for details.\n   */\n  setProgressUpdateIntervalAsync(progressUpdateIntervalMillis: number): Promise<AVPlaybackStatus>;\n}\n\n/**\n * @hidden\n * A mixin that defines common playback methods for A/V classes, so they implement the `Playback`\n * interface.\n */\nexport const PlaybackMixin = {\n  async playAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ shouldPlay: true });\n  },\n\n  async playFromPositionAsync(\n    positionMillis: number,\n    tolerances: AVPlaybackTolerance = {}\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      positionMillis,\n      shouldPlay: true,\n      seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n      seekMillisToleranceBefore: tolerances.toleranceMillisBefore,\n    });\n  },\n\n  async pauseAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ shouldPlay: false });\n  },\n\n  async stopAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ positionMillis: 0, shouldPlay: false });\n  },\n\n  async setPositionAsync(\n    positionMillis: number,\n    tolerances: AVPlaybackTolerance = {}\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      positionMillis,\n      seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n      seekMillisToleranceBefore: tolerances.toleranceMillisBefore,\n    });\n  },\n\n  async setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean = false,\n    pitchCorrectionQuality: PitchCorrectionQuality = PitchCorrectionQuality.Low\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      rate,\n      shouldCorrectPitch,\n      pitchCorrectionQuality,\n    });\n  },\n\n  async setVolumeAsync(volume: number, audioPan?: number): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ volume, audioPan });\n  },\n\n  async setIsMutedAsync(isMuted: boolean): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ isMuted });\n  },\n\n  async setIsLoopingAsync(isLooping: boolean): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ isLooping });\n  },\n\n  async setProgressUpdateIntervalAsync(\n    progressUpdateIntervalMillis: number\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ progressUpdateIntervalMillis });\n  },\n};\n\nexport * from './AV.types';\n"],"mappings":"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"}