{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_AV","_ExpoVideoManager","_interopRequireDefault","_ExponentAV","_ExponentVideo","_Video","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","_STYLES","StyleSheet","create","base","overflow","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoManager","ExpoVideoViewManager","Video","_React$Component","_inherits2","_super","props","_this","_classCallCheck2","_nativeRef","createRef","_onPlaybackStatusUpdate","_handleNewStatus","status","state","showPoster","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","_ref","_asyncToGenerator2","operation","current","Error","handle","findNodeHandle","_x","_setFullscreen","_ref2","value","tag","setFullscreen","_x2","presentFullscreenPlayer","dismissFullscreenPlayer","getStatusAsync","ExponentAV","getStatusForVideo","loadAsync","_ref6","initialStatus","undefined","downloadFirst","_yield$getNativeSourc","getNativeSourceAndFullInitialStatusForLoadAsync","nativeSource","fullInitialStatus","loadForVideo","_x3","unloadAsync","unloadForVideo","setStatusAsync","_ref8","assertStatusValuesInBounds","setStatusForVideo","_x4","replayAsync","replayVideo","shouldPlay","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","getUnloadedStatus","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onFullscreenUpdate","_renderPoster","_this$props$PosterCom","PosterComponent","Image","usePoster","createElement","style","posterStyle","posterSource","_createClass2","setNativeProps","nativeProps","nativeVideo","componentWillUnmount","catch","setOnPlaybackStatusUpdate","render","_this2","getNativeSourceFromSource","nativeResizeMode","ScaleNone","ResizeMode","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","prop","omit","concat","_toConsumableArray2","videoStyle","onStatusUpdate","View","pointerEvents","ExponentVideo","ref","Component","propNames","copied","propName","assign","PlaybackMixin","_default","exports"],"sources":["../src/Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackTolerance,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nclass Video extends React.Component<VideoProps, VideoState> implements Playback {\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // Fullscreening API\n\n  _setFullscreen = async (value: boolean): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  /**\n   * This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`,\n   * native controls will be visible in fullscreen mode.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  presentFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(true);\n  };\n\n  /**\n   * This dismisses the fullscreen video view.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  dismissFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(false);\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  /**\n   * @hidden\n   */\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const { nativeSource, fullInitialStatus } =\n      await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  /**\n   * Equivalent to setting URI to `null`.\n   * @hidden\n   */\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  componentWillUnmount() {\n    // Auto unload video to perform necessary cleanup safely\n    this.unloadAsync().catch(() => {\n      // Ignored rejection. Sometimes the unloadAsync code is executed when video is already unloaded.\n      // In such cases, it throws:\n      // \"[Unhandled promise rejection: Error: Invalid view returned from registry,\n      //  expecting EXVideo, got: (null)]\"\n    });\n  }\n\n  /**\n   * Set status API, only available while `isLoaded = true`.\n   * @hidden\n   */\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // Callback wrappers\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () => {\n    const PosterComponent = this.props.PosterComponent ?? Image;\n\n    return this.props.usePoster && this.state.showPoster ? (\n      <PosterComponent\n        style={[_STYLES.poster, this.props.posterStyle]}\n        source={this.props.posterSource!}\n      />\n    ) : null;\n  };\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach((prop) => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: [_STYLES.base, this.props.style],\n      videoStyle: [_STYLES.video, this.props.videoStyle],\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={nativeProps.videoStyle} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n\n// note(simek): TypeDoc cannot resolve correctly name of inline and default exported class\nexport default Video;\n"],"mappings":"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"}