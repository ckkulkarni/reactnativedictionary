b2aed28c2d8e420fe00325fb1a053c00
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sound = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _expoModulesCore = require("expo-modules-core");
var _AV = require("../AV");
var _ExponentAV = _interopRequireDefault(require("../ExponentAV"));
var _AudioAvailability = require("./AudioAvailability");
var _class;
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Sound = function () {
  function Sound() {
    var _this = this;
    (0, _classCallCheck2["default"])(this, Sound);
    (0, _defineProperty2["default"])(this, "_loaded", false);
    (0, _defineProperty2["default"])(this, "_loading", false);
    (0, _defineProperty2["default"])(this, "_key", null);
    (0, _defineProperty2["default"])(this, "_lastStatusUpdate", null);
    (0, _defineProperty2["default"])(this, "_lastStatusUpdateTime", null);
    (0, _defineProperty2["default"])(this, "_subscriptions", []);
    (0, _defineProperty2["default"])(this, "_eventEmitter", new _expoModulesCore.EventEmitter(_ExponentAV["default"]));
    (0, _defineProperty2["default"])(this, "_coalesceStatusUpdatesInMillis", 100);
    (0, _defineProperty2["default"])(this, "_onPlaybackStatusUpdate", null);
    (0, _defineProperty2["default"])(this, "_onMetadataUpdate", null);
    (0, _defineProperty2["default"])(this, "_onAudioSampleReceived", null);
    (0, _defineProperty2["default"])(this, "_internalStatusUpdateCallback", function (_ref) {
      var key = _ref.key,
        status = _ref.status;
      if (_this._key === key) {
        _this._callOnPlaybackStatusUpdateForNewStatus(status);
      }
    });
    (0, _defineProperty2["default"])(this, "_internalMetadataUpdateCallback", function (_ref2) {
      var key = _ref2.key,
        metadata = _ref2.metadata;
      if (_this._key === key) {
        var _this$_onMetadataUpda;
        (_this$_onMetadataUpda = _this._onMetadataUpdate) === null || _this$_onMetadataUpda === void 0 ? void 0 : _this$_onMetadataUpda.call(_this, metadata);
      }
    });
    (0, _defineProperty2["default"])(this, "_internalErrorCallback", function (_ref3) {
      var key = _ref3.key,
        error = _ref3.error;
      if (_this._key === key) {
        _this._errorCallback(error);
      }
    });
    (0, _defineProperty2["default"])(this, "_errorCallback", function (error) {
      _this._clearSubscriptions();
      _this._loaded = false;
      _this._key = null;
      _this._callOnPlaybackStatusUpdateForNewStatus((0, _AV.getUnloadedStatus)(error));
    });
    (0, _defineProperty2["default"])(this, "getStatusAsync", (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
      var status;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!_this._loaded) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return", _this._performOperationAndHandleStatusAsync(function () {
              return _ExponentAV["default"].getStatusForSound(_this._key);
            }));
          case 2:
            status = (0, _AV.getUnloadedStatus)();
            _this._callOnPlaybackStatusUpdateForNewStatus(status);
            return _context.abrupt("return", status);
          case 5:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })));
    (0, _defineProperty2["default"])(this, "playAsync", void 0);
    (0, _defineProperty2["default"])(this, "playFromPositionAsync", void 0);
    (0, _defineProperty2["default"])(this, "pauseAsync", void 0);
    (0, _defineProperty2["default"])(this, "stopAsync", void 0);
    (0, _defineProperty2["default"])(this, "setPositionAsync", void 0);
    (0, _defineProperty2["default"])(this, "setRateAsync", void 0);
    (0, _defineProperty2["default"])(this, "setVolumeAsync", void 0);
    (0, _defineProperty2["default"])(this, "setIsMutedAsync", void 0);
    (0, _defineProperty2["default"])(this, "setIsLoopingAsync", void 0);
    (0, _defineProperty2["default"])(this, "setProgressUpdateIntervalAsync", void 0);
  }
  (0, _createClass2["default"])(Sound, [{
    key: "_callOnPlaybackStatusUpdateForNewStatus",
    value: function _callOnPlaybackStatusUpdateForNewStatus(status) {
      var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;
      if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {
        this._onPlaybackStatusUpdate(status);
        this._lastStatusUpdateTime = new Date();
        this._lastStatusUpdate = JSON.stringify(status);
      }
    }
  }, {
    key: "_performOperationAndHandleStatusAsync",
    value: function () {
      var _performOperationAndHandleStatusAsync2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(operation) {
        var status;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              (0, _AudioAvailability.throwIfAudioIsDisabled)();
              if (!this._loaded) {
                _context2.next = 9;
                break;
              }
              _context2.next = 4;
              return operation();
            case 4:
              status = _context2.sent;
              this._callOnPlaybackStatusUpdateForNewStatus(status);
              return _context2.abrupt("return", status);
            case 9:
              throw new Error('Cannot complete operation because sound is not loaded.');
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function _performOperationAndHandleStatusAsync(_x) {
        return _performOperationAndHandleStatusAsync2.apply(this, arguments);
      }
      return _performOperationAndHandleStatusAsync;
    }()
  }, {
    key: "_updateAudioSampleReceivedCallback",
    value: function _updateAudioSampleReceivedCallback() {
      if (globalThis.__EXAV_setOnAudioSampleReceivedCallback == null) {
        if (_expoModulesCore.Platform.OS === 'ios' || _expoModulesCore.Platform.OS === 'android') {
          console.warn('expo-av: Failed to set up Audio Sample Buffer callback. ' + "Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? " + 'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.');
          return;
        } else {
          throw new _expoModulesCore.UnavailabilityError('expo-av', 'setOnAudioSampleReceived');
        }
      }
      if (this._key == null) {
        throw new Error('Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!');
      }
      if (typeof this._key !== 'number') {
        throw new Error("Cannot set Audio Sample Buffer callback when Sound instance key is of type ".concat((0, _typeof2["default"])(this._key), "! (expected: number)"));
      }
      globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);
    }
  }, {
    key: "_subscribeToNativeEvents",
    value: function _subscribeToNativeEvents() {
      if (this._loaded) {
        this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback), this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback));
        this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));
      }
    }
  }, {
    key: "_clearSubscriptions",
    value: function _clearSubscriptions() {
      this._subscriptions.forEach(function (e) {
        return e.remove();
      });
      this._subscriptions = [];
    }
  }, {
    key: "setOnPlaybackStatusUpdate",
    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {
      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;
      this.getStatusAsync();
    }
  }, {
    key: "setOnMetadataUpdate",
    value: function setOnMetadataUpdate(onMetadataUpdate) {
      this._onMetadataUpdate = onMetadataUpdate;
    }
  }, {
    key: "setOnAudioSampleReceived",
    value: function setOnAudioSampleReceived(callback) {
      this._onAudioSampleReceived = callback;
      if (this._key != null) {
        this._updateAudioSampleReceivedCallback();
      }
    }
  }, {
    key: "loadAsync",
    value: function () {
      var _loadAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(source) {
        var _this2 = this;
        var initialStatus,
          downloadFirst,
          _yield$getNativeSourc,
          nativeSource,
          fullInitialStatus,
          _args3 = arguments;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              initialStatus = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
              downloadFirst = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : true;
              (0, _AudioAvailability.throwIfAudioIsDisabled)();
              if (!this._loading) {
                _context3.next = 5;
                break;
              }
              throw new Error('The Sound is already loading.');
            case 5:
              if (this._loaded) {
                _context3.next = 15;
                break;
              }
              this._loading = true;
              _context3.next = 9;
              return (0, _AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst);
            case 9:
              _yield$getNativeSourc = _context3.sent;
              nativeSource = _yield$getNativeSourc.nativeSource;
              fullInitialStatus = _yield$getNativeSourc.fullInitialStatus;
              return _context3.abrupt("return", new Promise(function (resolve, reject) {
                var loadSuccess = function loadSuccess(result) {
                  var _result = (0, _slicedToArray2["default"])(result, 2),
                    key = _result[0],
                    status = _result[1];
                  _this2._key = key;
                  _this2._loaded = true;
                  _this2._loading = false;
                  _this2._subscribeToNativeEvents();
                  _this2._callOnPlaybackStatusUpdateForNewStatus(status);
                  resolve(status);
                };
                var loadError = function loadError(error) {
                  _this2._loading = false;
                  reject(error);
                };
                _ExponentAV["default"].loadForSound(nativeSource, fullInitialStatus).then(loadSuccess)["catch"](loadError);
              }));
            case 15:
              throw new Error('The Sound is already loaded.');
            case 16:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function loadAsync(_x2) {
        return _loadAsync.apply(this, arguments);
      }
      return loadAsync;
    }()
  }, {
    key: "unloadAsync",
    value: function () {
      var _unloadAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {
        var key, status;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!this._loaded) {
                _context4.next = 12;
                break;
              }
              this._loaded = false;
              key = this._key;
              this._key = null;
              _context4.next = 6;
              return _ExponentAV["default"].unloadForSound(key);
            case 6:
              status = _context4.sent;
              this._callOnPlaybackStatusUpdateForNewStatus(status);
              this._clearSubscriptions();
              return _context4.abrupt("return", status);
            case 12:
              return _context4.abrupt("return", this.getStatusAsync());
            case 13:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function unloadAsync() {
        return _unloadAsync.apply(this, arguments);
      }
      return unloadAsync;
    }()
  }, {
    key: "setStatusAsync",
    value: function () {
      var _setStatusAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5(status) {
        var _this3 = this;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              (0, _AV.assertStatusValuesInBounds)(status);
              return _context5.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                return _ExponentAV["default"].setStatusForSound(_this3._key, status);
              }));
            case 2:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function setStatusAsync(_x3) {
        return _setStatusAsync.apply(this, arguments);
      }
      return setStatusAsync;
    }()
  }, {
    key: "replayAsync",
    value: function () {
      var _replayAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6() {
        var _this4 = this;
        var status,
          _args6 = arguments;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              status = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
              if (!(status.positionMillis && status.positionMillis !== 0)) {
                _context6.next = 3;
                break;
              }
              throw new Error('Requested position after replay has to be 0.');
            case 3:
              return _context6.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                return _ExponentAV["default"].replaySound(_this4._key, _objectSpread(_objectSpread({}, status), {}, {
                  positionMillis: 0,
                  shouldPlay: true
                }));
              }));
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function replayAsync() {
        return _replayAsync.apply(this, arguments);
      }
      return replayAsync;
    }()
  }]);
  return Sound;
}();
exports.Sound = Sound;
_class = Sound;
(0, _defineProperty2["default"])(Sound, "create", function () {
  var _ref5 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7(source) {
    var initialStatus,
      onPlaybackStatusUpdate,
      downloadFirst,
      _args7 = arguments;
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};
          onPlaybackStatusUpdate = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : null;
          downloadFirst = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : true;
          console.warn("Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name");
          return _context7.abrupt("return", _class.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst));
        case 5:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return function (_x4) {
    return _ref5.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(Sound, "createAsync", function () {
  var _ref6 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8(source) {
    var initialStatus,
      onPlaybackStatusUpdate,
      downloadFirst,
      sound,
      status,
      _args8 = arguments;
    return _regenerator["default"].wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          initialStatus = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
          onPlaybackStatusUpdate = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : null;
          downloadFirst = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : true;
          sound = new _class();
          sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);
          _context8.next = 7;
          return sound.loadAsync(source, initialStatus, downloadFirst);
        case 7:
          status = _context8.sent;
          return _context8.abrupt("return", {
            sound: sound,
            status: status
          });
        case 9:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  }));
  return function (_x5) {
    return _ref6.apply(this, arguments);
  };
}());
Object.assign(Sound.prototype, _AV.PlaybackMixin);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,