{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_defineProperty2","_normalizeColor","_processColor","_Easing","_NativeAnimatedHelper","_AnimatedWithChildren2","_invariant","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","target","i","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","createNumericInterpolation","config","outputRange","inputRange","easing","Easing","linear","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","invariant","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","Infinity","numericComponentRegex","mapStringToNumericComponents","normalizedColor","normalizeColor","r","g","b","a","isColor","components","lastMatchEnd","match","exec","index","substring","parseFloat","createStringInterpolation","map","__DEV__","every","output","firstOutput","component","numericComponents","c","interpolations","_","values","interpolation","join","Math","round","checkValidRanges","checkInfiniteRange","checkValidInputRange","arr","message","String","name","AnimatedInterpolation","_AnimatedWithChildren","_super","parent","_this","_parent","_config","_getInterpolation","_interpolation","__makeNative","platformConfig","__getValue","parentValue","__attach","__addChild","__detach","__removeChild","__getNativeConfig","NativeAnimatedHelper","validateInterpolation","outputType","processedColor","processColor","transformDataType","type","AnimatedWithChildren"],"sources":["AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\nimport type AnimatedNode from './AnimatedNode';\n\nimport normalizeColor from '../../StyleSheet/normalizeColor';\nimport processColor from '../../StyleSheet/processColor';\nimport Easing from '../Easing';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport invariant from 'invariant';\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType<OutputT: number | string> = $ReadOnly<{\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<OutputT>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n}>;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createNumericInterpolation(\n  config: InterpolationConfigType<number>,\n): (input: number) => number {\n  const outputRange: $ReadOnlyArray<number> = (config.outputRange: any);\n  const inputRange = config.inputRange;\n\n  const easing = config.easing || Easing.linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return (interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    ): any);\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nconst numericComponentRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n// Maps string inputs an RGBA color or an array of numeric components\nfunction mapStringToNumericComponents(\n  input: string,\n):\n  | {isColor: true, components: [number, number, number, number]}\n  | {isColor: false, components: $ReadOnlyArray<number | string>} {\n  let normalizedColor = normalizeColor(input);\n  invariant(\n    normalizedColor == null || typeof normalizedColor !== 'object',\n    'PlatformColors are not supported',\n  );\n\n  if (typeof normalizedColor === 'number') {\n    normalizedColor = normalizedColor || 0;\n    const r = (normalizedColor & 0xff000000) >>> 24;\n    const g = (normalizedColor & 0x00ff0000) >>> 16;\n    const b = (normalizedColor & 0x0000ff00) >>> 8;\n    const a = (normalizedColor & 0x000000ff) / 255;\n    return {isColor: true, components: [r, g, b, a]};\n  } else {\n    const components: Array<string | number> = [];\n    let lastMatchEnd = 0;\n    let match: RegExp$matchResult;\n    while ((match = (numericComponentRegex.exec(input): any)) != null) {\n      if (match.index > lastMatchEnd) {\n        components.push(input.substring(lastMatchEnd, match.index));\n      }\n      components.push(parseFloat(match[0]));\n      lastMatchEnd = match.index + match[0].length;\n    }\n    invariant(\n      components.length > 0,\n      'outputRange must contain color or value with numeric component',\n    );\n    if (lastMatchEnd < input.length) {\n      components.push(input.substring(lastMatchEnd, input.length));\n    }\n    return {isColor: false, components};\n  }\n}\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createStringInterpolation(\n  config: InterpolationConfigType<string>,\n): (input: number) => string {\n  invariant(config.outputRange.length >= 2, 'Bad output range');\n  const outputRange = config.outputRange.map(mapStringToNumericComponents);\n\n  const isColor = outputRange[0].isColor;\n  if (__DEV__) {\n    invariant(\n      outputRange.every(output => output.isColor === isColor),\n      'All elements of output range should either be a color or a string with numeric components',\n    );\n    const firstOutput = outputRange[0].components;\n    invariant(\n      outputRange.every(\n        output => output.components.length === firstOutput.length,\n      ),\n      'All elements of output range should have the same number of components',\n    );\n    invariant(\n      outputRange.every(output =>\n        output.components.every(\n          (component, i) =>\n            // $FlowIgnoreMe[invalid-compare]\n            typeof component === 'number' || component === firstOutput[i],\n        ),\n      ),\n      'All elements of output range should have the same non-numeric components',\n    );\n  }\n\n  const numericComponents: $ReadOnlyArray<$ReadOnlyArray<number>> =\n    outputRange.map(output =>\n      isColor\n        ? // $FlowIgnoreMe[incompatible-call]\n          output.components\n        : // $FlowIgnoreMe[incompatible-call]\n          output.components.filter(c => typeof c === 'number'),\n    );\n  const interpolations = numericComponents[0].map((_, i) =>\n    createNumericInterpolation({\n      ...config,\n      outputRange: numericComponents.map(components => components[i]),\n    }),\n  );\n  if (!isColor) {\n    return input => {\n      const values = interpolations.map(interpolation => interpolation(input));\n      let i = 0;\n      return outputRange[0].components\n        .map(c => (typeof c === 'number' ? values[i++] : c))\n        .join('');\n    };\n  } else {\n    return input => {\n      const result = interpolations.map((interpolation, i) => {\n        const value = interpolation(input);\n        // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n        // round the opacity (4th column).\n        return i < 3 ? Math.round(value) : Math.round(value * 1000) / 1000;\n      });\n      return `rgba(${result[0]}, ${result[1]}, ${result[2]}, ${result[3]})`;\n    };\n  }\n}\n\nfunction findRange(input: number, inputRange: $ReadOnlyArray<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidRanges<OutputT: number | string>(\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<OutputT>,\n) {\n  checkInfiniteRange('outputRange', outputRange);\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange (' +\n      inputRange.length +\n      ') and outputRange (' +\n      outputRange.length +\n      ') must have the same length',\n  );\n}\n\nfunction checkValidInputRange(arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  const message =\n    'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\n\nfunction checkInfiniteRange<OutputT: number | string>(\n  name: string,\n  arr: $ReadOnlyArray<OutputT>,\n) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n     * below this comment, one or both of the operands may be something that\n     * doesn't cleanly convert to a string, like undefined, null, and object,\n     * etc. If you really mean this implicit string conversion, you can do\n     * something like String(myThing) */\n    // $FlowFixMe[unsafe-addition]\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nexport default class AnimatedInterpolation<\n  OutputT: number | string,\n> extends AnimatedWithChildren {\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType<OutputT>;\n  _interpolation: ?(input: number) => OutputT;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType<OutputT>) {\n    super();\n    this._parent = parent;\n    this._config = config;\n\n    if (__DEV__) {\n      checkValidRanges(config.inputRange, config.outputRange);\n\n      // Create interpolation eagerly in dev, so we can signal errors faster\n      // even when using the native driver\n      this._getInterpolation();\n    }\n  }\n\n  _getInterpolation(): number => OutputT {\n    if (!this._interpolation) {\n      const config = this._config;\n      if (config.outputRange && typeof config.outputRange[0] === 'string') {\n        this._interpolation = (createStringInterpolation((config: any)): any);\n      } else {\n        this._interpolation = (createNumericInterpolation((config: any)): any);\n      }\n    }\n    return this._interpolation;\n  }\n\n  __makeNative(platformConfig: ?PlatformConfig) {\n    this._parent.__makeNative(platformConfig);\n    super.__makeNative(platformConfig);\n  }\n\n  __getValue(): OutputT {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._getInterpolation()(parentValue);\n  }\n\n  interpolate<NewOutputT: number | string>(\n    config: InterpolationConfigType<NewOutputT>,\n  ): AnimatedInterpolation<NewOutputT> {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n    let outputRange = this._config.outputRange;\n    let outputType = null;\n    if (typeof outputRange[0] === 'string') {\n      // $FlowIgnoreMe[incompatible-cast]\n      outputRange = ((outputRange: $ReadOnlyArray<string>).map(value => {\n        const processedColor = processColor(value);\n        if (typeof processedColor === 'number') {\n          outputType = 'color';\n          return processedColor;\n        } else {\n          return NativeAnimatedHelper.transformDataType(value);\n        }\n      }): any);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      outputRange,\n      outputType,\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n"],"mappings":"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"}