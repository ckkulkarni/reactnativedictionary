c9e4fc5b24ab6cafa86dae680870792f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  setAudioModeAsync: true,
  setIsEnabledAsync: true,
  PitchCorrectionQuality: true
};
Object.defineProperty(exports, "PitchCorrectionQuality", {
  enumerable: true,
  get: function get() {
    return _AV.PitchCorrectionQuality;
  }
});
exports.setAudioModeAsync = setAudioModeAsync;
Object.defineProperty(exports, "setIsEnabledAsync", {
  enumerable: true,
  get: function get() {
    return _AudioAvailability.setIsEnabledAsync;
  }
});
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Audio = require("./Audio.types");
var _ExponentAV = _interopRequireDefault(require("./ExponentAV"));
var _Recording = require("./Audio/Recording");
Object.keys(_Recording).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Recording[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Recording[key];
    }
  });
});
var _Sound = require("./Audio/Sound");
Object.keys(_Sound).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Sound[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Sound[key];
    }
  });
});
var _AudioAvailability = require("./Audio/AudioAvailability");
var _AV = require("./AV");
var _populateMissingKeys = function _populateMissingKeys(userAudioMode, defaultAudioMode) {
  for (var key in defaultAudioMode) {
    if (!userAudioMode.hasOwnProperty(key)) {
      userAudioMode[key] = defaultAudioMode[key];
    }
  }
  return userAudioMode;
};
var defaultMode = {
  allowsRecordingIOS: false,
  interruptionModeIOS: _Audio.InterruptionModeIOS.MixWithOthers,
  playsInSilentModeIOS: false,
  staysActiveInBackground: false,
  interruptionModeAndroid: _Audio.InterruptionModeAndroid.DuckOthers,
  shouldDuckAndroid: true,
  playThroughEarpieceAndroid: false
};
var currentAudioMode = null;
function getCurrentAudioMode() {
  if (!currentAudioMode) {
    return defaultMode;
  }
  return currentAudioMode;
}
function setAudioModeAsync(_x) {
  return _setAudioModeAsync.apply(this, arguments);
}
function _setAudioModeAsync() {
  _setAudioModeAsync = (0, _asyncToGenerator2.default)(function* (partialMode) {
    var mode = _populateMissingKeys(partialMode, getCurrentAudioMode());
    if (!_Audio.InterruptionModeIOS[mode.interruptionModeIOS]) {
      throw new Error(`"interruptionModeIOS" was set to an invalid value.`);
    }
    if (!_Audio.InterruptionModeAndroid[mode.interruptionModeAndroid]) {
      throw new Error(`"interruptionModeAndroid" was set to an invalid value.`);
    }
    if (typeof mode.allowsRecordingIOS !== 'boolean' || typeof mode.playsInSilentModeIOS !== 'boolean' || typeof mode.staysActiveInBackground !== 'boolean' || typeof mode.shouldDuckAndroid !== 'boolean' || typeof mode.playThroughEarpieceAndroid !== 'boolean') {
      throw new Error('"allowsRecordingIOS", "playsInSilentModeIOS", "playThroughEarpieceAndroid", "staysActiveInBackground" and "shouldDuckAndroid" must be booleans.');
    }
    currentAudioMode = mode;
    return yield _ExponentAV.default.setAudioMode(mode);
  });
  return _setAudioModeAsync.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQXVkaW8iLCJyZXF1aXJlIiwiX0V4cG9uZW50QVYiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX1JlY29yZGluZyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX2V4cG9ydE5hbWVzIiwiZXhwb3J0cyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIl9Tb3VuZCIsIl9BdWRpb0F2YWlsYWJpbGl0eSIsIl9BViIsIl9wb3B1bGF0ZU1pc3NpbmdLZXlzIiwidXNlckF1ZGlvTW9kZSIsImRlZmF1bHRBdWRpb01vZGUiLCJkZWZhdWx0TW9kZSIsImFsbG93c1JlY29yZGluZ0lPUyIsImludGVycnVwdGlvbk1vZGVJT1MiLCJJbnRlcnJ1cHRpb25Nb2RlSU9TIiwiTWl4V2l0aE90aGVycyIsInBsYXlzSW5TaWxlbnRNb2RlSU9TIiwic3RheXNBY3RpdmVJbkJhY2tncm91bmQiLCJpbnRlcnJ1cHRpb25Nb2RlQW5kcm9pZCIsIkludGVycnVwdGlvbk1vZGVBbmRyb2lkIiwiRHVja090aGVycyIsInNob3VsZER1Y2tBbmRyb2lkIiwicGxheVRocm91Z2hFYXJwaWVjZUFuZHJvaWQiLCJjdXJyZW50QXVkaW9Nb2RlIiwiZ2V0Q3VycmVudEF1ZGlvTW9kZSIsInNldEF1ZGlvTW9kZUFzeW5jIiwiX3giLCJfc2V0QXVkaW9Nb2RlQXN5bmMiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJwYXJ0aWFsTW9kZSIsIm1vZGUiLCJFcnJvciIsIkV4cG9uZW50QVYiLCJzZXRBdWRpb01vZGUiXSwic291cmNlcyI6WyIuLi9zcmMvQXVkaW8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXVkaW9Nb2RlLCBJbnRlcnJ1cHRpb25Nb2RlQW5kcm9pZCwgSW50ZXJydXB0aW9uTW9kZUlPUyB9IGZyb20gJy4vQXVkaW8udHlwZXMnO1xuaW1wb3J0IEV4cG9uZW50QVYgZnJvbSAnLi9FeHBvbmVudEFWJztcblxuZXhwb3J0ICogZnJvbSAnLi9BdWRpby9SZWNvcmRpbmcnO1xuZXhwb3J0ICogZnJvbSAnLi9BdWRpby9Tb3VuZCc7XG5leHBvcnQgeyBzZXRJc0VuYWJsZWRBc3luYyB9IGZyb20gJy4vQXVkaW8vQXVkaW9BdmFpbGFiaWxpdHknO1xuZXhwb3J0IHsgUGl0Y2hDb3JyZWN0aW9uUXVhbGl0eSB9IGZyb20gJy4vQVYnO1xuXG5jb25zdCBfcG9wdWxhdGVNaXNzaW5nS2V5cyA9IChcbiAgdXNlckF1ZGlvTW9kZTogUGFydGlhbDxBdWRpb01vZGU+LFxuICBkZWZhdWx0QXVkaW9Nb2RlOiBBdWRpb01vZGVcbik6IEF1ZGlvTW9kZSA9PiB7XG4gIGZvciAoY29uc3Qga2V5IGluIGRlZmF1bHRBdWRpb01vZGUpIHtcbiAgICBpZiAoIXVzZXJBdWRpb01vZGUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdXNlckF1ZGlvTW9kZVtrZXldID0gZGVmYXVsdEF1ZGlvTW9kZVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdXNlckF1ZGlvTW9kZSBhcyBBdWRpb01vZGU7XG59O1xuXG5jb25zdCBkZWZhdWx0TW9kZTogQXVkaW9Nb2RlID0ge1xuICBhbGxvd3NSZWNvcmRpbmdJT1M6IGZhbHNlLFxuICBpbnRlcnJ1cHRpb25Nb2RlSU9TOiBJbnRlcnJ1cHRpb25Nb2RlSU9TLk1peFdpdGhPdGhlcnMsXG4gIHBsYXlzSW5TaWxlbnRNb2RlSU9TOiBmYWxzZSxcbiAgc3RheXNBY3RpdmVJbkJhY2tncm91bmQ6IGZhbHNlLFxuICBpbnRlcnJ1cHRpb25Nb2RlQW5kcm9pZDogSW50ZXJydXB0aW9uTW9kZUFuZHJvaWQuRHVja090aGVycyxcbiAgc2hvdWxkRHVja0FuZHJvaWQ6IHRydWUsXG4gIHBsYXlUaHJvdWdoRWFycGllY2VBbmRyb2lkOiBmYWxzZSxcbn07XG5cbmxldCBjdXJyZW50QXVkaW9Nb2RlOiBBdWRpb01vZGUgfCBudWxsID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0Q3VycmVudEF1ZGlvTW9kZSgpOiBBdWRpb01vZGUge1xuICBpZiAoIWN1cnJlbnRBdWRpb01vZGUpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1vZGU7XG4gIH1cbiAgcmV0dXJuIGN1cnJlbnRBdWRpb01vZGU7XG59XG5cbi8qKlxuICogV2UgcHJvdmlkZSB0aGlzIEFQSSB0byBjdXN0b21pemUgdGhlIGF1ZGlvIGV4cGVyaWVuY2Ugb24gaU9TIGFuZCBBbmRyb2lkLlxuICogQHBhcmFtIHBhcnRpYWxNb2RlXG4gKiBAcmV0dXJuIEEgYFByb21pc2VgIHRoYXQgd2lsbCByZWplY3QgaWYgdGhlIGF1ZGlvIG1vZGUgY291bGQgbm90IGJlIGVuYWJsZWQgZm9yIHRoZSBkZXZpY2UuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXRBdWRpb01vZGVBc3luYyhwYXJ0aWFsTW9kZTogUGFydGlhbDxBdWRpb01vZGU+KTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IG1vZGUgPSBfcG9wdWxhdGVNaXNzaW5nS2V5cyhwYXJ0aWFsTW9kZSwgZ2V0Q3VycmVudEF1ZGlvTW9kZSgpKTtcblxuICBpZiAoIUludGVycnVwdGlvbk1vZGVJT1NbbW9kZS5pbnRlcnJ1cHRpb25Nb2RlSU9TXSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgXCJpbnRlcnJ1cHRpb25Nb2RlSU9TXCIgd2FzIHNldCB0byBhbiBpbnZhbGlkIHZhbHVlLmApO1xuICB9XG4gIGlmICghSW50ZXJydXB0aW9uTW9kZUFuZHJvaWRbbW9kZS5pbnRlcnJ1cHRpb25Nb2RlQW5kcm9pZF0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFwiaW50ZXJydXB0aW9uTW9kZUFuZHJvaWRcIiB3YXMgc2V0IHRvIGFuIGludmFsaWQgdmFsdWUuYCk7XG4gIH1cbiAgaWYgKFxuICAgIHR5cGVvZiBtb2RlLmFsbG93c1JlY29yZGluZ0lPUyAhPT0gJ2Jvb2xlYW4nIHx8XG4gICAgdHlwZW9mIG1vZGUucGxheXNJblNpbGVudE1vZGVJT1MgIT09ICdib29sZWFuJyB8fFxuICAgIHR5cGVvZiBtb2RlLnN0YXlzQWN0aXZlSW5CYWNrZ3JvdW5kICE9PSAnYm9vbGVhbicgfHxcbiAgICB0eXBlb2YgbW9kZS5zaG91bGREdWNrQW5kcm9pZCAhPT0gJ2Jvb2xlYW4nIHx8XG4gICAgdHlwZW9mIG1vZGUucGxheVRocm91Z2hFYXJwaWVjZUFuZHJvaWQgIT09ICdib29sZWFuJ1xuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnXCJhbGxvd3NSZWNvcmRpbmdJT1NcIiwgXCJwbGF5c0luU2lsZW50TW9kZUlPU1wiLCBcInBsYXlUaHJvdWdoRWFycGllY2VBbmRyb2lkXCIsIFwic3RheXNBY3RpdmVJbkJhY2tncm91bmRcIiBhbmQgXCJzaG91bGREdWNrQW5kcm9pZFwiIG11c3QgYmUgYm9vbGVhbnMuJ1xuICAgICk7XG4gIH1cbiAgY3VycmVudEF1ZGlvTW9kZSA9IG1vZGU7XG4gIHJldHVybiBhd2FpdCBFeHBvbmVudEFWLnNldEF1ZGlvTW9kZShtb2RlKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFFQSxJQUFBRyxVQUFBLEdBQUFILE9BQUE7QUFBQUksTUFBQSxDQUFBQyxJQUFBLENBQUFGLFVBQUEsRUFBQUcsT0FBQSxXQUFBQyxHQUFBO0VBQUEsSUFBQUEsR0FBQSxrQkFBQUEsR0FBQTtFQUFBLElBQUFILE1BQUEsQ0FBQUksU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQUMsWUFBQSxFQUFBSixHQUFBO0VBQUEsSUFBQUEsR0FBQSxJQUFBSyxPQUFBLElBQUFBLE9BQUEsQ0FBQUwsR0FBQSxNQUFBSixVQUFBLENBQUFJLEdBQUE7RUFBQUgsTUFBQSxDQUFBUyxjQUFBLENBQUFELE9BQUEsRUFBQUwsR0FBQTtJQUFBTyxV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