a009dd373e668bd98d72cab90c4344c6
_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
_getJestObj().mock("axios");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _native = require("@react-navigation/native");
var _reactNative = require("@testing-library/react-native");
var _jestCucumber = require("jest-cucumber");
require("react-native-get-random-values");
var _axios = _interopRequireDefault(require("axios"));
var _Details = _interopRequireDefault(require("../../Details"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
var feature = (0, _jestCucumber.loadFeature)("Apps/features/details.feature");
(0, _jestCucumber.defineFeature)(feature, function (test) {
  test("User views word details with phonetics and meanings", function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then;
    var mockRoute = {
      params: {
        word: {
          word: "Example"
        }
      }
    };
    var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Details.default, {
      route: mockRoute
    }));
    given("The user is on the Details page", function () {
      jest.spyOn(_axios.default, "get").mockResolvedValueOnce({
        data: [{
          word: "example",
          phonetics: [{
            text: "/ɪɡˈzæmpəl/",
            audio: "example-audio.mp3"
          }],
          meanings: [{
            partOfSpeech: "noun",
            definitions: [{
              definition: "a representative form or pattern",
              example: "I followed your example",
              synonyms: ["model", "pattern", "prototype"]
            }]
          }]
        }]
      });
    });
    when("The user views the details for a word", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        expect(screen.getByText("Example")).toBeDefined();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9uYXRpdmUiLCJfcmVhY3ROYXRpdmUiLCJfamVzdEN1Y3VtYmVyIiwiX2F4aW9zIiwiX0RldGFpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwibmF2aWdhdGlvbiIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiX3JlZiIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJtb2NrUm91dGUiLCJwYXJhbXMiLCJ3b3JkIiwic2NyZWVuIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsInJvdXRlIiwic3B5T24iLCJheGlvcyIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsImRhdGEiLCJwaG9uZXRpY3MiLCJ0ZXh0IiwiYXVkaW8iLCJtZWFuaW5ncyIsInBhcnRPZlNwZWVjaCIsImRlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsImV4YW1wbGUiLCJzeW5vbnltcyIsIndhaXRGb3IiLCJleHBlY3QiLCJnZXRCeVRleHQiLCJ0b0JlRGVmaW5lZCJdLCJzb3VyY2VzIjpbImRldGFpbHMuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU5hdmlnYXRpb24gfSBmcm9tIFwiQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlXCI7XHJcbmltcG9ydCB7IE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3AgfSBmcm9tIFwiQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrXCI7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCB7IGxvYWRGZWF0dXJlLCBkZWZpbmVGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IFwicmVhY3QtbmF0aXZlLWdldC1yYW5kb20tdmFsdWVzXCI7XHJcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XHJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0IERldGFpbHMgZnJvbSBcIi4uLy4uL0RldGFpbHNcIjtcclxuY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb248TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcDxhbnk+PigpO1xyXG5qZXN0Lm1vY2soXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmVcIiwgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5qZXN0Lm1vY2soXCJheGlvc1wiKTtcclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKFwiQXBwcy9mZWF0dXJlcy9kZXRhaWxzLmZlYXR1cmVcIik7XHJcblxyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsICh0ZXN0KSA9PiB7XHJcbiAgdGVzdChcIlVzZXIgdmlld3Mgd29yZCBkZXRhaWxzIHdpdGggcGhvbmV0aWNzIGFuZCBtZWFuaW5nc1wiLCAoe1xyXG4gICAgZ2l2ZW4sXHJcbiAgICB3aGVuLFxyXG4gICAgdGhlbixcclxuICB9KSA9PiB7XHJcbiAgICBjb25zdCBtb2NrUm91dGUgPSB7IHBhcmFtczogeyB3b3JkOiB7IHdvcmQ6IFwiRXhhbXBsZVwiIH0gfSB9O1xyXG4gICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKDxEZXRhaWxzIHJvdXRlPXttb2NrUm91dGV9IC8+KTtcclxuXHJcbiAgICBnaXZlbihcIlRoZSB1c2VyIGlzIG9uIHRoZSBEZXRhaWxzIHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBqZXN0LnNweU9uKGF4aW9zLCBcImdldFwiKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xyXG4gICAgICAgIGRhdGE6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgd29yZDogXCJleGFtcGxlXCIsXHJcbiAgICAgICAgICAgIHBob25ldGljczogW1xyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiL8mqyaHLiHrDpm1wyZlsL1wiLFxyXG4gICAgICAgICAgICAgICAgYXVkaW86IFwiZXhhbXBsZS1hdWRpby5tcDNcIixcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBtZWFuaW5nczogW1xyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhcnRPZlNwZWVjaDogXCJub3VuXCIsXHJcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbjogXCJhIHJlcHJlc2VudGF0aXZlIGZvcm0gb3IgcGF0dGVyblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IFwiSSBmb2xsb3dlZCB5b3VyIGV4YW1wbGVcIixcclxuICAgICAgICAgICAgICAgICAgICBzeW5vbnltczogW1wibW9kZWxcIiwgXCJwYXR0ZXJuXCIsIFwicHJvdG90eXBlXCJdLFxyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHdoZW4oXCJUaGUgdXNlciB2aWV3cyB0aGUgZGV0YWlscyBmb3IgYSB3b3JkXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCJFeGFtcGxlXCIpKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFTQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDcEIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFDRkosV0FBQSxHQUFLQyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQUMsSUFBQU0sc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFoQm5CLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUVBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLGFBQUEsR0FBQUosT0FBQTtBQUNBQSxPQUFBO0FBRUEsSUFBQUssTUFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sUUFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQW9DLElBQUFPLFdBQUEsR0FBQVAsT0FBQTtBQUFBLFNBQUFSLFlBQUE7RUFBQSxJQUFBZ0IsUUFBQSxHQUFBUixPQUFBO0lBQUFMLElBQUEsR0FBQWEsUUFBQSxDQUFBYixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUNwQyxJQUFNYyxVQUFVLEdBQUcsSUFBQWYscUJBQWEsRUFBaUMsQ0FBQztBQVNsRSxJQUFNZ0IsT0FBTyxHQUFHLElBQUFDLHlCQUFXLEVBQUMsK0JBQStCLENBQUM7QUFFNUQsSUFBQUMsMkJBQWEsRUFBQ0YsT0FBTyxFQUFFLFVBQUNHLElBQUksRUFBSztFQUMvQkEsSUFBSSxDQUFDLHFEQUFxRCxFQUFFLFVBQUFDLElBQUEsRUFJdEQ7SUFBQSxJQUhKQyxLQUFLLEdBQUFELElBQUEsQ0FBTEMsS0FBSztNQUNMQyxJQUFJLEdBQUFGLElBQUEsQ0FBSkUsSUFBSTtNQUNKQyxJQUFJLEdBQUFILElBQUEsQ0FBSkcsSUFBSTtJQUVKLElBQU1DLFNBQVMsR0FBRztNQUFFQyxNQUFNLEVBQUU7UUFBRUMsSUFBSSxFQUFFO1VBQUVBLElBQUksRUFBRTtRQUFVO01BQUU7SUFBRSxDQUFDO0lBQzNELElBQU1DLE1BQU0sR0FBRyxJQUFBQyxtQkFBTSxFQUFDLElBQUFmLFdBQUEsQ0FBQWdCLEdBQUEsRUFBQ2pCLFFBQUEsQ0FBQWtCLE9BQU87TUFBQ0MsS0FBSyxFQUFFUDtJQUFVLENBQUUsQ0FBQyxDQUFDO0lBRXBESCxLQUFLLENBQUMsaUNBQWlDLEVBQUUsWUFBTTtNQUM3Q3BCLElBQUksQ0FBQytCLEtBQUssQ0FBQ0MsY0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDQyxxQkFBcUIsQ0FBQztRQUM3Q0MsSUFBSSxFQUFFLENBQ0o7VUFDRVQsSUFBSSxFQUFFLFNBQVM7VUFDZlUsU0FBUyxFQUFFLENBQ1Q7WUFDRUMsSUFBSSxFQUFFLGFBQWE7WUFDbkJDLEtBQUssRUFBRTtVQUNULENBQUMsQ0FDRjtVQUNEQyxRQUFRLEVBQUUsQ0FDUjtZQUNFQyxZQUFZLEVBQUUsTUFBTTtZQUNwQkMsV0FBVyxFQUFFLENBQ1g7Y0FDRUMsVUFBVSxFQUFFLGtDQUFrQztjQUM5Q0MsT0FBTyxFQUFFLHlCQUF5QjtjQUNsQ0MsUUFBUSxFQUFFLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXO1lBQzVDLENBQUM7VUFFTCxDQUFDO1FBRUwsQ0FBQztNQUVMLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGdEIsSUFBSSxDQUFDLHVDQUF1QyxNQUFBZixrQkFBQSxDQUFBdUIsT0FBQSxFQUFFLGFBQVk7TUFDeEQsTUFBTSxJQUFBZSxvQkFBTyxFQUFDLFlBQU07UUFDbEJDLE1BQU0sQ0FBQ25CLE1BQU0sQ0FBQ29CLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQztNQUNuRCxDQUFDLENBQUM7SUFDSixDQUFDLEVBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==