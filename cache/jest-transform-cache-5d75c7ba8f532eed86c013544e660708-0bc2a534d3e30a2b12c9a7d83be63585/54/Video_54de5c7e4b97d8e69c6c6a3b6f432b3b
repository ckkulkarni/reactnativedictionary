fab632e8553678f124c19c674d975b01
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _AV = require("./AV");
var _ExpoVideoManager = _interopRequireDefault(require("./ExpoVideoManager"));
var _ExponentAV = _interopRequireDefault(require("./ExponentAV"));
var _ExponentVideo = _interopRequireDefault(require("./ExponentVideo"));
var _Video = require("./Video.types");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var _STYLES = _reactNative.StyleSheet.create({
  base: {
    overflow: 'hidden'
  },
  poster: {
    position: 'absolute',
    left: 0,
    top: 0,
    right: 0,
    bottom: 0,
    resizeMode: 'contain'
  },
  video: {
    position: 'absolute',
    left: 0,
    top: 0,
    right: 0,
    bottom: 0
  }
});
var ExpoVideoManagerConstants = _ExpoVideoManager.default;
var ExpoVideoViewManager = _ExpoVideoManager.default;
var Video = function (_React$Component) {
  (0, _inherits2.default)(Video, _React$Component);
  var _super = _createSuper(Video);
  function Video(props) {
    var _this;
    (0, _classCallCheck2.default)(this, Video);
    _this = _super.call(this, props);
    _this._nativeRef = React.createRef();
    _this._onPlaybackStatusUpdate = null;
    _this._handleNewStatus = function (status) {
      if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {
        _this.setState({
          showPoster: false
        });
      }
      if (_this.props.onPlaybackStatusUpdate) {
        _this.props.onPlaybackStatusUpdate(status);
      }
      if (_this._onPlaybackStatusUpdate) {
        _this._onPlaybackStatusUpdate(status);
      }
    };
    _this._performOperationAndHandleStatusAsync = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (operation) {
        var video = _this._nativeRef.current;
        if (!video) {
          throw new Error(`Cannot complete operation because the Video component has not yet loaded`);
        }
        var handle = (0, _reactNative.findNodeHandle)(_this._nativeRef.current);
        var status = yield operation(handle);
        _this._handleNewStatus(status);
        return status;
      });
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
    _this._setFullscreen = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* (value) {
        return _this._performOperationAndHandleStatusAsync(function (tag) {
          return ExpoVideoViewManager.setFullscreen(tag, value);
        });
      });
      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }();
    _this.presentFullscreenPlayer = (0, _asyncToGenerator2.default)(function* () {
      return _this._setFullscreen(true);
    });
    _this.dismissFullscreenPlayer = (0, _asyncToGenerator2.default)(function* () {
      return _this._setFullscreen(false);
    });
    _this.getStatusAsync = (0, _asyncToGenerator2.default)(function* () {
      return _this._performOperationAndHandleStatusAsync(function (tag) {
        return _ExponentAV.default.getStatusForVideo(tag);
      });
    });
    _this.loadAsync = function () {
      var _ref6 = (0, _asyncToGenerator2.default)(function* (source) {
        var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var _yield$getNativeSourc = yield (0, _AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst),
          nativeSource = _yield$getNativeSourc.nativeSource,
          fullInitialStatus = _yield$getNativeSourc.fullInitialStatus;
        return _this._performOperationAndHandleStatusAsync(function (tag) {
          return _ExponentAV.default.loadForVideo(tag, nativeSource, fullInitialStatus);
        });
      });
      return function (_x3) {
        return _ref6.apply(this, arguments);
      };
    }();
    _this.unloadAsync = (0, _asyncToGenerator2.default)(function* () {
      return _this._performOperationAndHandleStatusAsync(function (tag) {
        return _ExponentAV.default.unloadForVideo(tag);
      });
    });
    _this.setStatusAsync = function () {
      var _ref8 = (0, _asyncToGenerator2.default)(function* (status) {
        (0, _AV.assertStatusValuesInBounds)(status);
        return _this._performOperationAndHandleStatusAsync(function (tag) {
          return _ExponentAV.default.setStatusForVideo(tag, status);
        });
      });
      return function (_x4) {
        return _ref8.apply(this, arguments);
      };
    }();
    _this.replayAsync = (0, _asyncToGenerator2.default)(function* () {
      var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (status.positionMillis && status.positionMillis !== 0) {
        throw new Error('Requested position after replay has to be 0.');
      }
      return _this._performOperationAndHandleStatusAsync(function (tag) {
        return _ExponentAV.default.replayVideo(tag, _objectSpread(_objectSpread({}, status), {}, {
          positionMillis: 0,
          shouldPlay: true
        }));
      });
    });
    _this._nativeOnPlaybackStatusUpdate = function (event) {
      _this._handleNewStatus(event.nativeEvent);
    };
    _this._nativeOnLoadStart = function () {
      if (_this.props.onLoadStart) {
        _this.props.onLoadStart();
      }
    };
    _this._nativeOnLoad = function (event) {
      if (_this.props.onLoad) {
        _this.props.onLoad(event.nativeEvent);
      }
      _this._handleNewStatus(event.nativeEvent);
    };
    _this._nativeOnError = function (event) {
      var error = event.nativeEvent.error;
      if (_this.props.onError) {
        _this.props.onError(error);
      }
      _this._handleNewStatus((0, _AV.getUnloadedStatus)(error));
    };
    _this._nativeOnReadyForDisplay = function (event) {
      if (_this.props.onReadyForDisplay) {
        _this.props.onReadyForDisplay(event.nativeEvent);
      }
    };
    _this._nativeOnFullscreenUpdate = function (event) {
      if (_this.props.onFullscreenUpdate) {
        _this.props.onFullscreenUpdate(event.nativeEvent);
      }
    };
    _this._renderPoster = function () {
      var _this$props$PosterCom;
      var PosterComponent = (_this$props$PosterCom = _this.props.PosterComponent) != null ? _this$props$PosterCom : _reactNative.Image;
      return _this.props.usePoster && _this.state.showPoster ? React.createElement(PosterComponent, {
        style: [_STYLES.poster, _this.props.posterStyle],
        source: _this.props.posterSource
      }) : null;
    };
    _this.state = {
      showPoster: !!props.usePoster
    };
    return _this;
  }
  (0, _createClass2.default)(Video, [{
    key: "setNativeProps",
    value: function setNativeProps(nativeProps) {
      var nativeVideo = this._nativeRef.current;
      if (!nativeVideo) throw new Error(`native video reference is not defined.`);
      nativeVideo.setNativeProps(nativeProps);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unloadAsync().catch(function () {});
    }
  }, {
    key: "setOnPlaybackStatusUpdate",
    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {
      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;
      this.getStatusAsync();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var source = (0, _AV.getNativeSourceFromSource)(this.props.source) || undefined;
      var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;
      if (this.props.resizeMode) {
        var resizeMode = this.props.resizeMode;
        if (resizeMode === _Video.ResizeMode.STRETCH) {
          nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;
        } else if (resizeMode === _Video.ResizeMode.CONTAIN) {
          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;
        } else if (resizeMode === _Video.ResizeMode.COVER) {
          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;
        }
      }
      var status = _objectSpread({}, this.props.status);
      ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {
        if (prop in _this2.props) {
          status[prop] = _this2.props[prop];
        }
      });
      var nativeProps = _objectSpread(_objectSpread({}, omit(this.props, ['source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', 'posterStyle'].concat((0, _toConsumableArray2.default)(Object.keys(status))))), {}, {
        style: [_STYLES.base, this.props.style],
        videoStyle: [_STYLES.video, this.props.videoStyle],
        source: source,
        resizeMode: nativeResizeMode,
        status: status,
        onStatusUpdate: this._nativeOnPlaybackStatusUpdate,
        onLoadStart: this._nativeOnLoadStart,
        onLoad: this._nativeOnLoad,
        onError: this._nativeOnError,
        onReadyForDisplay: this._nativeOnReadyForDisplay,
        onFullscreenUpdate: this._nativeOnFullscreenUpdate
      });
      return React.createElement(_reactNative.View, {
        style: nativeProps.style,
        pointerEvents: "box-none"
      }, React.createElement(_ExponentVideo.default, _objectSpread(_objectSpread({
        ref: this._nativeRef
      }, nativeProps), {}, {
        style: nativeProps.videoStyle
      })), this._renderPoster());
    }
  }]);
  return Video;
}(React.Component);
function omit(props, propNames) {
  var copied = _objectSpread({}, props);
  for (var propName of propNames) {
    delete copied[propName];
  }
  return copied;
}
Object.assign(Video.prototype, _AV.PlaybackMixin);
var _default = Video;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,