be260f5d8d5f762ff76987c7a47f57d0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AppOwnership", {
  enumerable: true,
  get: function get() {
    return _Constants.AppOwnership;
  }
});
Object.defineProperty(exports, "ExecutionEnvironment", {
  enumerable: true,
  get: function get() {
    return _Constants.ExecutionEnvironment;
  }
});
Object.defineProperty(exports, "UserInterfaceIdiom", {
  enumerable: true,
  get: function get() {
    return _Constants.UserInterfaceIdiom;
  }
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _expoModulesCore = require("expo-modules-core");
var _reactNative = require("react-native");
var _Constants = require("./Constants.types");
var _ExponentConstants = _interopRequireDefault(require("./ExponentConstants"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
if (!_ExponentConstants["default"]) {
  console.warn("No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?");
}
var rawManifest = null;
if (_expoModulesCore.NativeModulesProxy.ExpoUpdates) {
  var updatesManifest;
  if (_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifest) {
    updatesManifest = _expoModulesCore.NativeModulesProxy.ExpoUpdates.manifest;
  } else if (_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifestString) {
    updatesManifest = JSON.parse(_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifestString);
  }
  if (updatesManifest && Object.keys(updatesManifest).length > 0) {
    rawManifest = updatesManifest;
  }
}
if (_reactNative.NativeModules.EXDevLauncher) {
  var devLauncherManifest;
  if (_reactNative.NativeModules.EXDevLauncher.manifestString) {
    devLauncherManifest = JSON.parse(_reactNative.NativeModules.EXDevLauncher.manifestString);
  }
  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {
    rawManifest = devLauncherManifest;
  }
}
if (!rawManifest && _ExponentConstants["default"] && _ExponentConstants["default"].manifest) {
  rawManifest = _ExponentConstants["default"].manifest;
  if (typeof rawManifest === 'string') {
    rawManifest = JSON.parse(rawManifest);
  }
}
var _ref = _ExponentConstants["default"] || {},
  name = _ref.name,
  appOwnership = _ref.appOwnership,
  nativeConstants = (0, _objectWithoutProperties2["default"])(_ref, ["name", "appOwnership"]);
var warnedAboutManifestField = false;
var constants = _objectSpread(_objectSpread({}, nativeConstants), {}, {
  appOwnership: appOwnership !== null && appOwnership !== void 0 ? appOwnership : null
});
Object.defineProperties(constants, {
  installationId: {
    get: function get() {
      return nativeConstants.installationId;
    },
    enumerable: false
  },
  __unsafeNoWarnManifest: {
    get: function get() {
      var maybeManifest = getManifest(true);
      if (!maybeManifest || !isAppManifest(maybeManifest)) {
        return null;
      }
      return maybeManifest;
    },
    enumerable: false
  },
  __unsafeNoWarnManifest2: {
    get: function get() {
      var maybeManifest = getManifest(true);
      if (!maybeManifest || !isManifest(maybeManifest)) {
        return null;
      }
      return maybeManifest;
    },
    enumerable: false
  },
  manifest: {
    get: function get() {
      if (__DEV__ && !warnedAboutManifestField) {
        console.warn("Constants.manifest has been deprecated in favor of Constants.expoConfig.");
        warnedAboutManifestField = true;
      }
      var maybeManifest = getManifest();
      if (!maybeManifest || !isAppManifest(maybeManifest)) {
        return null;
      }
      return maybeManifest;
    },
    enumerable: true
  },
  manifest2: {
    get: function get() {
      var maybeManifest = getManifest();
      if (!maybeManifest || !isManifest(maybeManifest)) {
        return null;
      }
      return maybeManifest;
    },
    enumerable: true
  },
  expoConfig: {
    get: function get() {
      var maybeManifest = getManifest(true);
      if (!maybeManifest) {
        return null;
      }
      if (isManifest(maybeManifest)) {
        var _maybeManifest$extra$, _maybeManifest$extra;
        return (_maybeManifest$extra$ = (_maybeManifest$extra = maybeManifest.extra) === null || _maybeManifest$extra === void 0 ? void 0 : _maybeManifest$extra.expoClient) !== null && _maybeManifest$extra$ !== void 0 ? _maybeManifest$extra$ : null;
      } else if (isAppManifest(maybeManifest)) {
        return maybeManifest;
      }
      return null;
    },
    enumerable: true
  },
  expoGoConfig: {
    get: function get() {
      var maybeManifest = getManifest(true);
      if (!maybeManifest) {
        return null;
      }
      if (isManifest(maybeManifest)) {
        var _maybeManifest$extra$2, _maybeManifest$extra2;
        return (_maybeManifest$extra$2 = (_maybeManifest$extra2 = maybeManifest.extra) === null || _maybeManifest$extra2 === void 0 ? void 0 : _maybeManifest$extra2.expoGo) !== null && _maybeManifest$extra$2 !== void 0 ? _maybeManifest$extra$2 : null;
      } else if (isAppManifest(maybeManifest)) {
        return maybeManifest;
      }
      return null;
    },
    enumerable: true
  },
  easConfig: {
    get: function get() {
      var maybeManifest = getManifest(true);
      if (!maybeManifest) {
        return null;
      }
      if (isManifest(maybeManifest)) {
        var _maybeManifest$extra$3, _maybeManifest$extra3;
        return (_maybeManifest$extra$3 = (_maybeManifest$extra3 = maybeManifest.extra) === null || _maybeManifest$extra3 === void 0 ? void 0 : _maybeManifest$extra3.eas) !== null && _maybeManifest$extra$3 !== void 0 ? _maybeManifest$extra$3 : null;
      } else if (isAppManifest(maybeManifest)) {
        return maybeManifest;
      }
      return null;
    },
    enumerable: true
  },
  __rawManifest_TEST: {
    get: function get() {
      return rawManifest;
    },
    set: function set(value) {
      rawManifest = value;
    },
    enumerable: false
  }
});
function isAppManifest(manifest) {
  return !isManifest(manifest);
}
function isManifest(manifest) {
  return 'metadata' in manifest;
}
function getManifest() {
  var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  if (!rawManifest) {
    var invalidManifestType = rawManifest === null ? 'null' : 'undefined';
    if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Bare && _reactNative.Platform.OS !== 'web') {
      if (!suppressWarning) {
        console.warn("Constants.manifest is ".concat(invalidManifestType, " because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest."));
      }
    } else if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Standalone) {
      throw new _expoModulesCore.CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', "Constants.manifest is ".concat(invalidManifestType, ", must be an object."));
    }
  }
  return rawManifest;
}
var _default = constants;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,