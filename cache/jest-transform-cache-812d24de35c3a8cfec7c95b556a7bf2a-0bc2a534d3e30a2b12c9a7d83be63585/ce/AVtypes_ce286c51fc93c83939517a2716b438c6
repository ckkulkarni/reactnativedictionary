aa6fc5d751d9d93fcea834b2fdb80361
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PitchCorrectionQuality = void 0;
var _ExponentAV = _interopRequireDefault(require("./ExponentAV"));
var PitchCorrectionQuality;
exports.PitchCorrectionQuality = PitchCorrectionQuality;
(function (PitchCorrectionQuality) {
  PitchCorrectionQuality[PitchCorrectionQuality["Low"] = _ExponentAV["default"] && _ExponentAV["default"].Qualities && _ExponentAV["default"].Qualities.Low] = "Low";
  PitchCorrectionQuality[PitchCorrectionQuality["Medium"] = _ExponentAV["default"] && _ExponentAV["default"].Qualities && _ExponentAV["default"].Qualities.Medium] = "Medium";
  PitchCorrectionQuality[PitchCorrectionQuality["High"] = _ExponentAV["default"] && _ExponentAV["default"].Qualities && _ExponentAV["default"].Qualities.High] = "High";
})(PitchCorrectionQuality || (exports.PitchCorrectionQuality = PitchCorrectionQuality = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,