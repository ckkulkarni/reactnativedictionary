1ddf65c56a9617652089be454fd71690
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveUri = resolveUri;
exports.selectAssetSource = selectAssetSource;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _expoModulesCore = require("expo-modules-core");
var _pathBrowserify = _interopRequireDefault(require("path-browserify"));
var _reactNative = require("react-native");
var _urlParse = _interopRequireDefault(require("url-parse"));
var _AssetSourceResolver = _interopRequireDefault(require("./AssetSourceResolver"));
var _PlatformUtils = require("./PlatformUtils");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var assetMapOverride = (0, _PlatformUtils.getManifest)().assetMapOverride;
function selectAssetSource(meta) {
  var _manifest2$extra, _manifest2$extra$expo;
  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {
    meta = _objectSpread(_objectSpread({}, meta), assetMapOverride[meta.hash]);
  }
  var scale = _AssetSourceResolver.default.pickScale(meta.scales, _reactNative.PixelRatio.get());
  var index = meta.scales.findIndex(function (s) {
    return s === scale;
  });
  var hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;
  var uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;
  if (uri) {
    return {
      uri: resolveUri(uri),
      hash: hash
    };
  }
  var assetUrlOverride = (0, _PlatformUtils.getManifest)().assetUrlOverride;
  if (assetUrlOverride) {
    var _uri = _pathBrowserify.default.join(assetUrlOverride, hash);
    return {
      uri: resolveUri(_uri),
      hash: hash
    };
  }
  var fileScale = scale === 1 ? '' : `@${scale}x`;
  var fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';
  var suffix = `/${encodeURIComponent(meta.name)}${fileScale}${fileExtension}?platform=${encodeURIComponent(_expoModulesCore.Platform.OS)}&hash=${encodeURIComponent(meta.hash)}`;
  if (/^https?:\/\//.test(meta.httpServerLocation)) {
    var _uri2 = meta.httpServerLocation + suffix;
    return {
      uri: _uri2,
      hash: hash
    };
  }
  var manifest2 = (0, _PlatformUtils.getManifest2)();
  if (manifest2 != null && (_manifest2$extra = manifest2.extra) != null && (_manifest2$extra$expo = _manifest2$extra.expoGo) != null && _manifest2$extra$expo.developer) {
    var baseUrl = new _urlParse.default(`http://${manifest2.extra.expoGo.debuggerHost}`);
    baseUrl.set('pathname', meta.httpServerLocation + suffix);
    return {
      uri: baseUrl.href,
      hash: hash
    };
  }
  if ((0, _PlatformUtils.getManifest)().developer) {
    var _baseUrl = new _urlParse.default((0, _PlatformUtils.getManifest)().bundleUrl);
    _baseUrl.set('pathname', meta.httpServerLocation + suffix);
    return {
      uri: _baseUrl.href,
      hash: hash
    };
  }
  return {
    uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,
    hash: hash
  };
}
function resolveUri(uri) {
  if (!_PlatformUtils.manifestBaseUrl) {
    return uri;
  }
  var _URL = new _urlParse.default(uri),
    protocol = _URL.protocol;
  if (protocol !== '') {
    return uri;
  }
  var baseUrl = new _urlParse.default(_PlatformUtils.manifestBaseUrl);
  var resolvedPath = uri.startsWith('/') ? uri : _pathBrowserify.default.join(baseUrl.pathname, uri);
  baseUrl.set('pathname', resolvedPath);
  return baseUrl.href;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,