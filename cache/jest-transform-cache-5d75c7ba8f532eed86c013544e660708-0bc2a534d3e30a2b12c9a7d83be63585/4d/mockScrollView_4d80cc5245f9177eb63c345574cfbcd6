5acbba74b1424acd07dd6297dd1e57bf
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var React = require('react');
var View = require("../Libraries/Components/View/View");
var requireNativeComponent = require("../Libraries/ReactNative/requireNativeComponent").default;
var RCTScrollView = requireNativeComponent('RCTScrollView');
function mockScrollView(BaseComponent) {
  var ScrollViewMock = function (_BaseComponent) {
    (0, _inherits2.default)(ScrollViewMock, _BaseComponent);
    var _super = _createSuper(ScrollViewMock);
    function ScrollViewMock() {
      (0, _classCallCheck2.default)(this, ScrollViewMock);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(ScrollViewMock, [{
      key: "render",
      value: function render() {
        return (0, _jsxRuntime.jsxs)(RCTScrollView, _objectSpread(_objectSpread({}, this.props), {}, {
          children: [this.props.refreshControl, (0, _jsxRuntime.jsx)(View, {
            children: this.props.children
          })]
        }));
      }
    }]);
    return ScrollViewMock;
  }(BaseComponent);
  return ScrollViewMock;
}
module.exports = mockScrollView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2NyZWF0ZUNsYXNzMiIsIl9pbmhlcml0czIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX2pzeFJ1bnRpbWUiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImZvckVhY2giLCJrZXkiLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJyZXN1bHQiLCJOZXdUYXJnZXQiLCJjb25zdHJ1Y3RvciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwiUmVhY3QiLCJWaWV3IiwicmVxdWlyZU5hdGl2ZUNvbXBvbmVudCIsIlJDVFNjcm9sbFZpZXciLCJtb2NrU2Nyb2xsVmlldyIsIkJhc2VDb21wb25lbnQiLCJTY3JvbGxWaWV3TW9jayIsIl9CYXNlQ29tcG9uZW50IiwiX3N1cGVyIiwidmFsdWUiLCJyZW5kZXIiLCJqc3hzIiwicHJvcHMiLCJjaGlsZHJlbiIsInJlZnJlc2hDb250cm9sIiwianN4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIm1vY2tTY3JvbGxWaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4vKiBlc2xpbnQtZW52IGplc3QgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBWaWV3ID0gcmVxdWlyZSgnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3Jyk7XG5cbmNvbnN0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgPVxuICByZXF1aXJlKCcuLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCcpLmRlZmF1bHQ7XG5jb25zdCBSQ1RTY3JvbGxWaWV3OiAkRmxvd0ZpeE1lID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnUkNUU2Nyb2xsVmlldycpO1xuXG5mdW5jdGlvbiBtb2NrU2Nyb2xsVmlldyhCYXNlQ29tcG9uZW50OiAkRmxvd0ZpeE1lKSB7XG4gIGNsYXNzIFNjcm9sbFZpZXdNb2NrIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCk6IFJlYWN0LkVsZW1lbnQ8dHlwZW9mIFJDVFNjcm9sbFZpZXc+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxSQ1RTY3JvbGxWaWV3IHsuLi50aGlzLnByb3BzfT5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5yZWZyZXNoQ29udHJvbH1cbiAgICAgICAgICA8Vmlldz57dGhpcy5wcm9wcy5jaGlsZHJlbn08L1ZpZXc+XG4gICAgICAgIDwvUkNUU2Nyb2xsVmlldz5cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBTY3JvbGxWaWV3TW9jaztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSAobW9ja1Njcm9sbFZpZXc6ICRGbG93Rml4TWUpO1xuIl0sIm1hcHBpbmdzIjoiQUFZQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsZ0JBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFHLGFBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFJLFVBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLDJCQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSxnQkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQU8sV0FBQSxHQUFBUCxPQUFBO0FBQUEsU0FBQVEsUUFBQUMsTUFBQSxFQUFBQyxjQUFBLFFBQUFDLElBQUEsR0FBQUMsTUFBQSxDQUFBRCxJQUFBLENBQUFGLE1BQUEsT0FBQUcsTUFBQSxDQUFBQyxxQkFBQSxRQUFBQyxPQUFBLEdBQUFGLE1BQUEsQ0FBQUMscUJBQUEsQ0FBQUosTUFBQSxHQUFBQyxjQUFBLEtBQUFJLE9BQUEsR0FBQUEsT0FBQSxDQUFBQyxNQUFBLFdBQUFDLEdBQUEsV0FBQUosTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixNQUFBLEVBQUFPLEdBQUEsRUFBQUUsVUFBQSxPQUFBUCxJQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxJQUFBLEVBQUFHLE9BQUEsWUFBQUgsSUFBQTtBQUFBLFNBQUFVLGNBQUFDLE1BQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUFBRixDQUFBLFVBQUFHLE1BQUEsV0FBQUYsU0FBQSxDQUFBRCxDQUFBLElBQUFDLFNBQUEsQ0FBQUQsQ0FBQSxRQUFBQSxDQUFBLE9BQUFmLE9BQUEsQ0FBQUksTUFBQSxDQUFBYyxNQUFBLE9BQUFDLE9BQUEsV0FBQUMsR0FBQSxRQUFBM0IsZ0JBQUEsQ0FBQTRCLE9BQUEsRUFBQVAsTUFBQSxFQUFBTSxHQUFBLEVBQUFGLE1BQUEsQ0FBQUUsR0FBQSxTQUFBaEIsTUFBQSxDQUFBa0IseUJBQUEsR0FBQWxCLE1BQUEsQ0FBQW1CLGdCQUFBLENBQUFULE1BQUEsRUFBQVYsTUFBQSxDQUFBa0IseUJBQUEsQ0FBQUosTUFBQSxLQUFBbEIsT0FBQSxDQUFBSSxNQUFBLENBQUFjLE1BQUEsR0FBQUMsT0FBQSxXQUFBQyxHQUFBLElBQUFoQixNQUFBLENBQUFvQixjQUFBLENBQUFWLE1BQUEsRUFBQU0sR0FBQSxFQUFBaEIsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUyxNQUFBLEVBQUFFLEdBQUEsaUJBQUFOLE1BQUE7QUFBQSxTQUFBVyxhQUFBQyxPQUFBLFFBQUFDLHlCQUFBLEdBQUFDLHlCQUFBLG9CQUFBQyxxQkFBQSxRQUFBQyxLQUFBLE9BQUFoQyxnQkFBQSxDQUFBdUIsT0FBQSxFQUFBSyxPQUFBLEdBQUFLLE1BQUEsTUFBQUoseUJBQUEsUUFBQUssU0FBQSxPQUFBbEMsZ0JBQUEsQ0FBQXVCLE9BQUEsUUFBQVksV0FBQSxFQUFBRixNQUFBLEdBQUFHLE9BQUEsQ0FBQUMsU0FBQSxDQUFBTCxLQUFBLEVBQUFkLFNBQUEsRUFBQWdCLFNBQUEsWUFBQUQsTUFBQSxHQUFBRCxLQUFBLENBQUFsQixLQUFBLE9BQUFJLFNBQUEsZ0JBQUFuQiwyQkFBQSxDQUFBd0IsT0FBQSxRQUFBVSxNQUFBO0FBQUEsU0FBQUgsMEJBQUEsZUFBQU0sT0FBQSxxQkFBQUEsT0FBQSxDQUFBQyxTQUFBLG9CQUFBRCxPQUFBLENBQUFDLFNBQUEsQ0FBQUMsSUFBQSwyQkFBQUMsS0FBQSxvQ0FBQUMsT0FBQSxDQUFBQyxTQUFBLENBQUFDLE9BQUEsQ0FBQUMsSUFBQSxDQUFBUCxPQUFBLENBQUFDLFNBQUEsQ0FBQUcsT0FBQSw4Q0FBQUksQ0FBQTtBQUViLElBQU1DLEtBQUssR0FBR25ELE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsSUFBTW9ELElBQUksR0FBR3BELE9BQU8sb0NBQW9DLENBQUM7QUFFekQsSUFBTXFELHNCQUFzQixHQUMxQnJELE9BQU8sa0RBQWtELENBQUMsQ0FBQzZCLE9BQU87QUFDcEUsSUFBTXlCLGFBQXlCLEdBQUdELHNCQUFzQixDQUFDLGVBQWUsQ0FBQztBQUV6RSxTQUFTRSxjQUFjQSxDQUFDQyxhQUF5QixFQUFFO0VBQUEsSUFDM0NDLGNBQWMsYUFBQUMsY0FBQTtJQUFBLElBQUF0RCxVQUFBLENBQUF5QixPQUFBLEVBQUE0QixjQUFBLEVBQUFDLGNBQUE7SUFBQSxJQUFBQyxNQUFBLEdBQUExQixZQUFBLENBQUF3QixjQUFBO0lBQUEsU0FBQUEsZUFBQTtNQUFBLElBQUF2RCxnQkFBQSxDQUFBMkIsT0FBQSxRQUFBNEIsY0FBQTtNQUFBLE9BQUFFLE1BQUEsQ0FBQXZDLEtBQUEsT0FBQUksU0FBQTtJQUFBO0lBQUEsSUFBQXJCLGFBQUEsQ0FBQTBCLE9BQUEsRUFBQTRCLGNBQUE7TUFBQTdCLEdBQUE7TUFBQWdDLEtBQUEsRUFDbEIsU0FBQUMsT0FBQSxFQUE4QztRQUM1QyxPQUNFLElBQUF0RCxXQUFBLENBQUF1RCxJQUFBLEVBQUNSLGFBQWEsRUFBQWpDLGFBQUEsQ0FBQUEsYUFBQSxLQUFLLElBQUksQ0FBQzBDLEtBQUs7VUFBQUMsUUFBQSxHQUMxQixJQUFJLENBQUNELEtBQUssQ0FBQ0UsY0FBYyxFQUMxQixJQUFBMUQsV0FBQSxDQUFBMkQsR0FBQSxFQUFDZCxJQUFJO1lBQUFZLFFBQUEsRUFBRSxJQUFJLENBQUNELEtBQUssQ0FBQ0M7VUFBUSxDQUFPLENBQUM7UUFBQSxFQUNyQixDQUFDO01BRXBCO0lBQUM7SUFBQSxPQUFBUCxjQUFBO0VBQUEsRUFSMEJELGFBQWE7RUFVMUMsT0FBT0MsY0FBYztBQUN2QjtBQUVBVSxNQUFNLENBQUNDLE9BQU8sR0FBSWIsY0FBMkIifQ==