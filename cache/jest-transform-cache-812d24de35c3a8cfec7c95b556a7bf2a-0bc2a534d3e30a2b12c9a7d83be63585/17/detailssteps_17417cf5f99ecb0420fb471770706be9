2afa5569b9a682e80ad8a23591b1d4b6
_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _native = require("@react-navigation/native");
var _reactNative = require("@testing-library/react-native");
var _jestCucumber = require("jest-cucumber");
require("react-native-get-random-values");
var _axios = _interopRequireDefault(require("axios"));
var _Details = _interopRequireDefault(require("../../Details"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
var feature = (0, _jestCucumber.loadFeature)("Apps/features/details.feature");
(0, _jestCucumber.defineFeature)(feature, function (test) {
  test("User views word details with phonetics and meanings", function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    var mockRoute = {
      params: {
        word: {
          word: "Example"
        }
      }
    };
    var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Details.default, {
      route: mockRoute
    }));
    given("The user is on the Details page", (0, _asyncToGenerator2.default)(function* () {
      _getJestObj().mock("axios");
      expect(screen).toBeDefined();
      jest.spyOn(_axios.default, "get").mockResolvedValueOnce({
        data: [{
          word: "example",
          phonetics: [{
            text: "/ɪɡˈzæmpəl/",
            audio: "example-audio.mp3"
          }],
          meanings: [{
            partOfSpeech: "noun",
            definitions: [{
              definition: "a representative form or pattern",
              example: "I followed your example",
              synonyms: ["model", "pattern", "prototype"]
            }]
          }]
        }]
      });
    }));
    when("The user views the details for a word", function () {
      expect(screen.getByText("Example")).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9uYXRpdmUiLCJfcmVhY3ROYXRpdmUiLCJfamVzdEN1Y3VtYmVyIiwiX2F4aW9zIiwiX0RldGFpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwibmF2aWdhdGlvbiIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiX3JlZiIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJhbmQiLCJtb2NrUm91dGUiLCJwYXJhbXMiLCJ3b3JkIiwic2NyZWVuIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsInJvdXRlIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJzcHlPbiIsImF4aW9zIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZGF0YSIsInBob25ldGljcyIsInRleHQiLCJhdWRpbyIsIm1lYW5pbmdzIiwicGFydE9mU3BlZWNoIiwiZGVmaW5pdGlvbnMiLCJkZWZpbml0aW9uIiwiZXhhbXBsZSIsInN5bm9ueW1zIiwiZ2V0QnlUZXh0Il0sInNvdXJjZXMiOlsiZGV0YWlscy5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTmF2aWdhdGlvbiB9IGZyb20gXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmVcIjtcclxuaW1wb3J0IHsgTmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcCB9IGZyb20gXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2tcIjtcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmVcIjtcclxuaW1wb3J0IHsgbG9hZEZlYXR1cmUsIGRlZmluZUZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgXCJyZWFjdC1uYXRpdmUtZ2V0LXJhbmRvbS12YWx1ZXNcIjtcclxuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgRGV0YWlscyBmcm9tIFwiLi4vLi4vRGV0YWlsc1wiO1xyXG5jb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcbmplc3QubW9jayhcIkByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZVwiLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcIkFwcHMvZmVhdHVyZXMvZGV0YWlscy5mZWF0dXJlXCIpO1xyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsICh0ZXN0KSA9PiB7XHJcbiAgdGVzdChcIlVzZXIgdmlld3Mgd29yZCBkZXRhaWxzIHdpdGggcGhvbmV0aWNzIGFuZCBtZWFuaW5nc1wiLCAoe1xyXG4gICAgZ2l2ZW4sXHJcbiAgICB3aGVuLFxyXG4gICAgdGhlbixcclxuICAgIGFuZCxcclxuICB9KSA9PiB7XHJcbiAgICBjb25zdCBtb2NrUm91dGUgPSB7IHBhcmFtczogeyB3b3JkOiB7IHdvcmQ6IFwiRXhhbXBsZVwiIH0gfSB9O1xyXG4gICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKDxEZXRhaWxzIHJvdXRlPXttb2NrUm91dGV9IC8+KTtcclxuXHJcbiAgICBnaXZlbihcIlRoZSB1c2VyIGlzIG9uIHRoZSBEZXRhaWxzIHBhZ2VcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICBqZXN0Lm1vY2soXCJheGlvc1wiKTtcclxuICAgICAgamVzdC5zcHlPbihheGlvcywgXCJnZXRcIikubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgICAgICBkYXRhOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHdvcmQ6IFwiZXhhbXBsZVwiLFxyXG4gICAgICAgICAgICBwaG9uZXRpY3M6IFtcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIi/Jqsmhy4h6w6ZtcMmZbC9cIixcclxuICAgICAgICAgICAgICAgIGF1ZGlvOiBcImV4YW1wbGUtYXVkaW8ubXAzXCIsXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgbWVhbmluZ3M6IFtcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0T2ZTcGVlY2g6IFwibm91blwiLFxyXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb246IFwiYSByZXByZXNlbnRhdGl2ZSBmb3JtIG9yIHBhdHRlcm5cIixcclxuICAgICAgICAgICAgICAgICAgICBleGFtcGxlOiBcIkkgZm9sbG93ZWQgeW91ciBleGFtcGxlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3lub255bXM6IFtcIm1vZGVsXCIsIFwicGF0dGVyblwiLCBcInByb3RvdHlwZVwiXSxcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB3aGVuKFwiVGhlIHVzZXIgdmlld3MgdGhlIGRldGFpbHMgZm9yIGEgd29yZFwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiRXhhbXBsZVwiKSkudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFTQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDcEIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQyxJQUFBRyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWZILElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUVBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLGFBQUEsR0FBQUosT0FBQTtBQUNBQSxPQUFBO0FBRUEsSUFBQUssTUFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sUUFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQW9DLElBQUFPLFdBQUEsR0FBQVAsT0FBQTtBQUFBLFNBQUFSLFlBQUE7RUFBQSxJQUFBZ0IsUUFBQSxHQUFBUixPQUFBO0lBQUFMLElBQUEsR0FBQWEsUUFBQSxDQUFBYixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUNwQyxJQUFNYyxVQUFVLEdBQUcsSUFBQWYscUJBQWEsRUFBaUMsQ0FBQztBQVFsRSxJQUFNZ0IsT0FBTyxHQUFHLElBQUFDLHlCQUFXLEVBQUMsK0JBQStCLENBQUM7QUFDNUQsSUFBQUMsMkJBQWEsRUFBQ0YsT0FBTyxFQUFFLFVBQUNHLElBQUksRUFBSztFQUMvQkEsSUFBSSxDQUFDLHFEQUFxRCxFQUFFLFVBQUFDLElBQUEsRUFLdEQ7SUFBQSxJQUpKQyxLQUFLLEdBQUFELElBQUEsQ0FBTEMsS0FBSztNQUNMQyxJQUFJLEdBQUFGLElBQUEsQ0FBSkUsSUFBSTtNQUNKQyxJQUFJLEdBQUFILElBQUEsQ0FBSkcsSUFBSTtNQUNKQyxHQUFHLEdBQUFKLElBQUEsQ0FBSEksR0FBRztJQUVILElBQU1DLFNBQVMsR0FBRztNQUFFQyxNQUFNLEVBQUU7UUFBRUMsSUFBSSxFQUFFO1VBQUVBLElBQUksRUFBRTtRQUFVO01BQUU7SUFBRSxDQUFDO0lBQzNELElBQU1DLE1BQU0sR0FBRyxJQUFBQyxtQkFBTSxFQUFDLElBQUFoQixXQUFBLENBQUFpQixHQUFBLEVBQUNsQixRQUFBLENBQUFtQixPQUFPO01BQUNDLEtBQUssRUFBRVA7SUFBVSxDQUFFLENBQUMsQ0FBQztJQUVwREosS0FBSyxDQUFDLGlDQUFpQyxNQUFBZCxrQkFBQSxDQUFBd0IsT0FBQSxFQUFFLGFBQVk7TUFFbkRqQyxXQUFBLEdBQUtDLElBQUksQ0FBQyxPQUFPLENBQUM7TUFEbEJrQyxNQUFNLENBQUNMLE1BQU0sQ0FBQyxDQUFDTSxXQUFXLENBQUMsQ0FBQztNQUU1QmpDLElBQUksQ0FBQ2tDLEtBQUssQ0FBQ0MsY0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDQyxxQkFBcUIsQ0FBQztRQUM3Q0MsSUFBSSxFQUFFLENBQ0o7VUFDRVgsSUFBSSxFQUFFLFNBQVM7VUFDZlksU0FBUyxFQUFFLENBQ1Q7WUFDRUMsSUFBSSxFQUFFLGFBQWE7WUFDbkJDLEtBQUssRUFBRTtVQUNULENBQUMsQ0FDRjtVQUNEQyxRQUFRLEVBQUUsQ0FDUjtZQUNFQyxZQUFZLEVBQUUsTUFBTTtZQUNwQkMsV0FBVyxFQUFFLENBQ1g7Y0FDRUMsVUFBVSxFQUFFLGtDQUFrQztjQUM5Q0MsT0FBTyxFQUFFLHlCQUF5QjtjQUNsQ0MsUUFBUSxFQUFFLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXO1lBQzVDLENBQUM7VUFFTCxDQUFDO1FBRUwsQ0FBQztNQUVMLENBQUMsQ0FBQztJQUNKLENBQUMsRUFBQztJQUVGekIsSUFBSSxDQUFDLHVDQUF1QyxFQUFFLFlBQU07TUFDbERXLE1BQU0sQ0FBQ0wsTUFBTSxDQUFDb0IsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUNkLFdBQVcsQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9