0fbbb8dd63e8dc601fa0acc3ad3ab80a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cacheDirectory = exports.bundledAssets = exports.bundleDirectory = exports.UploadTask = exports.StorageAccessFramework = exports.FileSystemCancellableNetworkTask = exports.DownloadResumable = void 0;
exports.copyAsync = copyAsync;
exports.createDownloadResumable = createDownloadResumable;
exports.createUploadTask = createUploadTask;
exports.deleteAsync = deleteAsync;
exports.deleteLegacyDocumentDirectoryAndroid = deleteLegacyDocumentDirectoryAndroid;
exports.documentDirectory = void 0;
exports.downloadAsync = downloadAsync;
exports.getContentUriAsync = getContentUriAsync;
exports.getFreeDiskStorageAsync = getFreeDiskStorageAsync;
exports.getInfoAsync = getInfoAsync;
exports.getTotalDiskCapacityAsync = getTotalDiskCapacityAsync;
exports.makeDirectoryAsync = makeDirectoryAsync;
exports.moveAsync = moveAsync;
exports.readAsStringAsync = readAsStringAsync;
exports.readDirectoryAsync = readDirectoryAsync;
exports.uploadAsync = uploadAsync;
exports.writeAsStringAsync = writeAsStringAsync;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _expoModulesCore = require("expo-modules-core");
var _reactNative = require("react-native");
var _uuid = require("uuid");
var _ExponentFileSystem = _interopRequireDefault(require("./ExponentFileSystem"));
var _FileSystem = require("./FileSystem.types");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
if (!_ExponentFileSystem["default"]) {
  console.warn("No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?");
}
var _unused = new _expoModulesCore.EventEmitter(_ExponentFileSystem["default"]);
function normalizeEndingSlash(p) {
  if (p != null) {
    return p.replace(/\/*$/, '') + '/';
  }
  return null;
}
var documentDirectory = normalizeEndingSlash(_ExponentFileSystem["default"].documentDirectory);
exports.documentDirectory = documentDirectory;
var cacheDirectory = normalizeEndingSlash(_ExponentFileSystem["default"].cacheDirectory);
exports.cacheDirectory = cacheDirectory;
var bundledAssets = _ExponentFileSystem["default"].bundledAssets,
  bundleDirectory = _ExponentFileSystem["default"].bundleDirectory;
exports.bundleDirectory = bundleDirectory;
exports.bundledAssets = bundledAssets;
function getInfoAsync(_x) {
  return _getInfoAsync.apply(this, arguments);
}
function _getInfoAsync() {
  _getInfoAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee10(fileUri) {
    var options,
      _args10 = arguments;
    return _regenerator["default"].wrap(function _callee10$(_context10) {
      while (1) switch (_context10.prev = _context10.next) {
        case 0:
          options = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {};
          if (_ExponentFileSystem["default"].getInfoAsync) {
            _context10.next = 3;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getInfoAsync');
        case 3:
          _context10.next = 5;
          return _ExponentFileSystem["default"].getInfoAsync(fileUri, options);
        case 5:
          return _context10.abrupt("return", _context10.sent);
        case 6:
        case "end":
          return _context10.stop();
      }
    }, _callee10);
  }));
  return _getInfoAsync.apply(this, arguments);
}
function readAsStringAsync(_x2) {
  return _readAsStringAsync.apply(this, arguments);
}
function _readAsStringAsync() {
  _readAsStringAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee11(fileUri) {
    var options,
      _args11 = arguments;
    return _regenerator["default"].wrap(function _callee11$(_context11) {
      while (1) switch (_context11.prev = _context11.next) {
        case 0:
          options = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};
          if (_ExponentFileSystem["default"].readAsStringAsync) {
            _context11.next = 3;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'readAsStringAsync');
        case 3:
          _context11.next = 5;
          return _ExponentFileSystem["default"].readAsStringAsync(fileUri, options);
        case 5:
          return _context11.abrupt("return", _context11.sent);
        case 6:
        case "end":
          return _context11.stop();
      }
    }, _callee11);
  }));
  return _readAsStringAsync.apply(this, arguments);
}
function getContentUriAsync(_x3) {
  return _getContentUriAsync.apply(this, arguments);
}
function _getContentUriAsync() {
  _getContentUriAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee12(fileUri) {
    return _regenerator["default"].wrap(function _callee12$(_context12) {
      while (1) switch (_context12.prev = _context12.next) {
        case 0:
          if (!(_reactNative.Platform.OS === 'android')) {
            _context12.next = 8;
            break;
          }
          if (_ExponentFileSystem["default"].getContentUriAsync) {
            _context12.next = 3;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getContentUriAsync');
        case 3:
          _context12.next = 5;
          return _ExponentFileSystem["default"].getContentUriAsync(fileUri);
        case 5:
          return _context12.abrupt("return", _context12.sent);
        case 8:
          return _context12.abrupt("return", fileUri);
        case 9:
        case "end":
          return _context12.stop();
      }
    }, _callee12);
  }));
  return _getContentUriAsync.apply(this, arguments);
}
function writeAsStringAsync(_x4, _x5) {
  return _writeAsStringAsync.apply(this, arguments);
}
function _writeAsStringAsync() {
  _writeAsStringAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee13(fileUri, contents) {
    var options,
      _args13 = arguments;
    return _regenerator["default"].wrap(function _callee13$(_context13) {
      while (1) switch (_context13.prev = _context13.next) {
        case 0:
          options = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};
          if (_ExponentFileSystem["default"].writeAsStringAsync) {
            _context13.next = 3;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'writeAsStringAsync');
        case 3:
          _context13.next = 5;
          return _ExponentFileSystem["default"].writeAsStringAsync(fileUri, contents, options);
        case 5:
          return _context13.abrupt("return", _context13.sent);
        case 6:
        case "end":
          return _context13.stop();
      }
    }, _callee13);
  }));
  return _writeAsStringAsync.apply(this, arguments);
}
function deleteAsync(_x6) {
  return _deleteAsync.apply(this, arguments);
}
function _deleteAsync() {
  _deleteAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee14(fileUri) {
    var options,
      _args14 = arguments;
    return _regenerator["default"].wrap(function _callee14$(_context14) {
      while (1) switch (_context14.prev = _context14.next) {
        case 0:
          options = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {};
          if (_ExponentFileSystem["default"].deleteAsync) {
            _context14.next = 3;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'deleteAsync');
        case 3:
          _context14.next = 5;
          return _ExponentFileSystem["default"].deleteAsync(fileUri, options);
        case 5:
          return _context14.abrupt("return", _context14.sent);
        case 6:
        case "end":
          return _context14.stop();
      }
    }, _callee14);
  }));
  return _deleteAsync.apply(this, arguments);
}
function deleteLegacyDocumentDirectoryAndroid() {
  return _deleteLegacyDocumentDirectoryAndroid.apply(this, arguments);
}
function _deleteLegacyDocumentDirectoryAndroid() {
  _deleteLegacyDocumentDirectoryAndroid = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee15() {
    var legacyDocumentDirectory;
    return _regenerator["default"].wrap(function _callee15$(_context15) {
      while (1) switch (_context15.prev = _context15.next) {
        case 0:
          if (!(_reactNative.Platform.OS !== 'android' || documentDirectory == null)) {
            _context15.next = 2;
            break;
          }
          return _context15.abrupt("return");
        case 2:
          legacyDocumentDirectory = "".concat(documentDirectory, "ExperienceData/");
          _context15.next = 5;
          return deleteAsync(legacyDocumentDirectory, {
            idempotent: true
          });
        case 5:
          return _context15.abrupt("return", _context15.sent);
        case 6:
        case "end":
          return _context15.stop();
      }
    }, _callee15);
  }));
  return _deleteLegacyDocumentDirectoryAndroid.apply(this, arguments);
}
function moveAsync(_x7) {
  return _moveAsync.apply(this, arguments);
}
function _moveAsync() {
  _moveAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee16(options) {
    return _regenerator["default"].wrap(function _callee16$(_context16) {
      while (1) switch (_context16.prev = _context16.next) {
        case 0:
          if (_ExponentFileSystem["default"].moveAsync) {
            _context16.next = 2;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'moveAsync');
        case 2:
          _context16.next = 4;
          return _ExponentFileSystem["default"].moveAsync(options);
        case 4:
          return _context16.abrupt("return", _context16.sent);
        case 5:
        case "end":
          return _context16.stop();
      }
    }, _callee16);
  }));
  return _moveAsync.apply(this, arguments);
}
function copyAsync(_x8) {
  return _copyAsync.apply(this, arguments);
}
function _copyAsync() {
  _copyAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee17(options) {
    return _regenerator["default"].wrap(function _callee17$(_context17) {
      while (1) switch (_context17.prev = _context17.next) {
        case 0:
          if (_ExponentFileSystem["default"].copyAsync) {
            _context17.next = 2;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'copyAsync');
        case 2:
          _context17.next = 4;
          return _ExponentFileSystem["default"].copyAsync(options);
        case 4:
          return _context17.abrupt("return", _context17.sent);
        case 5:
        case "end":
          return _context17.stop();
      }
    }, _callee17);
  }));
  return _copyAsync.apply(this, arguments);
}
function makeDirectoryAsync(_x9) {
  return _makeDirectoryAsync.apply(this, arguments);
}
function _makeDirectoryAsync() {
  _makeDirectoryAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee18(fileUri) {
    var options,
      _args18 = arguments;
    return _regenerator["default"].wrap(function _callee18$(_context18) {
      while (1) switch (_context18.prev = _context18.next) {
        case 0:
          options = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : {};
          if (_ExponentFileSystem["default"].makeDirectoryAsync) {
            _context18.next = 3;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'makeDirectoryAsync');
        case 3:
          _context18.next = 5;
          return _ExponentFileSystem["default"].makeDirectoryAsync(fileUri, options);
        case 5:
          return _context18.abrupt("return", _context18.sent);
        case 6:
        case "end":
          return _context18.stop();
      }
    }, _callee18);
  }));
  return _makeDirectoryAsync.apply(this, arguments);
}
function readDirectoryAsync(_x10) {
  return _readDirectoryAsync.apply(this, arguments);
}
function _readDirectoryAsync() {
  _readDirectoryAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee19(fileUri) {
    return _regenerator["default"].wrap(function _callee19$(_context19) {
      while (1) switch (_context19.prev = _context19.next) {
        case 0:
          if (_ExponentFileSystem["default"].readDirectoryAsync) {
            _context19.next = 2;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'readDirectoryAsync');
        case 2:
          _context19.next = 4;
          return _ExponentFileSystem["default"].readDirectoryAsync(fileUri);
        case 4:
          return _context19.abrupt("return", _context19.sent);
        case 5:
        case "end":
          return _context19.stop();
      }
    }, _callee19);
  }));
  return _readDirectoryAsync.apply(this, arguments);
}
function getFreeDiskStorageAsync() {
  return _getFreeDiskStorageAsync.apply(this, arguments);
}
function _getFreeDiskStorageAsync() {
  _getFreeDiskStorageAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee20() {
    return _regenerator["default"].wrap(function _callee20$(_context20) {
      while (1) switch (_context20.prev = _context20.next) {
        case 0:
          if (_ExponentFileSystem["default"].getFreeDiskStorageAsync) {
            _context20.next = 2;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');
        case 2:
          _context20.next = 4;
          return _ExponentFileSystem["default"].getFreeDiskStorageAsync();
        case 4:
          return _context20.abrupt("return", _context20.sent);
        case 5:
        case "end":
          return _context20.stop();
      }
    }, _callee20);
  }));
  return _getFreeDiskStorageAsync.apply(this, arguments);
}
function getTotalDiskCapacityAsync() {
  return _getTotalDiskCapacityAsync.apply(this, arguments);
}
function _getTotalDiskCapacityAsync() {
  _getTotalDiskCapacityAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee21() {
    return _regenerator["default"].wrap(function _callee21$(_context21) {
      while (1) switch (_context21.prev = _context21.next) {
        case 0:
          if (_ExponentFileSystem["default"].getTotalDiskCapacityAsync) {
            _context21.next = 2;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');
        case 2:
          _context21.next = 4;
          return _ExponentFileSystem["default"].getTotalDiskCapacityAsync();
        case 4:
          return _context21.abrupt("return", _context21.sent);
        case 5:
        case "end":
          return _context21.stop();
      }
    }, _callee21);
  }));
  return _getTotalDiskCapacityAsync.apply(this, arguments);
}
function downloadAsync(_x11, _x12) {
  return _downloadAsync.apply(this, arguments);
}
function _downloadAsync() {
  _downloadAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee22(uri, fileUri) {
    var options,
      _args22 = arguments;
    return _regenerator["default"].wrap(function _callee22$(_context22) {
      while (1) switch (_context22.prev = _context22.next) {
        case 0:
          options = _args22.length > 2 && _args22[2] !== undefined ? _args22[2] : {};
          if (_ExponentFileSystem["default"].downloadAsync) {
            _context22.next = 3;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadAsync');
        case 3:
          _context22.next = 5;
          return _ExponentFileSystem["default"].downloadAsync(uri, fileUri, _objectSpread({
            sessionType: _FileSystem.FileSystemSessionType.BACKGROUND
          }, options));
        case 5:
          return _context22.abrupt("return", _context22.sent);
        case 6:
        case "end":
          return _context22.stop();
      }
    }, _callee22);
  }));
  return _downloadAsync.apply(this, arguments);
}
function uploadAsync(_x13, _x14) {
  return _uploadAsync.apply(this, arguments);
}
function _uploadAsync() {
  _uploadAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee23(url, fileUri) {
    var options,
      _args23 = arguments;
    return _regenerator["default"].wrap(function _callee23$(_context23) {
      while (1) switch (_context23.prev = _context23.next) {
        case 0:
          options = _args23.length > 2 && _args23[2] !== undefined ? _args23[2] : {};
          if (_ExponentFileSystem["default"].uploadAsync) {
            _context23.next = 3;
            break;
          }
          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'uploadAsync');
        case 3:
          _context23.next = 5;
          return _ExponentFileSystem["default"].uploadAsync(url, fileUri, _objectSpread(_objectSpread({
            sessionType: _FileSystem.FileSystemSessionType.BACKGROUND,
            uploadType: _FileSystem.FileSystemUploadType.BINARY_CONTENT
          }, options), {}, {
            httpMethod: (options.httpMethod || 'POST').toUpperCase()
          }));
        case 5:
          return _context23.abrupt("return", _context23.sent);
        case 6:
        case "end":
          return _context23.stop();
      }
    }, _callee23);
  }));
  return _uploadAsync.apply(this, arguments);
}
function createDownloadResumable(uri, fileUri, options, callback, resumeData) {
  return new DownloadResumable(uri, fileUri, options, callback, resumeData);
}
function createUploadTask(url, fileUri, options, callback) {
  return new UploadTask(url, fileUri, options, callback);
}
var FileSystemCancellableNetworkTask = function () {
  function FileSystemCancellableNetworkTask() {
    (0, _classCallCheck2["default"])(this, FileSystemCancellableNetworkTask);
    (0, _defineProperty2["default"])(this, "_uuid", (0, _uuid.v4)());
    (0, _defineProperty2["default"])(this, "taskWasCanceled", false);
    (0, _defineProperty2["default"])(this, "emitter", new _expoModulesCore.EventEmitter(_ExponentFileSystem["default"]));
    (0, _defineProperty2["default"])(this, "subscription", void 0);
  }
  (0, _createClass2["default"])(FileSystemCancellableNetworkTask, [{
    key: "cancelAsync",
    value: function () {
      var _cancelAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (_ExponentFileSystem["default"].networkTaskCancelAsync) {
                _context.next = 2;
                break;
              }
              throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');
            case 2:
              this.removeSubscription();
              this.taskWasCanceled = true;
              _context.next = 6;
              return _ExponentFileSystem["default"].networkTaskCancelAsync(this.uuid);
            case 6:
              return _context.abrupt("return", _context.sent);
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function cancelAsync() {
        return _cancelAsync.apply(this, arguments);
      }
      return cancelAsync;
    }()
  }, {
    key: "isTaskCancelled",
    value: function isTaskCancelled() {
      if (this.taskWasCanceled) {
        console.warn('This task was already canceled.');
        return true;
      }
      return false;
    }
  }, {
    key: "uuid",
    get: function get() {
      return this._uuid;
    }
  }, {
    key: "addSubscription",
    value: function addSubscription() {
      var _this = this;
      if (this.subscription) {
        return;
      }
      this.subscription = this.emitter.addListener(this.getEventName(), function (event) {
        if (event.uuid === _this.uuid) {
          var callback = _this.getCallback();
          if (callback) {
            callback(event.data);
          }
        }
      });
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription() {
      if (!this.subscription) {
        return;
      }
      this.emitter.removeSubscription(this.subscription);
      this.subscription = null;
    }
  }]);
  return FileSystemCancellableNetworkTask;
}();
exports.FileSystemCancellableNetworkTask = FileSystemCancellableNetworkTask;
var UploadTask = function (_FileSystemCancellabl) {
  (0, _inherits2["default"])(UploadTask, _FileSystemCancellabl);
  var _super = _createSuper(UploadTask);
  function UploadTask(url, fileUri, options, callback) {
    var _options$httpMethod;
    var _this2;
    (0, _classCallCheck2["default"])(this, UploadTask);
    _this2 = _super.call(this);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this2), "url", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this2), "fileUri", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this2), "callback", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this2), "options", void 0);
    _this2.url = url;
    _this2.fileUri = fileUri;
    _this2.callback = callback;
    var httpMethod = (options === null || options === void 0 || (_options$httpMethod = options.httpMethod) === null || _options$httpMethod === void 0 ? void 0 : _options$httpMethod.toUpperCase()) || 'POST';
    _this2.options = _objectSpread(_objectSpread({
      sessionType: _FileSystem.FileSystemSessionType.BACKGROUND,
      uploadType: _FileSystem.FileSystemUploadType.BINARY_CONTENT
    }, options), {}, {
      httpMethod: httpMethod
    });
    return _this2;
  }
  (0, _createClass2["default"])(UploadTask, [{
    key: "getEventName",
    value: function getEventName() {
      return 'expo-file-system.uploadProgress';
    }
  }, {
    key: "getCallback",
    value: function getCallback() {
      return this.callback;
    }
  }, {
    key: "uploadAsync",
    value: function () {
      var _uploadAsync2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {
        var result;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (_ExponentFileSystem["default"].uploadTaskStartAsync) {
                _context2.next = 2;
                break;
              }
              throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');
            case 2:
              if (!this.isTaskCancelled()) {
                _context2.next = 4;
                break;
              }
              return _context2.abrupt("return");
            case 4:
              this.addSubscription();
              _context2.next = 7;
              return _ExponentFileSystem["default"].uploadTaskStartAsync(this.url, this.fileUri, this.uuid, this.options);
            case 7:
              result = _context2.sent;
              this.removeSubscription();
              return _context2.abrupt("return", result);
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function uploadAsync() {
        return _uploadAsync2.apply(this, arguments);
      }
      return uploadAsync;
    }()
  }]);
  return UploadTask;
}(FileSystemCancellableNetworkTask);
exports.UploadTask = UploadTask;
var DownloadResumable = function (_FileSystemCancellabl2) {
  (0, _inherits2["default"])(DownloadResumable, _FileSystemCancellabl2);
  var _super2 = _createSuper(DownloadResumable);
  function DownloadResumable(url, _fileUri) {
    var _this3;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var callback = arguments.length > 3 ? arguments[3] : undefined;
    var resumeData = arguments.length > 4 ? arguments[4] : undefined;
    (0, _classCallCheck2["default"])(this, DownloadResumable);
    _this3 = _super2.call(this);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "url", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "_fileUri", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "options", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "callback", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "resumeData", void 0);
    _this3.url = url;
    _this3._fileUri = _fileUri;
    _this3.options = options;
    _this3.callback = callback;
    _this3.resumeData = resumeData;
    return _this3;
  }
  (0, _createClass2["default"])(DownloadResumable, [{
    key: "fileUri",
    get: function get() {
      return this._fileUri;
    }
  }, {
    key: "getEventName",
    value: function getEventName() {
      return 'expo-file-system.downloadProgress';
    }
  }, {
    key: "getCallback",
    value: function getCallback() {
      return this.callback;
    }
  }, {
    key: "downloadAsync",
    value: function () {
      var _downloadAsync2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (_ExponentFileSystem["default"].downloadResumableStartAsync) {
                _context3.next = 2;
                break;
              }
              throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');
            case 2:
              if (!this.isTaskCancelled()) {
                _context3.next = 4;
                break;
              }
              return _context3.abrupt("return");
            case 4:
              this.addSubscription();
              _context3.next = 7;
              return _ExponentFileSystem["default"].downloadResumableStartAsync(this.url, this._fileUri, this.uuid, this.options, this.resumeData);
            case 7:
              return _context3.abrupt("return", _context3.sent);
            case 8:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function downloadAsync() {
        return _downloadAsync2.apply(this, arguments);
      }
      return downloadAsync;
    }()
  }, {
    key: "pauseAsync",
    value: function () {
      var _pauseAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {
        var pauseResult;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (_ExponentFileSystem["default"].downloadResumablePauseAsync) {
                _context4.next = 2;
                break;
              }
              throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');
            case 2:
              if (!this.isTaskCancelled()) {
                _context4.next = 4;
                break;
              }
              return _context4.abrupt("return", {
                fileUri: this._fileUri,
                options: this.options,
                url: this.url
              });
            case 4:
              _context4.next = 6;
              return _ExponentFileSystem["default"].downloadResumablePauseAsync(this.uuid);
            case 6:
              pauseResult = _context4.sent;
              this.removeSubscription();
              if (!pauseResult) {
                _context4.next = 13;
                break;
              }
              this.resumeData = pauseResult.resumeData;
              return _context4.abrupt("return", this.savable());
            case 13:
              throw new Error('Unable to generate a savable pause state');
            case 14:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function pauseAsync() {
        return _pauseAsync.apply(this, arguments);
      }
      return pauseAsync;
    }()
  }, {
    key: "resumeAsync",
    value: function () {
      var _resumeAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5() {
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (_ExponentFileSystem["default"].downloadResumableStartAsync) {
                _context5.next = 2;
                break;
              }
              throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');
            case 2:
              if (!this.isTaskCancelled()) {
                _context5.next = 4;
                break;
              }
              return _context5.abrupt("return");
            case 4:
              this.addSubscription();
              _context5.next = 7;
              return _ExponentFileSystem["default"].downloadResumableStartAsync(this.url, this.fileUri, this.uuid, this.options, this.resumeData);
            case 7:
              return _context5.abrupt("return", _context5.sent);
            case 8:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function resumeAsync() {
        return _resumeAsync.apply(this, arguments);
      }
      return resumeAsync;
    }()
  }, {
    key: "savable",
    value: function savable() {
      return {
        url: this.url,
        fileUri: this.fileUri,
        options: this.options,
        resumeData: this.resumeData
      };
    }
  }]);
  return DownloadResumable;
}(FileSystemCancellableNetworkTask);
exports.DownloadResumable = DownloadResumable;
var baseReadAsStringAsync = readAsStringAsync;
var baseWriteAsStringAsync = writeAsStringAsync;
var baseDeleteAsync = deleteAsync;
var baseMoveAsync = moveAsync;
var baseCopyAsync = copyAsync;
var StorageAccessFramework;
exports.StorageAccessFramework = StorageAccessFramework;
(function (StorageAccessFramework) {
  function getUriForDirectoryInRoot(folderName) {
    return "content://com.android.externalstorage.documents/tree/primary:".concat(folderName, "/document/primary:").concat(folderName);
  }
  StorageAccessFramework.getUriForDirectoryInRoot = getUriForDirectoryInRoot;
  function requestDirectoryPermissionsAsync() {
    return _requestDirectoryPermissionsAsync.apply(this, arguments);
  }
  function _requestDirectoryPermissionsAsync() {
    _requestDirectoryPermissionsAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6() {
      var initialFileUrl,
        _args6 = arguments;
      return _regenerator["default"].wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            initialFileUrl = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : null;
            if (_ExponentFileSystem["default"].requestDirectoryPermissionsAsync) {
              _context6.next = 3;
              break;
            }
            throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.requestDirectoryPermissionsAsync');
          case 3:
            _context6.next = 5;
            return _ExponentFileSystem["default"].requestDirectoryPermissionsAsync(initialFileUrl);
          case 5:
            return _context6.abrupt("return", _context6.sent);
          case 6:
          case "end":
            return _context6.stop();
        }
      }, _callee6);
    }));
    return _requestDirectoryPermissionsAsync.apply(this, arguments);
  }
  StorageAccessFramework.requestDirectoryPermissionsAsync = requestDirectoryPermissionsAsync;
  function readDirectoryAsync(_x15) {
    return _readDirectoryAsync2.apply(this, arguments);
  }
  function _readDirectoryAsync2() {
    _readDirectoryAsync2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7(dirUri) {
      return _regenerator["default"].wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            if (_ExponentFileSystem["default"].readSAFDirectoryAsync) {
              _context7.next = 2;
              break;
            }
            throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.readDirectoryAsync');
          case 2:
            _context7.next = 4;
            return _ExponentFileSystem["default"].readSAFDirectoryAsync(dirUri);
          case 4:
            return _context7.abrupt("return", _context7.sent);
          case 5:
          case "end":
            return _context7.stop();
        }
      }, _callee7);
    }));
    return _readDirectoryAsync2.apply(this, arguments);
  }
  StorageAccessFramework.readDirectoryAsync = readDirectoryAsync;
  function makeDirectoryAsync(_x16, _x17) {
    return _makeDirectoryAsync2.apply(this, arguments);
  }
  function _makeDirectoryAsync2() {
    _makeDirectoryAsync2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8(parentUri, dirName) {
      return _regenerator["default"].wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            if (_ExponentFileSystem["default"].makeSAFDirectoryAsync) {
              _context8.next = 2;
              break;
            }
            throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.makeDirectoryAsync');
          case 2:
            _context8.next = 4;
            return _ExponentFileSystem["default"].makeSAFDirectoryAsync(parentUri, dirName);
          case 4:
            return _context8.abrupt("return", _context8.sent);
          case 5:
          case "end":
            return _context8.stop();
        }
      }, _callee8);
    }));
    return _makeDirectoryAsync2.apply(this, arguments);
  }
  StorageAccessFramework.makeDirectoryAsync = makeDirectoryAsync;
  function createFileAsync(_x18, _x19, _x20) {
    return _createFileAsync.apply(this, arguments);
  }
  function _createFileAsync() {
    _createFileAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9(parentUri, fileName, mimeType) {
      return _regenerator["default"].wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            if (_ExponentFileSystem["default"].createSAFFileAsync) {
              _context9.next = 2;
              break;
            }
            throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');
          case 2:
            _context9.next = 4;
            return _ExponentFileSystem["default"].createSAFFileAsync(parentUri, fileName, mimeType);
          case 4:
            return _context9.abrupt("return", _context9.sent);
          case 5:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    }));
    return _createFileAsync.apply(this, arguments);
  }
  StorageAccessFramework.createFileAsync = createFileAsync;
  StorageAccessFramework.writeAsStringAsync = baseWriteAsStringAsync;
  StorageAccessFramework.readAsStringAsync = baseReadAsStringAsync;
  StorageAccessFramework.deleteAsync = baseDeleteAsync;
  StorageAccessFramework.moveAsync = baseMoveAsync;
  StorageAccessFramework.copyAsync = baseCopyAsync;
})(StorageAccessFramework || (exports.StorageAccessFramework = StorageAccessFramework = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,