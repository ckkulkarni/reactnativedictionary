b1f3d48f78db1b512cbdd367aa9999dd
_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
_getJestObj().mock("axios");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _native = require("@react-navigation/native");
var _reactNative = require("@testing-library/react-native");
var _jestCucumber = require("jest-cucumber");
require("react-native-get-random-values");
var _axios = _interopRequireDefault(require("axios"));
var _Details = _interopRequireDefault(require("../../Details"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
var feature = (0, _jestCucumber.loadFeature)("Apps/features/details.feature");
(0, _jestCucumber.defineFeature)(feature, function (test) {
  test("User views word details with phonetics and meanings", function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then;
    var mockRoute = {
      params: {
        word: {
          word: "example"
        }
      }
    };
    jest.spyOn(_axios.default, "get").mockResolvedValueOnce({
      data: [{
        word: "example",
        phonetics: [{
          text: "/ɪɡˈzæmpəl/",
          audio: "example-audio.mp3"
        }],
        meanings: [{
          partOfSpeech: "noun",
          definitions: [{
            definition: "a representative form or pattern",
            example: "I followed your example",
            synonyms: ["model", "pattern", "prototype"]
          }]
        }]
      }]
    });
    var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Details.default, {
      route: mockRoute
    }));
    given("The user is on the Details page", function () {});
    when("The user views the details for a word", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        expect(screen.getByText("example")).toBeDefined();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9uYXRpdmUiLCJfcmVhY3ROYXRpdmUiLCJfamVzdEN1Y3VtYmVyIiwiX2F4aW9zIiwiX0RldGFpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwibmF2aWdhdGlvbiIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiX3JlZiIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJtb2NrUm91dGUiLCJwYXJhbXMiLCJ3b3JkIiwic3B5T24iLCJheGlvcyIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsImRhdGEiLCJwaG9uZXRpY3MiLCJ0ZXh0IiwiYXVkaW8iLCJtZWFuaW5ncyIsInBhcnRPZlNwZWVjaCIsImRlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsImV4YW1wbGUiLCJzeW5vbnltcyIsInNjcmVlbiIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJyb3V0ZSIsIndhaXRGb3IiLCJleHBlY3QiLCJnZXRCeVRleHQiLCJ0b0JlRGVmaW5lZCJdLCJzb3VyY2VzIjpbImRldGFpbHMuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU5hdmlnYXRpb24gfSBmcm9tIFwiQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlXCI7XHJcbmltcG9ydCB7IE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3AgfSBmcm9tIFwiQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrXCI7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCB7IGxvYWRGZWF0dXJlLCBkZWZpbmVGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IFwicmVhY3QtbmF0aXZlLWdldC1yYW5kb20tdmFsdWVzXCI7XHJcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XHJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0IERldGFpbHMgZnJvbSBcIi4uLy4uL0RldGFpbHNcIjtcclxuY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb248TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcDxhbnk+PigpO1xyXG5qZXN0Lm1vY2soXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmVcIiwgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5qZXN0Lm1vY2soXCJheGlvc1wiKTtcclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKFwiQXBwcy9mZWF0dXJlcy9kZXRhaWxzLmZlYXR1cmVcIik7XHJcblxyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsICh0ZXN0KSA9PiB7XHJcbiAgdGVzdChcIlVzZXIgdmlld3Mgd29yZCBkZXRhaWxzIHdpdGggcGhvbmV0aWNzIGFuZCBtZWFuaW5nc1wiLCAoe1xyXG4gICAgZ2l2ZW4sXHJcbiAgICB3aGVuLFxyXG4gICAgdGhlbixcclxuICB9KSA9PiB7XHJcbiAgICBjb25zdCBtb2NrUm91dGUgPSB7IHBhcmFtczogeyB3b3JkOiB7IHdvcmQ6IFwiZXhhbXBsZVwiIH0gfSB9O1xyXG4gICAgamVzdC5zcHlPbihheGlvcywgXCJnZXRcIikubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgICAgZGF0YTogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIHdvcmQ6IFwiZXhhbXBsZVwiLFxyXG4gICAgICAgICAgcGhvbmV0aWNzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB0ZXh0OiBcIi/Jqsmhy4h6w6ZtcMmZbC9cIixcclxuICAgICAgICAgICAgICBhdWRpbzogXCJleGFtcGxlLWF1ZGlvLm1wM1wiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgXSxcclxuICAgICAgICAgIG1lYW5pbmdzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBwYXJ0T2ZTcGVlY2g6IFwibm91blwiLFxyXG4gICAgICAgICAgICAgIGRlZmluaXRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIGRlZmluaXRpb246IFwiYSByZXByZXNlbnRhdGl2ZSBmb3JtIG9yIHBhdHRlcm5cIixcclxuICAgICAgICAgICAgICAgICAgZXhhbXBsZTogXCJJIGZvbGxvd2VkIHlvdXIgZXhhbXBsZVwiLFxyXG4gICAgICAgICAgICAgICAgICBzeW5vbnltczogW1wibW9kZWxcIiwgXCJwYXR0ZXJuXCIsIFwicHJvdG90eXBlXCJdLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgXSxcclxuICAgICAgICB9LFxyXG4gICAgICBdLFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoPERldGFpbHMgcm91dGU9e21vY2tSb3V0ZX0gLz4pO1xyXG5cclxuICAgIGdpdmVuKFwiVGhlIHVzZXIgaXMgb24gdGhlIERldGFpbHMgcGFnZVwiLCAoKSA9PiB7fSk7XHJcblxyXG4gICAgd2hlbihcIlRoZSB1c2VyIHZpZXdzIHRoZSBkZXRhaWxzIGZvciBhIHdvcmRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcImV4YW1wbGVcIikpLnRvQmVEZWZpbmVkKCk7XHJc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