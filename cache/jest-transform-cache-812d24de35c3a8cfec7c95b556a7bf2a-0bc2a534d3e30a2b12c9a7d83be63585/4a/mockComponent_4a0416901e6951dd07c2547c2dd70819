dc395c800f4cc7a9f880684cbc884f47
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
module.exports = function (moduleName, instanceMethods, isESModule) {
  var _class;
  var RealComponent = isESModule ? jest.requireActual(moduleName)["default"] : jest.requireActual(moduleName);
  var React = require('react');
  var SuperClass = typeof RealComponent === 'function' ? RealComponent : React.Component;
  var name = RealComponent.displayName || RealComponent.name || (RealComponent.render ? RealComponent.render.displayName || RealComponent.render.name : 'Unknown');
  var nameWithoutPrefix = name.replace(/^(RCT|RK)/, '');
  var Component = (_class = function (_SuperClass) {
    (0, _inherits2["default"])(Component, _SuperClass);
    var _super = _createSuper(Component);
    function Component() {
      (0, _classCallCheck2["default"])(this, Component);
      return _super.apply(this, arguments);
    }
    (0, _createClass2["default"])(Component, [{
      key: "render",
      value: function render() {
        var _this = this;
        var props = Object.assign({}, RealComponent.defaultProps);
        if (this.props) {
          Object.keys(this.props).forEach(function (prop) {
            if (_this.props[prop] !== undefined) {
              props[prop] = _this.props[prop];
            }
          });
        }
        return React.createElement(nameWithoutPrefix, props, this.props.children);
      }
    }]);
    return Component;
  }(SuperClass), (0, _defineProperty2["default"])(_class, "displayName", 'Component'), _class);
  Component.displayName = nameWithoutPrefix;
  Object.keys(RealComponent).forEach(function (classStatic) {
    Component[classStatic] = RealComponent[classStatic];
  });
  if (instanceMethods != null) {
    Object.assign(Component.prototype, instanceMethods);
  }
  return Component;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2luaGVyaXRzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfZGVmaW5lUHJvcGVydHkyIiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2NyZWF0ZVN1cGVySW50ZXJuYWwiLCJTdXBlciIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5Iiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGVOYW1lIiwiaW5zdGFuY2VNZXRob2RzIiwiaXNFU01vZHVsZSIsIl9jbGFzcyIsIlJlYWxDb21wb25lbnQiLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIlJlYWN0IiwiU3VwZXJDbGFzcyIsIkNvbXBvbmVudCIsIm5hbWUiLCJkaXNwbGF5TmFtZSIsInJlbmRlciIsIm5hbWVXaXRob3V0UHJlZml4IiwicmVwbGFjZSIsIl9TdXBlckNsYXNzIiwiX3N1cGVyIiwia2V5IiwidmFsdWUiLCJfdGhpcyIsInByb3BzIiwiT2JqZWN0IiwiYXNzaWduIiwiZGVmYXVsdFByb3BzIiwia2V5cyIsImZvckVhY2giLCJwcm9wIiwidW5kZWZpbmVkIiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiY2xhc3NTdGF0aWMiXSwic291cmNlcyI6WyJtb2NrQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChtb2R1bGVOYW1lLCBpbnN0YW5jZU1ldGhvZHMsIGlzRVNNb2R1bGUpID0+IHtcbiAgY29uc3QgUmVhbENvbXBvbmVudCA9IGlzRVNNb2R1bGVcbiAgICA/IGplc3QucmVxdWlyZUFjdHVhbChtb2R1bGVOYW1lKS5kZWZhdWx0XG4gICAgOiBqZXN0LnJlcXVpcmVBY3R1YWwobW9kdWxlTmFtZSk7XG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuICBjb25zdCBTdXBlckNsYXNzID1cbiAgICB0eXBlb2YgUmVhbENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyA/IFJlYWxDb21wb25lbnQgOiBSZWFjdC5Db21wb25lbnQ7XG5cbiAgY29uc3QgbmFtZSA9XG4gICAgUmVhbENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fFxuICAgIFJlYWxDb21wb25lbnQubmFtZSB8fFxuICAgIChSZWFsQ29tcG9uZW50LnJlbmRlciAvLyBoYW5kbGUgUmVhY3QuZm9yd2FyZFJlZlxuICAgICAgPyBSZWFsQ29tcG9uZW50LnJlbmRlci5kaXNwbGF5TmFtZSB8fCBSZWFsQ29tcG9uZW50LnJlbmRlci5uYW1lXG4gICAgICA6ICdVbmtub3duJyk7XG5cbiAgY29uc3QgbmFtZVdpdGhvdXRQcmVmaXggPSBuYW1lLnJlcGxhY2UoL14oUkNUfFJLKS8sICcnKTtcblxuICBjb25zdCBDb21wb25lbnQgPSBjbGFzcyBleHRlbmRzIFN1cGVyQ2xhc3Mge1xuICAgIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdDb21wb25lbnQnO1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgY29uc3QgcHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBSZWFsQ29tcG9uZW50LmRlZmF1bHRQcm9wcyk7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMucHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgICAgLy8gV2UgY2FuJ3QganVzdCBhc3NpZ24gcHJvcHMgb24gdG9wIG9mIGRlZmF1bHRQcm9wc1xuICAgICAgICAgIC8vIGJlY2F1c2UgUmVhY3QgdHJlYXRzIHVuZGVmaW5lZCBhcyBzcGVjaWFsIGFuZCBkaWZmZXJlbnQgZnJvbSBudWxsLlxuICAgICAgICAgIC8vIElmIGEgcHJvcCBpcyBzcGVjaWZpZWQgYnV0IHNldCB0byB1bmRlZmluZWQgaXQgaXMgaWdub3JlZCBhbmQgdGhlXG4gICAgICAgICAgLy8gZGVmYXVsdCBwcm9wIGlzIHVzZWQgaW5zdGVhZC4gSWYgaXQgaXMgc2V0IHRvIG51bGwsIHRoZW4gdGhlXG4gICAgICAgICAgLy8gbnVsbCB2YWx1ZSBvdmVyd3JpdGVzIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAgICAgIGlmICh0aGlzLnByb3BzW3Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByb3BzW3Byb3BdID0gdGhpcy5wcm9wc1twcm9wXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChuYW1lV2l0aG91dFByZWZpeCwgcHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cbiAgfTtcblxuICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBuYW1lV2l0aG91dFByZWZpeDtcblxuICBPYmplY3Qua2V5cyhSZWFsQ29tcG9uZW50KS5mb3JFYWNoKGNsYXNzU3RhdGljID0+IHtcbiAgICBDb21wb25lbnRbY2xhc3NTdGF0aWNdID0gUmVhbENvbXBvbmVudFtjbGFzc1N0YXRpY107XG4gIH0pO1xuXG4gIGlmIChpbnN0YW5jZU1ldGhvZHMgIT0gbnVsbCkge1xuICAgIE9iamVjdC5hc3NpZ24oQ29tcG9uZW50LnByb3RvdHlwZSwgaW5zdGFuY2VNZXRob2RzKTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFTQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUcsVUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUksMkJBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLGdCQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSxnQkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsU0FBQU8sYUFBQUMsT0FBQSxRQUFBQyx5QkFBQSxHQUFBQyx5QkFBQSxvQkFBQUMscUJBQUEsUUFBQUMsS0FBQSxPQUFBUCxnQkFBQSxhQUFBRyxPQUFBLEdBQUFLLE1BQUEsTUFBQUoseUJBQUEsUUFBQUssU0FBQSxPQUFBVCxnQkFBQSxtQkFBQVUsV0FBQSxFQUFBRixNQUFBLEdBQUFHLE9BQUEsQ0FBQUMsU0FBQSxDQUFBTCxLQUFBLEVBQUFNLFNBQUEsRUFBQUosU0FBQSxZQUFBRCxNQUFBLEdBQUFELEtBQUEsQ0FBQU8sS0FBQSxPQUFBRCxTQUFBLGdCQUFBZCwyQkFBQSxtQkFBQVMsTUFBQTtBQUFBLFNBQUFILDBCQUFBLGVBQUFNLE9BQUEscUJBQUFBLE9BQUEsQ0FBQUMsU0FBQSxvQkFBQUQsT0FBQSxDQUFBQyxTQUFBLENBQUFHLElBQUEsMkJBQUFDLEtBQUEsb0NBQUFDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBQyxPQUFBLENBQUFDLElBQUEsQ0FBQVQsT0FBQSxDQUFBQyxTQUFBLENBQUFLLE9BQUEsOENBQUFJLENBQUE7QUFFYkMsTUFBTSxDQUFDQyxPQUFPLEdBQUcs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