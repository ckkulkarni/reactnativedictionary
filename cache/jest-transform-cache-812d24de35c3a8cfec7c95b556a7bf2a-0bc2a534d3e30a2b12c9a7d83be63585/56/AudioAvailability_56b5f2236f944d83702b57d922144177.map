{"version":3,"names":["_ExponentAV","_interopRequireDefault","require","_enabled","isAudioEnabled","throwIfAudioIsDisabled","Error","setIsEnabledAsync","_x","_setIsEnabledAsync","apply","arguments","_asyncToGenerator2","default","value","ExponentAV","setAudioIsEnabled"],"sources":["../../src/Audio/AudioAvailability.ts"],"sourcesContent":["import ExponentAV from '../ExponentAV';\n\nlet _enabled = true;\n\nexport function isAudioEnabled(): boolean {\n  return _enabled;\n}\n\nexport function throwIfAudioIsDisabled(): void {\n  if (!_enabled) {\n    throw new Error('Cannot complete operation because audio is not enabled.');\n  }\n}\n\n// @needsAudit\n/**\n * Audio is enabled by default, but if you want to write your own Audio API in a bare workflow app, you might want to disable the Audio API.\n * @param value `true` enables Audio, and `false` disables it.\n * @return A `Promise` that will reject if audio playback could not be enabled for the device.\n */\nexport async function setIsEnabledAsync(value: boolean): Promise<void> {\n  _enabled = value;\n  await ExponentAV.setAudioIsEnabled(value);\n  // TODO : We immediately pause all players when disabled, but we do not resume all shouldPlay\n  // players when enabled. Perhaps for completeness we should allow this; the design of the\n  // enabling API is for people to enable / disable this audio library, but I think that it should\n  // intuitively also double as a global pause/resume.\n}\n"],"mappings":";;;;;;;;AAAA,IAAAA,WAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAIC,QAAQ,GAAG,IAAI;AAEb,SAAUC,cAAcA,CAAA;EAC5B,OAAOD,QAAQ;AACjB;AAEM,SAAUE,sBAAsBA,CAAA;EACpC,IAAI,CAACF,QAAQ,EAAE;IACb,MAAM,IAAIG,KAAK,CAAC,yDAAyD,CAAC;;AAE9E;AAAC,SAQqBC,iBAAiBA,CAAAC,EAAA;EAAA,OAAAC,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,mBAAA;EAAAA,kBAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAhC,WAAiCC,KAAc;IACpDX,QAAQ,GAAGW,KAAK;IAChB,MAAMC,mBAAU,CAACC,iBAAiB,CAACF,KAAK,CAAC;EAK3C,CAAC;EAAA,OAAAL,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"}