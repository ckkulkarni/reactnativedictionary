6f8a32ffa16fe13f3f9e502204e6cf6e
_getJestObj().mock("@react-navigation/native", function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _native = require("@react-navigation/native");
var _reactNative = require("@testing-library/react-native");
var _jestCucumber = require("jest-cucumber");
require("react-native-get-random-values");
var _axios = _interopRequireDefault(require("axios"));
var _Details = _interopRequireDefault(require("../../Details"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
var feature = (0, _jestCucumber.loadFeature)("Apps/features/details.feature");
(0, _jestCucumber.defineFeature)(feature, function (test) {
  test("User views word details with phonetics and meanings", function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    var mockRoute = {
      params: {
        word: {
          word: "Example"
        }
      }
    };
    var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Details.default, {
      route: mockRoute
    }));
    jest.spyOn(_axios.default, "get").mockResolvedValueOnce({
      data: [{
        word: "example",
        phonetics: [{
          text: "/ɪɡˈzæmpəl/",
          audio: "example-audio.mp3"
        }],
        meanings: [{
          partOfSpeech: "noun",
          definitions: [{
            definition: "a representative form or pattern",
            example: "I followed your example",
            synonyms: ["model", "pattern", "prototype"]
          }]
        }]
      }]
    });
    given("The user is on the Details page", function () {
      expect(screen).toBeDefined();
    });
    when("The user views the details for a word", (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        expect(screen.getByText("Example")).toBeDefined();
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9uYXRpdmUiLCJfcmVhY3ROYXRpdmUiLCJfamVzdEN1Y3VtYmVyIiwiX2F4aW9zIiwiX0RldGFpbHMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwibmF2aWdhdGlvbiIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiX3JlZiIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJhbmQiLCJtb2NrUm91dGUiLCJwYXJhbXMiLCJ3b3JkIiwic2NyZWVuIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsInJvdXRlIiwic3B5T24iLCJheGlvcyIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsImRhdGEiLCJwaG9uZXRpY3MiLCJ0ZXh0IiwiYXVkaW8iLCJtZWFuaW5ncyIsInBhcnRPZlNwZWVjaCIsImRlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsImV4YW1wbGUiLCJzeW5vbnltcyIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwid2FpdEZvciIsImdldEJ5VGV4dCJdLCJzb3VyY2VzIjpbImRldGFpbHMuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU5hdmlnYXRpb24gfSBmcm9tIFwiQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlXCI7XHJcbmltcG9ydCB7IE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3AgfSBmcm9tIFwiQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrXCI7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlXCI7XHJcbmltcG9ydCB7IGxvYWRGZWF0dXJlLCBkZWZpbmVGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IFwicmVhY3QtbmF0aXZlLWdldC1yYW5kb20tdmFsdWVzXCI7XHJcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XHJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0IERldGFpbHMgZnJvbSBcIi4uLy4uL0RldGFpbHNcIjtcclxuY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb248TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcDxhbnk+PigpO1xyXG5qZXN0Lm1vY2soXCJAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmVcIiwgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJBcHBzL2ZlYXR1cmVzL2RldGFpbHMuZmVhdHVyZVwiKTtcclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIHRlc3QoXCJVc2VyIHZpZXdzIHdvcmQgZGV0YWlscyB3aXRoIHBob25ldGljcyBhbmQgbWVhbmluZ3NcIiwgKHtcclxuICAgIGdpdmVuLFxyXG4gICAgd2hlbixcclxuICAgIHRoZW4sXHJcbiAgICBhbmQsXHJcbiAgfSkgPT4ge1xyXG4gICAgY29uc3QgbW9ja1JvdXRlID0geyBwYXJhbXM6IHsgd29yZDogeyB3b3JkOiBcIkV4YW1wbGVcIiB9IH0gfTtcclxuICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcig8RGV0YWlscyByb3V0ZT17bW9ja1JvdXRlfSAvPik7XHJcbiAgICBqZXN0LnNweU9uKGF4aW9zLCBcImdldFwiKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xyXG4gICAgICBkYXRhOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgd29yZDogXCJleGFtcGxlXCIsXHJcbiAgICAgICAgICBwaG9uZXRpY3M6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHRleHQ6IFwiL8mqyaHLiHrDpm1wyZlsL1wiLFxyXG4gICAgICAgICAgICAgIGF1ZGlvOiBcImV4YW1wbGUtYXVkaW8ubXAzXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgbWVhbmluZ3M6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHBhcnRPZlNwZWVjaDogXCJub3VuXCIsXHJcbiAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbjogXCJhIHJlcHJlc2VudGF0aXZlIGZvcm0gb3IgcGF0dGVyblwiLFxyXG4gICAgICAgICAgICAgICAgICBleGFtcGxlOiBcIkkgZm9sbG93ZWQgeW91ciBleGFtcGxlXCIsXHJcbiAgICAgICAgICAgICAgICAgIHN5bm9ueW1zOiBbXCJtb2RlbFwiLCBcInBhdHRlcm5cIiwgXCJwcm90b3R5cGVcIl0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIF0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBnaXZlbihcIlRoZSB1c2VyIGlzIG9uIHRoZSBEZXRhaWxzIHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgd2hlbihcIlRoZSB1c2VyIHZpZXdzIHRoZSBkZXRhaWxzIGZvciBhIHdvcmRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcIkV4YW1wbGVcIikpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQVNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQzFDLE9BQU87SUFDTEMsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGVBQWUsQ0FBQztNQUN2Q0MsUUFBUSxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNwQixDQUFDO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDLElBQUFHLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBZkgsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBRUEsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksYUFBQSxHQUFBSixPQUFBO0FBQ0FBLE9BQUE7QUFFQSxJQUFBSyxNQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTSxRQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFBb0MsSUFBQU8sV0FBQSxHQUFBUCxPQUFBO0FBQUEsU0FBQVIsWUFBQTtFQUFBLElBQUFnQixRQUFBLEdBQUFSLE9BQUE7SUFBQUwsSUFBQSxHQUFBYSxRQUFBLENBQUFiLElBQUE7RUFBQUgsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUcsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBQ3BDLElBQU1jLFVBQVUsR0FBRyxJQUFBZixxQkFBYSxFQUFpQyxDQUFDO0FBUWxFLElBQU1nQixPQUFPLEdBQUcsSUFBQUMseUJBQVcsRUFBQywrQkFBK0IsQ0FBQztBQUM1RCxJQUFBQywyQkFBYSxFQUFDRixPQUFPLEVBQUUsVUFBQ0csSUFBSSxFQUFLO0VBQy9CQSxJQUFJLENBQUMscURBQXFELEVBQUUsVUFBQUMsSUFBQSxFQUt0RDtJQUFBLElBSkpDLEtBQUssR0FBQUQsSUFBQSxDQUFMQyxLQUFLO01BQ0xDLElBQUksR0FBQUYsSUFBQSxDQUFKRSxJQUFJO01BQ0pDLElBQUksR0FBQUgsSUFBQSxDQUFKRyxJQUFJO01BQ0pDLEdBQUcsR0FBQUosSUFBQSxDQUFISSxHQUFHO0lBRUgsSUFBTUMsU0FBUyxHQUFHO01BQUVDLE1BQU0sRUFBRTtRQUFFQyxJQUFJLEVBQUU7VUFBRUEsSUFBSSxFQUFFO1FBQVU7TUFBRTtJQUFFLENBQUM7SUFDM0QsSUFBTUMsTUFBTSxHQUFHLElBQUFDLG1CQUFNLEVBQUMsSUFBQWhCLFdBQUEsQ0FBQWlCLEdBQUEsRUFBQ2xCLFFBQUEsQ0FBQW1CLE9BQU87TUFBQ0MsS0FBSyxFQUFFUDtJQUFVLENBQUUsQ0FBQyxDQUFDO0lBQ3BEeEIsSUFBSSxDQUFDZ0MsS0FBSyxDQUFDQyxjQUFLLEVBQUUsS0FBSyxDQUFDLENBQUNDLHFCQUFxQixDQUFDO01BQzdDQyxJQUFJLEVBQUUsQ0FDSjtRQUNFVCxJQUFJLEVBQUUsU0FBUztRQUNmVSxTQUFTLEVBQUUsQ0FDVDtVQUNFQyxJQUFJLEVBQUUsYUFBYTtVQUNuQkMsS0FBSyxFQUFFO1FBQ1QsQ0FBQyxDQUNGO1FBQ0RDLFFBQVEsRUFBRSxDQUNSO1VBQ0VDLFlBQVksRUFBRSxNQUFNO1VBQ3BCQyxXQUFXLEVBQUUsQ0FDWDtZQUNFQyxVQUFVLEVBQUUsa0NBQWtDO1lBQzlDQyxPQUFPLEVBQUUseUJBQXlCO1lBQ2xDQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVc7VUFDNUMsQ0FBQztRQUVMLENBQUM7TUFFTCxDQUFDO0lBRUwsQ0FBQyxDQUFDO0lBRUZ4QixLQUFLLENBQUMsaUNBQWlDLEVBQUUsWUFBTTtNQUM3Q3lCLE1BQU0sQ0FBQ2xCLE1BQU0sQ0FBQyxDQUFDbUIsV0FBVyxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFDO0lBRUZ6QixJQUFJLENBQUMsdUNBQXVDLE1BQUFmLGtCQUFBLENBQUF3QixPQUFBLEVBQUUsYUFBWTtNQUN4RCxNQUFNLElBQUFpQixvQkFBTyxFQUFDLFlBQU07UUFDbEJGLE1BQU0sQ0FBQ2xCLE1BQU0sQ0FBQ3FCLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDRixXQUFXLENBQUMsQ0FBQztNQUNuRCxDQUFDLENBQUM7SUFDSixDQUFDLEVBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==