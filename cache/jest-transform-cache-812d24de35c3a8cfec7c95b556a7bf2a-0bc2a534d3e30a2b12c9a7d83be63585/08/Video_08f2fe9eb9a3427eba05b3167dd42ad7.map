{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_AV","_ExpoVideoManager","_interopRequireDefault","_ExponentAV","_ExponentVideo","_Video","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","step","next","_e2","minLen","_arrayLikeToArray","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","Reflect","construct","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","_STYLES","StyleSheet","create","base","overflow","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoManager","ExpoVideoViewManager","Video","_React$Component","_inherits2","_super","props","_this","_classCallCheck2","_assertThisInitialized2","createRef","status","state","showPoster","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_onPlaybackStatusUpdate","_ref","_asyncToGenerator2","_regenerator","mark","_callee","operation","handle","wrap","_callee$","_context","prev","_nativeRef","current","Error","findNodeHandle","sent","_handleNewStatus","abrupt","stop","_x","_ref2","_callee2","_callee2$","_context2","_performOperationAndHandleStatusAsync","tag","setFullscreen","_x2","_callee3","_callee3$","_context3","_setFullscreen","_callee4","_callee4$","_context4","_callee5","_callee5$","_context5","ExponentAV","getStatusForVideo","_ref6","_callee6","initialStatus","downloadFirst","_yield$getNativeSourc","nativeSource","fullInitialStatus","_args6","_callee6$","_context6","undefined","getNativeSourceAndFullInitialStatusForLoadAsync","loadForVideo","_x3","_callee7","_callee7$","_context7","unloadForVideo","_ref8","_callee8","_callee8$","_context8","assertStatusValuesInBounds","setStatusForVideo","_x4","_callee9","_args9","_callee9$","_context9","replayVideo","shouldPlay","event","nativeEvent","onLoadStart","onLoad","error","onError","getUnloadedStatus","onReadyForDisplay","onFullscreenUpdate","_this$props$PosterCom","PosterComponent","Image","usePoster","createElement","style","posterStyle","posterSource","_createClass2","setNativeProps","nativeProps","nativeVideo","componentWillUnmount","unloadAsync","setOnPlaybackStatusUpdate","getStatusAsync","render","_this2","getNativeSourceFromSource","nativeResizeMode","ScaleNone","ResizeMode","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","prop","omit","concat","_toConsumableArray2","videoStyle","onStatusUpdate","_nativeOnPlaybackStatusUpdate","_nativeOnLoadStart","_nativeOnLoad","_nativeOnError","_nativeOnReadyForDisplay","_nativeOnFullscreenUpdate","View","pointerEvents","ExponentVideo","ref","_renderPoster","Component","propNames","copied","_iterator","_step","propName","assign","PlaybackMixin","_default","exports"],"sources":["../src/Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackTolerance,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nclass Video extends React.Component<VideoProps, VideoState> implements Playback {\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // Fullscreening API\n\n  _setFullscreen = async (value: boolean): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  /**\n   * This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`,\n   * native controls will be visible in fullscreen mode.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  presentFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(true);\n  };\n\n  /**\n   * This dismisses the fullscreen video view.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  dismissFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(false);\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  /**\n   * @hidden\n   */\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const { nativeSource, fullInitialStatus } =\n      await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  /**\n   * Equivalent to setting URI to `null`.\n   * @hidden\n   */\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  componentWillUnmount() {\n    // Auto unload video to perform necessary cleanup safely\n    this.unloadAsync().catch(() => {\n      // Ignored rejection. Sometimes the unloadAsync code is executed when video is already unloaded.\n      // In such cases, it throws:\n      // \"[Unhandled promise rejection: Error: Invalid view returned from registry,\n      //  expecting EXVideo, got: (null)]\"\n    });\n  }\n\n  /**\n   * Set status API, only available while `isLoaded = true`.\n   * @hidden\n   */\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // Callback wrappers\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () => {\n    const PosterComponent = this.props.PosterComponent ?? Image;\n\n    return this.props.usePoster && this.state.showPoster ? (\n      <PosterComponent\n        style={[_STYLES.poster, this.props.posterStyle]}\n        source={this.props.posterSource!}\n      />\n    ) : null;\n  };\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach((prop) => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: [_STYLES.base, this.props.style],\n      videoStyle: [_STYLES.video, this.props.videoStyle],\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={nativeProps.videoStyle} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n\n// note(simek): TypeDoc cannot resolve correctly name of inline and default exported class\nexport default Video;\n"],"mappings":"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"}