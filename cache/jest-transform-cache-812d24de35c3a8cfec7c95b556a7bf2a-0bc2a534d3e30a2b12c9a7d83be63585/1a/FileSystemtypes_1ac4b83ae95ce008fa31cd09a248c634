2e67d859b4e1b0d1adc2841fd215c7d3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileSystemUploadType = exports.FileSystemSessionType = exports.EncodingType = void 0;
var FileSystemSessionType;
exports.FileSystemSessionType = FileSystemSessionType;
(function (FileSystemSessionType) {
  FileSystemSessionType[FileSystemSessionType["BACKGROUND"] = 0] = "BACKGROUND";
  FileSystemSessionType[FileSystemSessionType["FOREGROUND"] = 1] = "FOREGROUND";
})(FileSystemSessionType || (exports.FileSystemSessionType = FileSystemSessionType = {}));
var FileSystemUploadType;
exports.FileSystemUploadType = FileSystemUploadType;
(function (FileSystemUploadType) {
  FileSystemUploadType[FileSystemUploadType["BINARY_CONTENT"] = 0] = "BINARY_CONTENT";
  FileSystemUploadType[FileSystemUploadType["MULTIPART"] = 1] = "MULTIPART";
})(FileSystemUploadType || (exports.FileSystemUploadType = FileSystemUploadType = {}));
var EncodingType;
exports.EncodingType = EncodingType;
(function (EncodingType) {
  EncodingType["UTF8"] = "utf8";
  EncodingType["Base64"] = "base64";
})(EncodingType || (exports.EncodingType = EncodingType = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,