bc43fce96788ce2934010b5c3414cbcf
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URL = exports.DNS = void 0;
exports["default"] = _default;
var _stringify = _interopRequireDefault(require("./stringify.js"));
var _parse = _interopRequireDefault(require("./parse.js"));
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;
function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }
    if (typeof namespace === 'string') {
      namespace = (0, _parse["default"])(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;
    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return (0, _stringify["default"])(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {}
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3RyaW5naWZ5IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcGFyc2UiLCJzdHJpbmdUb0J5dGVzIiwic3RyIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJieXRlcyIsImkiLCJsZW5ndGgiLCJwdXNoIiwiY2hhckNvZGVBdCIsIkROUyIsImV4cG9ydHMiLCJVUkwiLCJfZGVmYXVsdCIsIm5hbWUiLCJ2ZXJzaW9uIiwiaGFzaGZ1bmMiLCJnZW5lcmF0ZVVVSUQiLCJ2YWx1ZSIsIm5hbWVzcGFjZSIsImJ1ZiIsIm9mZnNldCIsInBhcnNlIiwiVHlwZUVycm9yIiwiVWludDhBcnJheSIsInNldCIsInN0cmluZ2lmeSIsImVyciJdLCJzb3VyY2VzIjpbInYzNS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmltcG9ydCBwYXJzZSBmcm9tICcuL3BhcnNlLmpzJztcblxuZnVuY3Rpb24gc3RyaW5nVG9CeXRlcyhzdHIpIHtcbiAgc3RyID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpOyAvLyBVVEY4IGVzY2FwZVxuXG4gIHZhciBieXRlcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgYnl0ZXMucHVzaChzdHIuY2hhckNvZGVBdChpKSk7XG4gIH1cblxuICByZXR1cm4gYnl0ZXM7XG59XG5cbmV4cG9ydCB2YXIgRE5TID0gJzZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgdmFyIFVSTCA9ICc2YmE3YjgxMS05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKG5hbWUsIHZlcnNpb24sIGhhc2hmdW5jKSB7XG4gIGZ1bmN0aW9uIGdlbmVyYXRlVVVJRCh2YWx1ZSwgbmFtZXNwYWNlLCBidWYsIG9mZnNldCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IHN0cmluZ1RvQnl0ZXModmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZXNwYWNlID0gcGFyc2UobmFtZXNwYWNlKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZXNwYWNlLmxlbmd0aCAhPT0gMTYpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignTmFtZXNwYWNlIG11c3QgYmUgYXJyYXktbGlrZSAoMTYgaXRlcmFibGUgaW50ZWdlciB2YWx1ZXMsIDAtMjU1KScpO1xuICAgIH0gLy8gQ29tcHV0ZSBoYXNoIG9mIG5hbWVzcGFjZSBhbmQgdmFsdWUsIFBlciA0LjNcbiAgICAvLyBGdXR1cmU6IFVzZSBzcHJlYWQgc3ludGF4IHdoZW4gc3VwcG9ydGVkIG9uIGFsbCBwbGF0Zm9ybXMsIGUuZy4gYGJ5dGVzID1cbiAgICAvLyBoYXNoZnVuYyhbLi4ubmFtZXNwYWNlLCAuLi4gdmFsdWVdKWBcblxuXG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMTYgKyB2YWx1ZS5sZW5ndGgpO1xuICAgIGJ5dGVzLnNldChuYW1lc3BhY2UpO1xuICAgIGJ5dGVzLnNldCh2YWx1ZSwgbmFtZXNwYWNlLmxlbmd0aCk7XG4gICAgYnl0ZXMgPSBoYXNoZnVuYyhieXRlcyk7XG4gICAgYnl0ZXNbNl0gPSBieXRlc1s2XSAmIDB4MGYgfCB2ZXJzaW9uO1xuICAgIGJ5dGVzWzhdID0gYnl0ZXNbOF0gJiAweDNmIHwgMHg4MDtcblxuICAgIGlmIChidWYpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgYnVmW29mZnNldCArIGldID0gYnl0ZXNbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBidWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZ2lmeShieXRlcyk7XG4gIH0gLy8gRnVuY3Rpb24jbmFtZSBpcyBub3Qgc2V0dGFibGUgb24gc29tZSBwbGF0Zm9ybXMgKCMyNzApXG5cblxuICB0cnkge1xuICAgIGdlbmVyYXRlVVVJRC5uYW1lID0gbmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gIH0gY2F0Y2ggKGVycikge30gLy8gRm9yIENvbW1vbkpTIGRlZmF1bHQgZXhwb3J0IHN1cHBvcnRcblxuXG4gIGdlbmVyYXRlVVVJRC5ETlMgPSBETlM7XG4gIGdlbmVyYXRlVVVJRC5VUkwgPSBVUkw7XG4gIHJldHVybiBnZW5lcmF0ZVVVSUQ7XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLFNBQVNFLGFBQWFBLENBQUNDLEdBQUcsRUFBRTtFQUMxQkEsR0FBRyxHQUFHQyxRQUFRLENBQUNDLGtCQUFrQixDQUFDRixHQUFHLENBQUMsQ0FBQztFQUV2QyxJQUFJRyxLQUFLLEdBQUcsRUFBRTtFQUVkLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSixHQUFHLENBQUNLLE1BQU0sRUFBRSxFQUFFRCxDQUFDLEVBQUU7SUFDbkNELEtBQUssQ0FBQ0csSUFBSSxDQUFDTixHQUFHLENBQUNPLFVBQVUsQ0FBQ0gsQ0FBQyxDQUFDLENBQUM7RUFDL0I7RUFFQSxPQUFPRCxLQUFLO0FBQ2Q7QUFFTyxJQUFJSyxHQUFHLEdBQUcsc0NBQXNDO0FBQUNDLE9BQUEsQ0FBQUQsR0FBQSxHQUFBQSxHQUFBO0FBQ2pELElBQUlFLEdBQUcsR0FBRyxzQ0FBc0M7QUFBQ0QsT0FBQSxDQUFBQyxHQUFBLEdBQUFBLEdBQUE7QUFDekMsU0FBQUMsU0FBVUMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRTtFQUNoRCxTQUFTQyxZQUFZQSxDQUFDQyxLQUFLLEVBQUVDLFNBQVMsRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUU7SUFDbkQsSUFBSSxPQUFPSCxLQUFLLEtBQUssUUFBUSxFQUFFO01BQzdCQSxLQUFLLEdBQUdqQixhQUFhLENBQUNpQixLQUFLLENBQUM7SUFDOUI7SUFFQSxJQUFJLE9BQU9DLFNBQVMsS0FBSyxRQUFRLEVBQUU7TUFDakNBLFNBQVMsR0FBRyxJQUFBRyxpQkFBSyxFQUFDSCxTQUFTLENBQUM7SUFDOUI7SUFFQSxJQUFJQSxTQUFTLENBQUNaLE1BQU0sS0FBSyxFQUFFLEVBQUU7TUFDM0IsTUFBTWdCLFNBQVMsQ0FBQyxrRUFBa0UsQ0FBQztJQUNyRjtJQUtBLElBQUlsQixLQUFLLEdBQUcsSUFBSW1CLFVBQVUsQ0FBQyxFQUFFLEdBQUdOLEtBQUssQ0FBQ1gsTUFBTSxDQUFDO0lBQzdDRixLQUFLLENBQUNvQixHQUFHLENBQUNOLFNBQVMsQ0FBQztJQUNwQmQsS0FBSyxDQUFDb0IsR0FBRyxDQUFDUCxLQUFLLEVBQUVDLFNBQVMsQ0FBQ1osTUFBTSxDQUFDO0lBQ2xDRixLQUFLLEdBQUdXLFFBQVEsQ0FBQ1gsS0FBSyxDQUFDO0lBQ3ZCQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUdBLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUdVLE9BQU87SUFDcENWLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBR0EsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJO0lBRWpDLElBQUllLEdBQUcsRUFBRTtNQUNQQyxNQUFNLEdBQUdBLE1BQU0sSUFBSSxDQUFDO01BRXBCLEtBQUssSUFBSWYsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFQSxDQUFDLEVBQUU7UUFDM0JjLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHZixDQUFDLENBQUMsR0FBR0QsS0FBSyxDQUFDQyxDQUFDLENBQUM7TUFDNUI7TUFFQSxPQUFPYyxHQUFHO0lBQ1o7SUFFQSxPQUFPLElBQUFNLHFCQUFTLEVBQUNyQixLQUFLLENBQUM7RUFDekI7RUFHQSxJQUFJO0lBQ0ZZLFlBQVksQ0FBQ0gsSUFBSSxHQUFHQSxJQUFJO0VBQzFCLENBQUMsQ0FBQyxPQUFPYSxHQUFHLEVBQUUsQ0FBQztFQUdmVixZQUFZLENBQUNQLEdBQUcsR0FBR0EsR0FBRztFQUN0Qk8sWUFBWSxDQUFDTCxHQUFHLEdBQUdBLEdBQUc7RUFDdEIsT0FBT0ssWUFBWTtBQUNyQiJ9