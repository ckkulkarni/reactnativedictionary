{"version":3,"names":["_blueimpMd","_interopRequireDefault","require","_expoConstants","FileSystem","_interopRequireWildcard","_expoModulesCore","_AssetUris","_NativeModulesProxy$E","_NativeModulesProxy$E2","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","IS_MANAGED_ENV","Constants","appOwnership","exports","IS_BARE_ENV_WITH_UPDATES","NativeModulesProxy","ExpoUpdates","isEnabled","isUsingEmbeddedAssets","IS_ENV_WITH_UPDATES_ENABLED","IS_BARE_ENV_WITHOUT_UPDATES","getLocalAssets","_NativeModulesProxy$E3","_NativeModulesProxy$E4","localAssets","getManifest","_Constants$__unsafeNo","__unsafeNoWarnManifest","getManifest2","__unsafeNoWarnManifest2","manifestBaseUrl","experienceUrl","getManifestBaseUrl","downloadAsync","_x","_x2","_x3","_x4","_downloadAsync","apply","arguments","_asyncToGenerator2","uri","hash","type","name","_downloadAsyncManagedEnv","_downloadAsyncUnmanagedEnv","_x5","_x6","_x7","_x8","_downloadAsyncManagedEnv2","cacheFileId","computeMd5","localUri","cacheDirectory","fileInfo","getInfoAsync","md5","exists","_yield$FileSystem$dow","Error","_x9","_x10","_x11","_downloadAsyncUnmanagedEnv2","startsWith"],"sources":["../src/PlatformUtils.ts"],"sourcesContent":["import computeMd5 from 'blueimp-md5';\nimport Constants from 'expo-constants';\nimport { Manifest } from 'expo-constants/build/Constants.types';\nimport * as FileSystem from 'expo-file-system';\nimport { NativeModulesProxy } from 'expo-modules-core';\n\nimport { getManifestBaseUrl } from './AssetUris';\n\n// Constants.appOwnership is only available in managed apps (Expo client and standalone)\nexport const IS_MANAGED_ENV = !!Constants.appOwnership;\n\n// In the future (SDK38+) expo-updates is likely to be used in managed apps, so we decide\n// that you are in a bare app with updates if you're not in a managed app and you have\n// local assets available.\nexport const IS_BARE_ENV_WITH_UPDATES =\n  !IS_MANAGED_ENV &&\n  !!NativeModulesProxy.ExpoUpdates?.isEnabled &&\n  // if expo-updates is installed but we're running directly from the embedded bundle, we don't want\n  // to override the AssetSourceResolver\n  !NativeModulesProxy.ExpoUpdates?.isUsingEmbeddedAssets;\n\nexport const IS_ENV_WITH_UPDATES_ENABLED = IS_MANAGED_ENV || IS_BARE_ENV_WITH_UPDATES;\n\n// If it's not managed or bare w/ updates, then it must be bare w/o updates!\nexport const IS_BARE_ENV_WITHOUT_UPDATES = !IS_MANAGED_ENV && !IS_BARE_ENV_WITH_UPDATES;\n\n// Get the localAssets property from the ExpoUpdates native module so that we do\n// not need to include expo-updates as a dependency of expo-asset\nexport function getLocalAssets() {\n  return NativeModulesProxy.ExpoUpdates?.localAssets ?? {};\n}\n\nexport function getManifest(): { [key: string]: any } {\n  return Constants.__unsafeNoWarnManifest ?? {};\n}\n\nexport function getManifest2(): Manifest | undefined {\n  return Constants.__unsafeNoWarnManifest2;\n}\n\n// Compute manifest base URL if available\nexport const manifestBaseUrl = Constants.experienceUrl\n  ? getManifestBaseUrl(Constants.experienceUrl)\n  : null;\n\n// TODO: how should this behave in bare app with updates? re: hashAssetFiles\nexport async function downloadAsync(uri, hash, type, name): Promise<string> {\n  if (IS_MANAGED_ENV) {\n    return _downloadAsyncManagedEnv(uri, hash, type, name);\n  }\n\n  return _downloadAsyncUnmanagedEnv(uri, hash, type);\n}\n\n/**\n * Check if the file exists on disk already, perform integrity check if so.\n * Otherwise, download it.\n */\nasync function _downloadAsyncManagedEnv(uri, hash, type, name): Promise<string> {\n  const cacheFileId = hash || computeMd5(uri);\n  const localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${type}`;\n  const fileInfo = await FileSystem.getInfoAsync(localUri, {\n    md5: true,\n  });\n  if (!fileInfo.exists || (hash !== null && fileInfo.md5 !== hash)) {\n    const { md5 } = await FileSystem.downloadAsync(uri, localUri, {\n      md5: true,\n    });\n    if (hash !== null && md5 !== hash) {\n      throw new Error(\n        `Downloaded file for asset '${name}.${type}' ` +\n          `Located at ${uri} ` +\n          `failed MD5 integrity check`\n      );\n    }\n  }\n  return localUri;\n}\n\n/**\n * Just download the asset, don't perform integrity check because we don't have\n * the hash to compare it with (we don't have hashAssetFiles plugin). Hash is\n * only used for the file name.\n */\nasync function _downloadAsyncUnmanagedEnv(uri, hash, type): Promise<string> {\n  // TODO: does this make sense to bail out if it's already at a file URL\n  // because it's already available locally?\n  if (uri.startsWith('file://')) {\n    return uri;\n  }\n\n  const cacheFileId = hash || computeMd5(uri);\n  const localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${type}`;\n\n  // We don't check the FileSystem for an existing version of the asset and we\n  // also don't perform an integrity check!\n  await FileSystem.downloadAsync(uri, localUri);\n  return localUri;\n}\n"],"mappings":"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"}