75022aad7f9e8b8b619b03b1b3cc3bda
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var _AnimatedImplementation = _interopRequireDefault(require("./AnimatedImplementation"));
var _AnimatedMock = _interopRequireDefault(require("./AnimatedMock"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Animated = _Platform.default.isTesting ? _AnimatedMock.default : _AnimatedImplementation.default;
var _default = _objectSpread({
  get FlatList() {
    return require("./components/AnimatedFlatList").default;
  },
  get Image() {
    return require("./components/AnimatedImage").default;
  },
  get ScrollView() {
    return require("./components/AnimatedScrollView").default;
  },
  get SectionList() {
    return require("./components/AnimatedSectionList").default;
  },
  get Text() {
    return require("./components/AnimatedText").default;
  },
  get View() {
    return require("./components/AnimatedView").default;
  }
}, Animated);
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGxhdGZvcm0iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9BbmltYXRlZEltcGxlbWVudGF0aW9uIiwiX0FuaW1hdGVkTW9jayIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIkFuaW1hdGVkIiwiUGxhdGZvcm0iLCJpc1Rlc3RpbmciLCJBbmltYXRlZE1vY2siLCJBbmltYXRlZEltcGxlbWVudGF0aW9uIiwiX2RlZmF1bHQiLCJGbGF0TGlzdCIsIkltYWdlIiwiU2Nyb2xsVmlldyIsIlNlY3Rpb25MaXN0IiwiVGV4dCIsIlZpZXciLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQW5pbWF0ZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuZXhwb3J0IHR5cGUge0NvbXBvc2l0ZUFuaW1hdGlvbiwgTnVtZXJpY30gZnJvbSAnLi9BbmltYXRlZEltcGxlbWVudGF0aW9uJztcblxuaW1wb3J0IHR5cGVvZiBBbmltYXRlZEZsYXRMaXN0IGZyb20gJy4vY29tcG9uZW50cy9BbmltYXRlZEZsYXRMaXN0JztcbmltcG9ydCB0eXBlb2YgQW5pbWF0ZWRJbWFnZSBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRJbWFnZSc7XG5pbXBvcnQgdHlwZW9mIEFuaW1hdGVkU2Nyb2xsVmlldyBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRTY3JvbGxWaWV3JztcbmltcG9ydCB0eXBlb2YgQW5pbWF0ZWRTZWN0aW9uTGlzdCBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRTZWN0aW9uTGlzdCc7XG5pbXBvcnQgdHlwZW9mIEFuaW1hdGVkVGV4dCBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRUZXh0JztcbmltcG9ydCB0eXBlb2YgQW5pbWF0ZWRWaWV3IGZyb20gJy4vY29tcG9uZW50cy9BbmltYXRlZFZpZXcnO1xuXG5pbXBvcnQgUGxhdGZvcm0gZnJvbSAnLi4vVXRpbGl0aWVzL1BsYXRmb3JtJztcbmltcG9ydCBBbmltYXRlZEltcGxlbWVudGF0aW9uIGZyb20gJy4vQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbic7XG5pbXBvcnQgQW5pbWF0ZWRNb2NrIGZyb20gJy4vQW5pbWF0ZWRNb2NrJztcblxuY29uc3QgQW5pbWF0ZWQgPSAoKFBsYXRmb3JtLmlzVGVzdGluZ1xuICA/IEFuaW1hdGVkTW9ja1xuICA6IEFuaW1hdGVkSW1wbGVtZW50YXRpb24pOiB0eXBlb2YgQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbik7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0IEZsYXRMaXN0KCk6IEFuaW1hdGVkRmxhdExpc3Qge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2NvbXBvbmVudHMvQW5pbWF0ZWRGbGF0TGlzdCcpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBJbWFnZSgpOiBBbmltYXRlZEltYWdlIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9jb21wb25lbnRzL0FuaW1hdGVkSW1hZ2UnKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgU2Nyb2xsVmlldygpOiBBbmltYXRlZFNjcm9sbFZpZXcge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2NvbXBvbmVudHMvQW5pbWF0ZWRTY3JvbGxWaWV3JykuZGVmYXVsdDtcbiAgfSxcbiAgZ2V0IFNlY3Rpb25MaXN0KCk6IEFuaW1hdGVkU2VjdGlvbkxpc3Qge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2NvbXBvbmVudHMvQW5pbWF0ZWRTZWN0aW9uTGlzdCcpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBUZXh0KCk6IEFuaW1hdGVkVGV4dCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vY29tcG9uZW50cy9BbmltYXRlZFRleHQnKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgVmlldygpOiBBbmltYXRlZFZpZXcge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2NvbXBvbmVudHMvQW5pbWF0ZWRWaWV3JykuZGVmYXVsdDtcbiAgfSxcbiAgLi4uQW5pbWF0ZWQsXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFtQkEsSUFBQUEsU0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsdUJBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUEwQyxTQUFBRyxRQUFBQyxNQUFBLEVBQUFDLGNBQUEsUUFBQUMsSUFBQSxHQUFBQyxNQUFBLENBQUFELElBQUEsQ0FBQUYsTUFBQSxPQUFBRyxNQUFBLENBQUFDLHFCQUFBLFFBQUFDLE9BQUEsR0FBQUYsTUFBQSxDQUFBQyxxQkFBQSxDQUFBSixNQUFBLEdBQUFDLGNBQUEsS0FBQUksT0FBQSxHQUFBQSxPQUFBLENBQUFDLE1BQUEsV0FBQUMsR0FBQSxXQUFBSixNQUFBLENBQUFLLHdCQUFBLENBQUFSLE1BQUEsRUFBQU8sR0FBQSxFQUFBRSxVQUFBLE9BQUFQLElBQUEsQ0FBQVEsSUFBQSxDQUFBQyxLQUFBLENBQUFULElBQUEsRUFBQUcsT0FBQSxZQUFBSCxJQUFBO0FBQUEsU0FBQVUsY0FBQUMsTUFBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBQUFGLENBQUEsVUFBQUcsTUFBQSxXQUFBRixTQUFBLENBQUFELENBQUEsSUFBQUMsU0FBQSxDQUFBRCxDQUFBLFFBQUFBLENBQUEsT0FBQWYsT0FBQSxDQUFBSSxNQUFBLENBQUFjLE1BQUEsT0FBQUMsT0FBQSxXQUFBQyxHQUFBLFFBQUFDLGdCQUFBLENBQUFDLE9BQUEsRUFBQVIsTUFBQSxFQUFBTSxHQUFBLEVBQUFGLE1BQUEsQ0FBQUUsR0FBQSxTQUFBaEIsTUFBQSxDQUFBbUIseUJBQUEsR0FBQW5CLE1BQUEsQ0FBQW9CLGdCQUFBLENBQUFWLE1BQUEsRUFBQVYsTUFBQSxDQUFBbUIseUJBQUEsQ0FBQUwsTUFBQSxLQUFBbEIsT0FBQSxDQUFBSSxNQUFBLENBQUFjLE1BQUEsR0FBQUMsT0FBQSxXQUFBQyxHQUFBLElBQUFoQixNQUFBLENBQUFxQixjQUFBLENBQUFYLE1BQUEsRUFBQU0sR0FBQSxFQUFBaEIsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUyxNQUFBLEVBQUFFLEdBQUEsaUJBQUFOLE1BQUE7QUFFMUMsSUFBTVksUUFBUSxHQUFLQyxpQkFBUSxDQUFDQyxTQUFTLEdBQ2pDQyxxQkFBWSxHQUNaQywrQkFBdUQ7QUFBQyxJQUFBQyxRQUFBLEdBQUFsQixhQUFBO0VBRzFELElBQUltQixRQUFRQSxDQUFBLEVBQXFCO0lBQy9CLE9BQU9uQyxPQUFPLGdDQUFnQyxDQUFDLENBQUN5QixPQUFPO0VBQ3pELENBQUM7RUFDRCxJQUFJVyxLQUFLQSxDQUFBLEVBQWtCO0lBQ3pCLE9BQU9wQyxPQUFPLDZCQUE2QixDQUFDLENBQUN5QixPQUFPO0VBQ3RELENBQUM7RUFDRCxJQUFJWSxVQUFVQSxDQUFBLEVBQXVCO0lBQ25DLE9BQU9yQyxPQUFPLGtDQUFrQyxDQUFDLENBQUN5QixPQUFPO0VBQzNELENBQUM7RUFDRCxJQUFJYSxXQUFXQSxDQUFBLEVBQXdCO0lBQ3JDLE9BQU90QyxPQUFPLG1DQUFtQyxDQUFDLENBQUN5QixPQUFPO0VBQzVELENBQUM7RUFDRCxJQUFJYyxJQUFJQSxDQUFBLEVBQWlCO0lBQ3ZCLE9BQU92QyxPQUFPLDRCQUE0QixDQUFDLENBQUN5QixPQUFPO0VBQ3JELENBQUM7RUFDRCxJQUFJZSxJQUFJQSxDQUFBLEVBQWlCO0lBQ3ZCLE9BQU94QyxPQUFPLDRCQUE0QixDQUFDLENBQUN5QixPQUFPO0VBQ3JEO0FBQUMsR0FDRUksUUFBUTtBQUFBWSxPQUFBLENBQUFoQixPQUFBLEdBQUFTLFFBQUEifQ==