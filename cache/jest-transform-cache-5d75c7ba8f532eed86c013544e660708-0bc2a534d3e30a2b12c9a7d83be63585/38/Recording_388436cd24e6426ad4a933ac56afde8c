f8ada97bb4645bd846bcc66c2827ce35
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  getPermissionsAsync: true,
  requestPermissionsAsync: true,
  usePermissions: true,
  Recording: true,
  PermissionStatus: true
};
Object.defineProperty(exports, "PermissionStatus", {
  enumerable: true,
  get: function get() {
    return _expoModulesCore.PermissionStatus;
  }
});
exports.Recording = void 0;
exports.getPermissionsAsync = getPermissionsAsync;
exports.requestPermissionsAsync = requestPermissionsAsync;
exports.usePermissions = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _expoModulesCore = require("expo-modules-core");
var _AV = require("../AV");
var _ExponentAV = _interopRequireDefault(require("../ExponentAV"));
var _AudioAvailability = require("./AudioAvailability");
var _RecordingConstants = require("./RecordingConstants");
Object.keys(_RecordingConstants).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _RecordingConstants[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _RecordingConstants[key];
    }
  });
});
var _Sound = require("./Sound");
var _Recording = require("./Recording.types");
Object.keys(_Recording).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Recording[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Recording[key];
    }
  });
});
var _class;
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _recorderExists = false;
var eventEmitter = _expoModulesCore.Platform.OS === 'android' ? new _expoModulesCore.EventEmitter(_ExponentAV.default) : null;
function getPermissionsAsync() {
  return _getPermissionsAsync.apply(this, arguments);
}
function _getPermissionsAsync() {
  _getPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {
    return _ExponentAV.default.getPermissionsAsync();
  });
  return _getPermissionsAsync.apply(this, arguments);
}
function requestPermissionsAsync() {
  return _requestPermissionsAsync.apply(this, arguments);
}
function _requestPermissionsAsync() {
  _requestPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {
    return _ExponentAV.default.requestPermissionsAsync();
  });
  return _requestPermissionsAsync.apply(this, arguments);
}
var usePermissions = (0, _expoModulesCore.createPermissionHook)({
  getMethod: getPermissionsAsync,
  requestMethod: requestPermissionsAsync
});
exports.usePermissions = usePermissions;
var Recording = function () {
  function Recording() {
    var _this = this;
    (0, _classCallCheck2.default)(this, Recording);
    this._subscription = null;
    this._canRecord = false;
    this._isDoneRecording = false;
    this._finalDurationMillis = 0;
    this._uri = null;
    this._onRecordingStatusUpdate = null;
    this._progressUpdateTimeoutVariable = null;
    this._progressUpdateIntervalMillis = _AV._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;
    this._options = null;
    this._cleanupForUnloadedRecorder = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (finalStatus) {
        var _finalStatus$duration;
        _this._canRecord = false;
        _this._isDoneRecording = true;
        _this._finalDurationMillis = (_finalStatus$duration = finalStatus == null ? void 0 : finalStatus.durationMillis) != null ? _finalStatus$duration : 0;
        _recorderExists = false;
        if (_this._subscription) {
          _this._subscription.remove();
          _this._subscription = null;
        }
        _this._disablePolling();
        return yield _this.getStatusAsync();
      });
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
    this._pollingLoop = (0, _asyncToGenerator2.default)(function* () {
      if ((0, _AudioAvailability.isAudioEnabled)() && _this._canRecord && _this._onRecordingStatusUpdate != null) {
        _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);
        try {
          yield _this.getStatusAsync();
        } catch (_unused) {
          _this._disablePolling();
        }
      }
    });
    this.getStatusAsync = (0, _asyncToGenerator2.default)(function* () {
      if (_this._canRecord) {
        return _this._performOperationAndHandleStatusAsync(function () {
          return _ExponentAV.default.getAudioRecordingStatus();
        });
      }
      var status = {
        canRecord: false,
        isRecording: false,
        isDoneRecording: _this._isDoneRecording,
        durationMillis: _this._finalDurationMillis
      };
      _this._callOnRecordingStatusUpdateForNewStatus(status);
      return status;
    });
  }
  (0, _createClass2.default)(Recording, [{
    key: "_disablePolling",
    value: function _disablePolling() {
      if (this._progressUpdateTimeoutVariable != null) {
        clearTimeout(this._progressUpdateTimeoutVariable);
        this._progressUpdateTimeoutVariable = null;
      }
    }
  }, {
    key: "_enablePollingIfNecessaryAndPossible",
    value: function _enablePollingIfNecessaryAndPossible() {
      if ((0, _AudioAvailability.isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {
        this._disablePolling();
        this._pollingLoop();
      }
    }
  }, {
    key: "_callOnRecordingStatusUpdateForNewStatus",
    value: function _callOnRecordingStatusUpdateForNewStatus(status) {
      if (this._onRecordingStatusUpdate != null) {
        this._onRecordingStatusUpdate(status);
      }
    }
  }, {
    key: "_performOperationAndHandleStatusAsync",
    value: function () {
      var _performOperationAndHandleStatusAsync2 = (0, _asyncToGenerator2.default)(function* (operation) {
        (0, _AudioAvailability.throwIfAudioIsDisabled)();
        if (this._canRecord) {
          var status = yield operation();
          this._callOnRecordingStatusUpdateForNewStatus(status);
          return status;
        } else {
          throw new Error('Cannot complete operation because this recorder is not ready to record.');
        }
      });
      function _performOperationAndHandleStatusAsync(_x2) {
        return _performOperationAndHandleStatusAsync2.apply(this, arguments);
      }
      return _performOperationAndHandleStatusAsync;
    }()
  }, {
    key: "setOnRecordingStatusUpdate",
    value: function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {
      this._onRecordingStatusUpdate = onRecordingStatusUpdate;
      if (onRecordingStatusUpdate == null) {
        this._disablePolling();
      } else {
        this._enablePollingIfNecessaryAndPossible();
      }
      this.getStatusAsync();
    }
  }, {
    key: "setProgressUpdateInterval",
    value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {
      this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;
      this.getStatusAsync();
    }
  }, {
    key: "prepareToRecordAsync",
    value: function () {
      var _prepareToRecordAsync = (0, _asyncToGenerator2.default)(function* () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY;
        (0, _AudioAvailability.throwIfAudioIsDisabled)();
        if (_recorderExists) {
          throw new Error('Only one Recording object can be prepared at a given time.');
        }
        if (this._isDoneRecording) {
          throw new Error('This Recording object is done recording; you must make a new one.');
        }
        if (!options || !options.android || !options.ios) {
          throw new Error('You must provide recording options for android and ios in order to prepare to record.');
        }
        var extensionRegex = /^\.\w+$/;
        if (!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension)) {
          throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);
        }
        if (!this._canRecord) {
          if (eventEmitter) {
            this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);
          }
          var _yield$ExponentAV$pre = yield _ExponentAV.default.prepareAudioRecorder(options),
            uri = _yield$ExponentAV$pre.uri,
            status = _yield$ExponentAV$pre.status;
          _recorderExists = true;
          this._uri = uri;
          this._options = options;
          this._canRecord = true;
          var currentStatus = _objectSpread(_objectSpread({}, status), {}, {
            canRecord: true
          });
          this._callOnRecordingStatusUpdateForNewStatus(currentStatus);
          this._enablePollingIfNecessaryAndPossible();
          return currentStatus;
        } else {
          throw new Error('This Recording object is already prepared to record.');
        }
      });
      function prepareToRecordAsync() {
        return _prepareToRecordAsync.apply(this, arguments);
      }
      return prepareToRecordAsync;
    }()
  }, {
    key: "getAvailableInputs",
    value: function () {
      var _getAvailableInputs = (0, _asyncToGenerator2.default)(function* () {
        return _ExponentAV.default.getAvailableInputs();
      });
      function getAvailableInputs() {
        return _getAvailableInputs.apply(this, arguments);
      }
      return getAvailableInputs;
    }()
  }, {
    key: "getCurrentInput",
    value: function () {
      var _getCurrentInput = (0, _asyncToGenerator2.default)(function* () {
        return _ExponentAV.default.getCurrentInput();
      });
      function getCurrentInput() {
        return _getCurrentInput.apply(this, arguments);
      }
      return getCurrentInput;
    }()
  }, {
    key: "setInput",
    value: function () {
      var _setInput = (0, _asyncToGenerator2.default)(function* (inputUid) {
        return _ExponentAV.default.setInput(inputUid);
      });
      function setInput(_x3) {
        return _setInput.apply(this, arguments);
      }
      return setInput;
    }()
  }, {
    key: "startAsync",
    value: function () {
      var _startAsync = (0, _asyncToGenerator2.default)(function* () {
        return this._performOperationAndHandleStatusAsync(function () {
          return _ExponentAV.default.startAudioRecording();
        });
      });
      function startAsync() {
        return _startAsync.apply(this, arguments);
      }
      return startAsync;
    }()
  }, {
    key: "pauseAsync",
    value: function () {
      var _pauseAsync = (0, _asyncToGenerator2.default)(function* () {
        return this._performOperationAndHandleStatusAsync(function () {
          return _ExponentAV.default.pauseAudioRecording();
        });
      });
      function pauseAsync() {
        return _pauseAsync.apply(this, arguments);
      }
      return pauseAsync;
    }()
  }, {
    key: "stopAndUnloadAsync",
    value: function () {
      var _stopAndUnloadAsync = (0, _asyncToGenerator2.default)(function* () {
        var _stopResult;
        if (!this._canRecord) {
          if (this._isDoneRecording) {
            throw new Error('Cannot unload a Recording that has already been unloaded.');
          } else {
            throw new Error('Cannot unload a Recording that has not been prepared.');
          }
        }
        var stopResult;
        var stopError;
        try {
          stopResult = yield _ExponentAV.default.stopAudioRecording();
        } catch (err) {
          stopError = err;
        }
        if (_expoModulesCore.Platform.OS === 'web' && ((_stopResult = stopResult) == null ? void 0 : _stopResult.uri) !== undefined) {
          this._uri = stopResult.uri;
        }
        yield _ExponentAV.default.unloadAudioRecorder();
        var status = yield this._cleanupForUnloadedRecorder(stopResult);
        return stopError ? Promise.reject(stopError) : status;
      });
      function stopAndUnloadAsync() {
        return _stopAndUnloadAsync.apply(this, arguments);
      }
      return stopAndUnloadAsync;
    }()
  }, {
    key: "getURI",
    value: function getURI() {
      return this._uri;
    }
  }, {
    key: "createNewLoadedSound",
    value: function () {
      var _createNewLoadedSound = (0, _asyncToGenerator2.default)(function* () {
        var initialStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var onPlaybackStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        console.warn(`createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`);
        return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);
      });
      function createNewLoadedSound() {
        return _createNewLoadedSound.apply(this, arguments);
      }
      return createNewLoadedSound;
    }()
  }, {
    key: "createNewLoadedSoundAsync",
    value: function () {
      var _createNewLoadedSoundAsync = (0, _asyncToGenerator2.default)(function* () {
        var initialStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var onPlaybackStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        if (this._uri == null || !this._isDoneRecording) {
          throw new Error('Cannot create sound when the Recording has not finished!');
        }
        return _Sound.Sound.createAsync({
          uri: this._uri
        }, initialStatus, onPlaybackStatusUpdate, false);
      });
      function createNewLoadedSoundAsync() {
        return _createNewLoadedSoundAsync.apply(this, arguments);
      }
      return createNewLoadedSoundAsync;
    }()
  }]);
  return Recording;
}();
exports.Recording = Recording;
_class = Recording;
Recording.createAsync = (0, _asyncToGenerator2.default)(function* () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY;
  var onRecordingStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var progressUpdateIntervalMillis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var recording = new _class();
  if (progressUpdateIntervalMillis) {
    recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;
  }
  recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);
  yield recording.prepareToRecordAsync(_objectSpread(_objectSpread({}, options), {}, {
    keepAudioActiveHint: true
  }));
  try {
    var status = yield recording.startAsync();
    return {
      recording: recording,
      status: status
    };
  } catch (err) {
    recording.stopAndUnloadAsync();
    throw err;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,