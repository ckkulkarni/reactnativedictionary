294d8847dc5fd9e18ec58a46097d43fd
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserInterfaceIdiom = exports.ExecutionEnvironment = exports.AppOwnership = void 0;
var AppOwnership;
exports.AppOwnership = AppOwnership;
(function (AppOwnership) {
  AppOwnership["Standalone"] = "standalone";
  AppOwnership["Expo"] = "expo";
  AppOwnership["Guest"] = "guest";
})(AppOwnership || (exports.AppOwnership = AppOwnership = {}));
var ExecutionEnvironment;
exports.ExecutionEnvironment = ExecutionEnvironment;
(function (ExecutionEnvironment) {
  ExecutionEnvironment["Bare"] = "bare";
  ExecutionEnvironment["Standalone"] = "standalone";
  ExecutionEnvironment["StoreClient"] = "storeClient";
})(ExecutionEnvironment || (exports.ExecutionEnvironment = ExecutionEnvironment = {}));
var UserInterfaceIdiom;
exports.UserInterfaceIdiom = UserInterfaceIdiom;
(function (UserInterfaceIdiom) {
  UserInterfaceIdiom["Handset"] = "handset";
  UserInterfaceIdiom["Tablet"] = "tablet";
  UserInterfaceIdiom["Unsupported"] = "unsupported";
})(UserInterfaceIdiom || (exports.UserInterfaceIdiom = UserInterfaceIdiom = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBcHBPd25lcnNoaXAiLCJleHBvcnRzIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJVc2VySW50ZXJmYWNlSWRpb20iXSwic291cmNlcyI6WyIuLi9zcmMvQ29uc3RhbnRzLnR5cGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cG9Db25maWcgfSBmcm9tICdAZXhwby9jb25maWctdHlwZXMnO1xuXG4vLyBAbmVlZHNBdWRpdFxuZXhwb3J0IGVudW0gQXBwT3duZXJzaGlwIHtcbiAgLyoqXG4gICAqIEl0IGlzIGEgW3N0YW5kYWxvbmUgYXBwXSgvY2xhc3NpYy9idWlsZGluZy1zdGFuZGFsb25lLWFwcHMjYnVpbGRpbmctc3RhbmRhbG9uZS1hcHBzKS5cbiAgICovXG4gIFN0YW5kYWxvbmUgPSAnc3RhbmRhbG9uZScsXG4gIC8qKlxuICAgKiBUaGUgZXhwZXJpZW5jZSBpcyBydW5uaW5nIGluc2lkZSBvZiB0aGUgRXhwbyBHbyBhcHAuXG4gICAqL1xuICBFeHBvID0gJ2V4cG8nLFxuICAvKipcbiAgICogSXQgaGFzIGJlZW4gb3BlbmVkIHRocm91Z2ggYSBsaW5rIGZyb20gYSBzdGFuZGFsb25lIGFwcC5cbiAgICovXG4gIEd1ZXN0ID0gJ2d1ZXN0Jyxcbn1cblxuLy8gQGRvY3NNaXNzaW5nXG5leHBvcnQgZW51bSBFeGVjdXRpb25FbnZpcm9ubWVudCB7XG4gIEJhcmUgPSAnYmFyZScsXG4gIFN0YW5kYWxvbmUgPSAnc3RhbmRhbG9uZScsXG4gIFN0b3JlQ2xpZW50ID0gJ3N0b3JlQ2xpZW50Jyxcbn1cblxuLy8gQG5lZWRzQXVkaXRcbi8qKlxuICogQ3VycmVudCBzdXBwb3J0ZWQgdmFsdWVzIGFyZSBgaGFuZHNldGAgYW5kIGB0YWJsZXRgLiBBcHBsZSBUViBhbmQgQ2FyUGxheSB3aWxsIHNob3cgdXBcbiAqIGFzIGB1bnN1cHBvcnRlZGAuXG4gKi9cbmV4cG9ydCBlbnVtIFVzZXJJbnRlcmZhY2VJZGlvbSB7XG4gIEhhbmRzZXQgPSAnaGFuZHNldCcsXG4gIFRhYmxldCA9ICd0YWJsZXQnLFxuICBVbnN1cHBvcnRlZCA9ICd1bnN1cHBvcnRlZCcsXG59XG5cbi8vIEBuZWVkc0F1ZGl0XG5leHBvcnQgaW50ZXJmYWNlIElPU01hbmlmZXN0IHtcbiAgLyoqXG4gICAqIFRoZSBidWlsZCBudW1iZXIgc3BlY2lmaWVkIGluIHRoZSBlbWJlZGRlZCAqKkluZm8ucGxpc3QqKiB2YWx1ZSBmb3IgYENGQnVuZGxlVmVyc2lvbmAgaW4gdGhpcyBhcHAuXG4gICAqIEluIGEgc3RhbmRhbG9uZSBhcHAsIHlvdSBjYW4gc2V0IHRoaXMgd2l0aCB0aGUgYGlvcy5idWlsZE51bWJlcmAgdmFsdWUgaW4gKiphcHAuanNvbioqLiBUaGlzXG4gICAqIG1heSBkaWZmZXIgZnJvbSB0aGUgdmFsdWUgaW4gYENvbnN0YW50cy5leHBvQ29uZmlnLmlvcy5idWlsZE51bWJlcmAgYmVjYXVzZSB0aGUgbWFuaWZlc3RcbiAgICogY2FuIGJlIHVwZGF0ZWQsIHdoZXJlYXMgdGhpcyB2YWx1ZSB3aWxsIG5ldmVyIGNoYW5nZSBmb3IgYSBnaXZlbiBuYXRpdmUgYmluYXJ5LlxuICAgKiBUaGUgdmFsdWUgaXMgc2V0IHRvIGBudWxsYCBpbiBjYXNlIHlvdSBydW4geW91ciBhcHAgaW4gRXhwbyBHby5cbiAgICovXG4gIGJ1aWxkTnVtYmVyOiBzdHJpbmcgfCBudWxsO1xuICAvKipcbiAgICogVGhlIEFwcGxlIGludGVybmFsIG1vZGVsIGlkZW50aWZpZXIgZm9yIHRoaXMgZGV2aWNlLCBlLmcuIGBpUGhvbmUxLDFgLlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYGV4cG8tZGV2aWNlYCdzIFtgRGV2aWNlLm1vZGVsSWRgXSguL2RldmljZS8jZGV2aWNlbW9kZWxpZCkuXG4gICAqL1xuICBwbGF0Zm9ybTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGh1bWFuLXJlYWRhYmxlIG1vZGVsIG5hbWUgb2YgdGhpcyBkZXZpY2UsIGUuZy4gYFwiaVBob25lIDcgUGx1c1wiYCBpZiBpdCBjYW4gYmUgZGV0ZXJtaW5lZCxcbiAgICogb3RoZXJ3aXNlIHdpbGwgYmUgYG51bGxgLlxuICAgKiBAZGVwcmVjYXRlZCBNb3ZlZCB0byBgZXhwby1kZXZpY2VgIGFzIFtgRGV2aWNlLm1vZGVsTmFtZWBdKC4vZGV2aWNlLyNkZXZpY2Vtb2RlbG5hbWUpLlxuICAgKi9cbiAgbW9kZWw6IHN0cmluZyB8IG51bGw7XG4gIC8qKlxuICAgKiBUaGUgdXNlciBpbnRlcmZhY2UgaWRpb20gb2YgdGhpcyBkZXZpY2UsIGkuZS4gd2hldGhlciB0aGUgYXBwIGlzIHJ1bm5pbmcgb24gYW4gaVBob25lIG9yIGFuIGlQYWQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgZXhwby1kZXZpY2VgJ3MgW2BEZXZpY2UuZ2V0RGV2aWNlVHlwZUFzeW5jKClgXSguL2RldmljZS8jZGV2aWNlZ2V0ZGV2aWNldHlwZWFzeW5jKS5cbiAgICovXG4gIHVzZXJJbnRlcmZhY2VJZGlvbTogVXNlckludGVyZmFjZUlkaW9tO1xuICAvKipcbiAgICogVGhlIHZlcnNpb24gb2YgaU9TIHJ1bm5pbmcgb24gdGhpcyBkZXZpY2UsIGUuZy4gYDEwLjNgLlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYGV4cG8tZGV2aWNlYCdzIFtgRGV2aWNlLm9zVmVyc2lvbmBdKC4vZGV2aWNlLyNkZXZpY2Vvc3ZlcnNpb24pLlxuICAgKi9cbiAgc3lzdGVtVmVyc2lvbjogc3RyaW5nO1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbi8vIEBuZWVkc0F1ZGl0XG5leHBvcnQgaW50ZXJmYWNlIEFuZHJvaWRNYW5pZmVzdCB7XG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBjb2RlIHNldCBieSBgYW5kcm9pZC52ZXJzaW9uQ29kZWAgaW4gYXBwLmpzb24uXG4gICAqIFRoZSB2YWx1ZSBpcyBzZXQgdG8gYG51bGxgIGluIGNhc2UgeW91IHJ1biB5b3VyIGFwcCBpbiBFeHBvIEdvLlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYGV4cG8tYXBwbGljYXRpb25gJ3MgW2BBcHBsaWNhdGlvbi5uYXRpdmVCdWlsZFZlcnNpb25gXSguL2FwcGxpY2F0aW9uLyNhcHBsaWNhdGlvbm5hdGl2ZWJ1aWxkdmVyc2lvbikuXG4gICAqL1xuICB2ZXJzaW9uQ29kZTogbnVtYmVyO1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2ViTWFuaWZlc3Qge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbi8vIEBkb2NzTWlzc2luZ1xuZXhwb3J0IGludGVyZmFjZSBNYW5pZmVzdEFzc2V0IHtcbiAgdXJsOiBzdHJpbmc7XG59XG5cbi8vIEBuZWVkc0F1ZGl0IEBkb2NzTWlzc2luZ1xuLyoqXG4gKiBBIG1vZGVybiBtYW5pZmVzdC5cbiAqL1xuZXhwb3J0IHR5cGUgTWFuaWZlc3QgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xuICBydW50aW1lVmVyc2lvbjogc3RyaW5nO1xuICBsYXVuY2hBc3NldDogTWFuaWZlc3RBc3NldDtcbiAgYXNzZXRzOiBNYW5pZmVzdEFzc2V0W107XG4gIG1ldGFkYXRhOiBvYmplY3Q7XG4gIGV4dHJhPzogTWFuaWZlc3RFeHRyYTtcbn07XG5cbi8vIEBkb2NzTWlzc2luZ1xuZXhwb3J0IHR5cGUgTWFuaWZlc3RFeHRyYSA9IENsaWVudFNjb3BpbmdDb25maWcgJiB7XG4gIGV4cG9DbGllbnQ/OiBFeHBvQ29uZmlnICYge1xuICAgIC8qKlxuICAgICAqIE9ubHkgcHJlc2VudCBkdXJpbmcgZGV2ZWxvcG1lbnQgdXNpbmcgQGV4cG8vY2xpLlxuICAgICAqL1xuICAgIGhvc3RVcmk/OiBzdHJpbmc7XG4gIH07XG4gIGV4cG9Hbz86IEV4cG9Hb0NvbmZpZztcbiAgZWFzPzogRUFTQ29uZmlnO1xufTtcblxuLy8gQG5lZWRzQXVkaXRcbmV4cG9ydCB0eXBlIEVBU0NvbmZpZyA9IHtcbiAgLyoqXG4gICAqIFRoZSBJRCBmb3IgdGhpcyBwcm9qZWN0IGlmIGl0J3MgdXNpbmcgRUFTLiBVVUlELiBUaGlzIHZhbHVlIHdpbGwgbm90IGNoYW5nZSB3aGVuIGEgcHJvamVjdCBpc1xuICAgKiB0cmFuc2ZlcnJlZCBiZXR3ZWVuIGFjY291bnRzIG9yIHJlbmFtZWQuXG4gICAqL1xuICBwcm9qZWN0SWQ/OiBzdHJpbmc7XG59O1xuXG4vLyBAbmVlZHNBdWRpdFxuZXhwb3J0IHR5cGUgQ2xpZW50U2NvcGluZ0NvbmZpZyA9IHtcbiAgLyoqXG4gICAqIEFuIG9wYXF1ZSB1bmlxdWUgc3RyaW5nIGZvciBzY29waW5nIGNsaWVudC1zaWRlIGRhdGEgdG8gdGhpcyBwcm9qZWN0LiBUaGlzIHZhbHVlXG4gICAqIHdpbGwgbm90IGNoYW5nZSB3aGVuIGEgcHJvamVjdCBpcyB0cmFuc2ZlcnJlZCBiZXR3ZWVuIGFjY291bnRzIG9yIHJlbmFtZWQuXG4gICAqL1xuICBzY29wZUtleT86IHN0cmluZztcbn07XG5cbi8vIEBkb2NzTWlzc2luZ1xuZXhwb3J0IHR5cGUgRXhwb0dvQ29uZmlnID0ge1xuICBtYWluTW9kdWxlTmFtZT86IHN0cmluZztcbiAgZGVidWdnZXJIb3N0Pzogc3RyaW5nO1xuICBsb2dVcmw/OiBzdHJpbmc7XG4gIGRldmVsb3Blcj86IHtcbiAgICB0b29sPzogc3RyaW5nO1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgfTtcbiAgcGFja2FnZXJPcHRzPzogRXhwb0dvUGFja2FnZXJPcHRzO1xufTtcblxuLy8gQGRvY3NNaXNzaW5nXG5leHBvcnQgdHlwZSBFeHBvR29QYWNrYWdlck9wdHMgPSB7XG4gIGhvc3RUeXBlPzogc3RyaW5nO1xuICBkZXY/OiBib29sZWFuO1xuICBzdHJpY3Q/OiBib29sZWFuO1xuICBtaW5pZnk/OiBib29sZWFuO1xuICB1cmxUeXBlPzogc3RyaW5nO1xuICB1cmxSYW5kb21uZXNzPzogc3RyaW5nO1xuICBsYW5UeXBlPzogc3RyaW5nO1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59O1xuXG5leHBvcnQgdHlwZSBFeHBvQ2xpZW50Q29uZmlnID0gRXhwb0NvbmZpZyAmIHtcbiAgLyoqXG4gICAqIFB1Ymxpc2hlZCBhcHBzIG9ubHkuXG4gICAqL1xuICByZWxlYXNlSWQ/OiBzdHJpbmc7XG4gIHJldmlzaW9uSWQ/OiBzdHJpbmc7XG4gIHJlbGVhc2VDaGFubmVsPzogc3RyaW5nO1xuICBidW5kbGVVcmw6IHN0cmluZztcbiAgaG9zdFVyaT86IHN0cmluZztcbiAgcHVibGlzaGVkVGltZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBFeHBvIGFjY291bnQgbmFtZSBhbmQgc2x1ZyBmb3IgdGhpcyBwcm9qZWN0LlxuICAgKiBAZGVwcmVjYXRlZCBQcmVmZXIgYHByb2plY3RJZGAgb3IgYG9yaWdpbmFsRnVsbE5hbWVgIGluc3RlYWQgZm9yIGlkZW50aWZpY2F0aW9uIGFuZFxuICAgKiBgc2NvcGVLZXlgIGZvciBzY29waW5nIGR1ZSB0byBpbW11dGFiaWxpdHkuXG4gICAqL1xuICBpZD86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBvcmlnaW5hbCBFeHBvIGFjY291bnQgbmFtZSBhbmQgc2x1ZyBmb3IgdGhpcyBwcm9qZWN0LiBGb3JtYXR0ZWQgbGlrZSBgQHVzZXJuYW1lL3NsdWdgLlxuICAgKiBXaGVuIHVuYXV0aGVudGljYXRlZCwgdGhlIHVzZXJuYW1lIGlzIGBAYW5vbnltb3VzYC4gRm9yIHB1Ymxpc2hlZCBwcm9qZWN0cywgdGhpcyB2YWx1ZVxuICAgKiB3aWxsIG5vdCBjaGFuZ2Ugd2hlbiBhIHByb2plY3QgaXMgdHJhbnNmZXJyZWQgYmV0d2VlbiBhY2NvdW50cyBvciByZW5hbWVkLlxuICAgKi9cbiAgb3JpZ2luYWxGdWxsTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBFeHBvIGFjY291bnQgbmFtZSBhbmQgc2x1ZyB1c2VkIGZvciBkaXNwbGF5IHB1cnBvc2VzLiBGb3JtYXR0ZWQgbGlrZSBgQHVzZXJuYW1lL3NsdWdgLlxuICAgKiBXaGVuIHVuYXV0aGVudGljYXRlZCwgdGhlIHVzZXJuYW1lIGlzIGBAYW5vbnltb3VzYC4gRm9yIHB1Ymxpc2hlZCBwcm9qZWN0cywgdGhpcyB2YWx1ZVxuICAgKiBtYXkgY2hhbmdlIHdoZW4gYSBwcm9qZWN0IGlzIHRyYW5zZmVycmVkIGJldHdlZW4gYWNjb3VudHMgb3IgcmVuYW1lZC5cbiAgICovXG4gIGN1cnJlbnRGdWxsTmFtZT86IHN0cmluZztcbn07XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBpbnRlcnNlY3Rpb24gb2YgYWxsIHBvc3NpYmxlIENvbmZpZyB0eXBlcy5cbiAqL1xuZXhwb3J0IHR5cGUgQXBwTWFuaWZlc3QgPSBFeHBvQ2xpZW50Q29uZmlnICZcbiAgRXhwb0dvQ29uZmlnICZcbiAgRUFTQ29uZmlnICZcbiAgQ2xpZW50U2NvcGluZ0NvbmZpZyAmXG4gIFJlY29yZDxzdHJpbmcsIGFueT47XG5cbi8vIEBuZWVkc0F1ZGl0IEBkb2NzTWlzc2luZ1xuZXhwb3J0IGludGVyZmFjZSBQbGF0Zm9ybU1hbmlmZXN0IHtcbiAgaW9zPzogSU9TTWFuaWZlc3Q7XG4gIGFuZHJvaWQ/OiBBbmRyb2lkTWFuaWZlc3Q7XG4gIHdlYj86IFdlYk1hbmlmZXN0O1xuICBkZXRhY2g/OiB7XG4gICAgc2NoZW1lPzogc3RyaW5nO1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgfTtcbiAgbG9nVXJsPzogc3RyaW5nO1xuICBzY2hlbWU/OiBzdHJpbmc7XG4gIGhvc3RVcmk/OiBzdHJpbmc7XG4gIGRldmVsb3Blcj86IHN0cmluZztcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG4vLyBAbmVlZHNBdWRpdCBAZG9jc01pc3NpbmdcbmV4cG9ydCBpbnRlcmZhY2UgTmF0aXZlQ29uc3RhbnRzIHtcbiAgLyoqXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIG5hbWU6ICdFeHBvbmVudENvbnN0YW50cyc7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGBleHBvYCwgYHN0YW5kYWxvbmVgLCBvciBgZ3Vlc3RgLiBUaGlzIHByb3BlcnR5IG9ubHkgYXBwbGllcyB0byB0aGUgbWFuYWdlZCB3b3JrZmxvd1xuICAgKiBhbmQgY2xhc3NpYyBidWlsZHM7IGZvciBhcHBzIGJ1aWx0IHdpdGggRUFTIEJ1aWxkIGFuZCBpbiBiYXJlIHdvcmtmbG93LCB0aGUgcmVzdWx0IGlzXG4gICAqIGFsd2F5cyBgbnVsbGAuXG4gICAqL1xuICBhcHBPd25lcnNoaXA6IEFwcE93bmVyc2hpcCB8IG51bGw7XG4gIGRlYnVnTW9kZTogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEEgaHVtYW4tcmVhZGFibGUgbmFtZSBmb3IgdGhlIGRldmljZSB0eXBlLlxuICAgKi9cbiAgZGV2aWNlTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBbZGV2aWNlIHllYXIgY2xhc3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9kZXZpY2UteWVhci1jbGFzcykgb2YgdGhpcyBkZXZpY2UuXG4gICAqIEBkZXByZWNhdGVkIE1vdmVkIHRvIGBleHBvLWRldmljZWAgYXMgW2BEZXZpY2UuZGV2aWNlWWVhckNsYXNzYF0oLi9kZXZpY2UvI2RldmljZXllYXJjbGFzcykuXG4gICAqL1xuICBkZXZpY2VZZWFyQ2xhc3M6IG51bWJlciB8IG51bGw7XG4gIGV4ZWN1dGlvbkVudmlyb25tZW50OiBFeGVjdXRpb25FbnZpcm9ubWVudDtcbiAgZXhwZXJpZW5jZVVybDogc3RyaW5nO1xuICAvLyBvbmx5IG51bGxhYmxlIG9uIHdlYlxuICBleHBvUnVudGltZVZlcnNpb246IHN0cmluZyB8IG51bGw7XG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBzdHJpbmcgb2YgdGhlIEV4cG8gR28gYXBwIGN1cnJlbnRseSBydW5uaW5nLlxuICAgKiBSZXR1cm5zIGBudWxsYCBpbiBiYXJlIHdvcmtmbG93IGFuZCB3ZWIuXG4gICAqL1xuICBleHBvVmVyc2lvbjogc3RyaW5nIHwgbnVsbDtcbiAgaXNEZXRhY2hlZD86IGJvb2xlYW47XG4gIGludGVudFVyaT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFuIGlkZW50aWZpZXIgdGhhdCBpcyB1bmlxdWUgdG8gdGhpcyBwYXJ0aWN1bGFyIGRldmljZSBhbmQgd2hvc2UgbGlmZXRpbWUgaXMgYXQgbGVhc3QgYXMgbG9uZ1xuICAgKiBhcyB0aGUgaW5zdGFsbGF0aW9uIG9mIHRoZSBhcHAuXG4gICAqIEBkZXByZWNhdGVkIGBDb25zdGFudHMuaW5zdGFsbGF0aW9uSWRgIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgZ2VuZXJhdGluZyB5b3VyIG93biBJRCBhbmRcbiAgICogc3RvcmluZyBpdC5cbiAgICovXG4gIGluc3RhbGxhdGlvbklkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBgdHJ1ZWAgaWYgdGhlIGFwcCBpcyBydW5uaW5nIG9uIGEgZGV2aWNlLCBgZmFsc2VgIGlmIHJ1bm5pbmcgaW4gYSBzaW11bGF0b3Igb3IgZW11bGF0b3IuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgZXhwby1kZXZpY2VgJ3MgW2BEZXZpY2UuaXNEZXZpY2VgXSguL2RldmljZS8jZGV2aWNlaXNkZXZpY2UpLlxuICAgKi9cbiAgaXNEZXZpY2U6IGJvb2xlYW47XG4gIGlzSGVhZGxlc3M6IGJvb2xlYW47XG4gIGxpbmtpbmdVcmk6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSAqKkluZm8ucGxpc3QqKiB2YWx1ZSBmb3IgYENGQnVuZGxlU2hvcnRWZXJzaW9uU3RyaW5nYCBvbiBpT1MgYW5kIHRoZSB2ZXJzaW9uIG5hbWUgc2V0XG4gICAqIGJ5IGB2ZXJzaW9uYCBpbiBhcHAuanNvbiBvbiBBbmRyb2lkIGF0IHRoZSB0aW1lIHRoZSBuYXRpdmUgYXBwIHdhcyBidWlsdC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBleHBvLWFwcGxpY2F0aW9uYCdzIFtgQXBwbGljYXRpb24ubmF0aXZlQXBwbGljYXRpb25WZXJzaW9uYF0oLi9hcHBsaWNhdGlvbi8jYXBwbGljYXRpb25uYXRpdmVhcHBsaWNhdGlvbnZlcnNpb24pLlxuICAgKi9cbiAgbmF0aXZlQXBwVmVyc2lvbjogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIFRoZSAqKkluZm8ucGxpc3QqKiB2YWx1ZSBmb3IgYENGQnVuZGxlVmVyc2lvbmAgb24gaU9TIChzZXQgd2l0aCBgaW9zLmJ1aWxkTnVtYmVyYCB2YWx1ZSBpblxuICAgKiAqKmFwcC5qc29uKiogaW4gYSBzdGFuZGFsb25lIGFwcCkgYW5kIHRoZSB2ZXJzaW9uIGNvZGUgc2V0IGJ5IGBhbmRyb2lkLnZlcnNpb25Db2RlYCBpblxuICAgKiAqKmFwcC5qc29uKiogb24gQW5kcm9pZCBhdCB0aGUgdGltZSB0aGUgbmF0aXZlIGFwcCB3YXMgYnVpbHQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgZXhwby1hcHBsaWNhdGlvbmAncyBbYEFwcGxpY2F0aW9uLm5hdGl2ZUJ1aWxkVmVyc2lvbmBdKC4vYXBwbGljYXRpb24vI2FwcGxpY2F0aW9ubmF0aXZlYnVpbGR2ZXJzaW9uKS5cbiAgICovXG4gIG5hdGl2ZUJ1aWxkVmVyc2lvbjogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIENsYXNzaWMgbWFuaWZlc3QgZm9yIEV4cG8gYXBwcyB1c2luZyBjbGFzc2ljIHVwZGF0ZXMgYW5kIHRoZSB1cGRhdGVzIGVtYmVkZGVkIGluIGJ1aWxkcy5cbiAgICogUmV0dXJucyBgbnVsbGAgaW4gYmFyZSB3b3JrZmxvdyBhbmQgd2hlbiBgbWFuaWZlc3QyYCBpcyBub24tbnVsbC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBDb25zdGFudHMuZXhwb0NvbmZpZ2AgaW5zdGVhZCwgd2hpY2ggYmVoYXZlcyBtb3JlIGNvbnNpc3RlbnRseSBhY3Jvc3MgRUFTIEJ1aWxkXG4gICAqIGFuZCBFQVMgVXBkYXRlLlxuICAgKi9cbiAgbWFuaWZlc3Q6IEFwcE1hbmlmZXN0IHwgbnVsbDtcbiAgLyoqXG4gICAqIE1hbmlmZXN0IGZvciBFeHBvIGFwcHMgdXNpbmcgbW9kZXJuIEV4cG8gVXBkYXRlcyBmcm9tIGEgcmVtb3RlIHNvdXJjZSwgc3VjaCBhcyBhcHBzIHRoYXRcbiAgICogdXNlIEVBUyBVcGRhdGUuIFJldHVybnMgYG51bGxgIGluIGJhcmUgd29ya2Zsb3cgYW5kIHdoZW4gYG1hbmlmZXN0YCBpcyBub24tbnVsbC5cbiAgICogYENvbnN0YW50cy5leHBvQ29uZmlnYCBzaG91bGQgYmUgdXNlZCBmb3IgYWNjZXNzaW5nIHRoZSBFeHBvIGNvbmZpZyBvYmplY3QuXG4gICAqL1xuICBtYW5pZmVzdDI6IE1hbmlmZXN0IHwgbnVsbDtcbiAgLyoqXG4gICAqIFRoZSBzdGFuZGFyZCBFeHBvIGNvbmZpZyBvYmplY3QgZGVmaW5lZCBpbiBgYXBwLmpzb25gIGFuZCBgYXBwLmNvbmZpZy5qc2AgZmlsZXMuIEZvciBib3RoXG4gICAqIGNsYXNzaWMgYW5kIG1vZGVybiBtYW5pZmVzdHMsIHdoZXRoZXIgdGhleSBhcmUgZW1iZWRkZWQgb3IgcmVtb3RlLlxuICAgKi9cbiAgZXhwb0NvbmZpZzpcbiAgICB8IChFeHBvQ29uZmlnICYge1xuICAgICAgICAvKipcbiAgICAgICAgICogT25seSBwcmVzZW50IGR1cmluZyBkZXZlbG9wbWVudCB1c2luZyBAZXhwby9jbGkuXG4gICAgICAgICAqL1xuICAgICAgICBob3N0VXJpPzogc3RyaW5nO1xuICAgICAgfSlcbiAgICB8IG51bGw7XG4gIC8qKlxuICAgKiBUaGUgc3RhbmRhcmQgRXhwbyBHbyBjb25maWcgb2JqZWN0IHBvcHVsYXRlZCB3aGVuIHJ1bm5pbmcgaW4gRXhwbyBHby5cbiAgICovXG4gIGV4cG9Hb0NvbmZpZzogRXhwb0dvQ29uZmlnIHwgbnVsbDtcbiAgLyoqXG4gICAqIFRoZSBzdGFuZGFyZCBFQVMgY29uZmlnIG9iamVjdCBwb3B1bGF0ZWQgd2hlbiB1c2luZyBFQVMuXG4gICAqL1xuICBlYXNDb25maWc6IEVBU0NvbmZpZyB8IG51bGw7XG4gIC8qKlxuICAgKiBBIHN0cmluZyB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgY3VycmVudCBzZXNzaW9uIG9mIHlvdXIgYXBwLiBJdCBpcyBkaWZmZXJlbnQgYWNyb3NzIGFwcHMgYW5kXG4gICAqIGFjcm9zcyBtdWx0aXBsZSBsYXVuY2hlcyBvZiB0aGUgc2FtZSBhcHAuXG4gICAqL1xuICBzZXNzaW9uSWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHN0YXR1cyBiYXIgaGVpZ2h0IGZvciB0aGUgZGV2aWNlLiBEb2VzIG5vdCBmYWN0b3IgaW4gY2hhbmdlcyB3aGVuIGxvY2F0aW9uIHRyYWNraW5nXG4gICAqIGlzIGluIHVzZSBvciBhIHBob25lIGNhbGwgaXMgYWN0aXZlLlxuICAgKi9cbiAgc3RhdHVzQmFySGVpZ2h0OiBudW1iZXI7XG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgdGhlIHN5c3RlbSBmb250IG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgY3VycmVudCBkZXZpY2UuXG4gICAqL1xuICBzeXN0ZW1Gb250czogc3RyaW5nW107XG4gIHN5c3RlbVZlcnNpb24/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBAaGlkZGVuXG4gICAqL1xuICBzdXBwb3J0ZWRFeHBvU2Rrcz86IHN0cmluZ1tdO1xuICBwbGF0Zm9ybT86IFBsYXRmb3JtTWFuaWZlc3Q7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSB1c2VyIGFnZW50IHN0cmluZyB3aGljaCB3b3VsZCBiZSBpbmNsdWRlZCBpbiByZXF1ZXN0cyBzZW50IGJ5IGEgd2ViIHZpZXcgcnVubmluZyBvblxuICAgKiB0aGlzIGRldmljZS4gVGhpcyBpcyBwcm9iYWJseSBub3QgdGhlIHNhbWUgdXNlciBhZ2VudCB5b3UgbWlnaHQgYmUgcHJvdmlkaW5nIGluIHlvdXIgSlMgYGZldGNoYFxuICAgKiByZXF1ZXN0cy5cbiAgICovXG4gIGdldFdlYlZpZXdVc2VyQWdlbnRBc3luYzogKCkgPT4gUHJvbWlzZTxzdHJpbmcgfCBudWxsPjtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnN0YW50cyBleHRlbmRzIE5hdGl2ZUNvbnN0YW50cyB7XG4gIC8qKlxuICAgKiBAaGlkZGVuXG4gICAqIEB3YXJuaW5nIGRvIG5vdCB1c2UgdGhpcyBwcm9wZXJ0eS4gVXNlIGBtYW5pZmVzdGAgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogSW4gY2VydGFpbiBjYXNlcyBhY2Nlc3NpbmcgbWFuaWZlc3QgdmlhIHRoaXMgcHJvcGVydHlcbiAgICogc3VwcHJlc3NlcyBpbXBvcnRhbnQgd2FybmluZyBhYm91dCBtaXNzaW5nIG1hbmlmZXN0LlxuICAgKi9cbiAgX191bnNhZmVOb1dhcm5NYW5pZmVzdD86IEFwcE1hbmlmZXN0O1xuICAvKipcbiAgICogQGhpZGRlblxuICAgKiBAd2FybmluZyBkbyBub3QgdXNlIHRoaXMgcHJvcGVydHkuIFVzZSBgbWFuaWZlc3QyYCBieSBkZWZhdWx0LlxuICAgKlxuICAgKiBJbiBjZXJ0YWluIGNhc2VzIGFjY2Vzc2luZyBtYW5pZmVzdCB2aWEgdGhpcyBwcm9wZXJ0eVxuICAgKiBzdXBwcmVzc2VzIGltcG9ydGFudCB3YXJuaW5nIGFib3V0IG1pc3NpbmcgbWFuaWZlc3QuXG4gICAqL1xuICBfX3Vuc2FmZU5vV2Fybk1hbmlmZXN0Mj86IE1hbmlmZXN0O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFHQSxJQUFZQSxZQWFYO0FBQUFDLE9BQUEsQ0FBQUQsWUFBQSxHQUFBQSxZQUFBO0FBYkQsV0FBWUEsWUFBWTtFQUl0QkEsWUFBQSw2QkFBeUI7RUFJekJBLFlBQUEsaUJBQWE7RUFJYkEsWUFBQSxtQkFBZTtBQUNqQixDQUFDLEVBYldBLFlBQVksS0FBQUMsT0FBQSxDQUFBRCxZQUFBLEdBQVpBLFlBQVk7QUFnQnhCLElBQVlFLG9CQUlYO0FBQUFELE9BQUEsQ0FBQUMsb0JBQUEsR0FBQUEsb0JBQUE7QUFKRCxXQUFZQSxvQkFBb0I7RUFDOUJBLG9CQUFBLGlCQUFhO0VBQ2JBLG9CQUFBLDZCQUF5QjtFQUN6QkEsb0JBQUEsK0JBQTJCO0FBQzdCLENBQUMsRUFKV0Esb0JBQW9CLEtBQUFELE9BQUEsQ0FBQUMsb0JBQUEsR0FBcEJBLG9CQUFvQjtBQVdoQyxJQUFZQyxrQkFJWDtBQUFBRixPQUFBLENBQUFFLGtCQUFBLEdBQUFBLGtCQUFBO0FBSkQsV0FBWUEsa0JBQWtCO0VBQzVCQSxrQkFBQSx1QkFBbUI7RUFDbkJBLGtCQUFBLHFCQUFpQjtFQUNqQkEsa0JBQUEsK0JBQTJCO0FBQzdCLENBQUMsRUFKV0Esa0JBQWtCLEtBQUFGLE9BQUEsQ0FBQUUsa0JBQUEsR0FBbEJBLGtCQUFrQiJ9